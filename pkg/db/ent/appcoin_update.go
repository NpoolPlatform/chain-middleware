// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/appcoin"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppCoinUpdate is the builder for updating AppCoin entities.
type AppCoinUpdate struct {
	config
	hooks     []Hook
	mutation  *AppCoinMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppCoinUpdate builder.
func (acu *AppCoinUpdate) Where(ps ...predicate.AppCoin) *AppCoinUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetCreatedAt sets the "created_at" field.
func (acu *AppCoinUpdate) SetCreatedAt(u uint32) *AppCoinUpdate {
	acu.mutation.ResetCreatedAt()
	acu.mutation.SetCreatedAt(u)
	return acu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acu *AppCoinUpdate) SetNillableCreatedAt(u *uint32) *AppCoinUpdate {
	if u != nil {
		acu.SetCreatedAt(*u)
	}
	return acu
}

// AddCreatedAt adds u to the "created_at" field.
func (acu *AppCoinUpdate) AddCreatedAt(u int32) *AppCoinUpdate {
	acu.mutation.AddCreatedAt(u)
	return acu
}

// SetUpdatedAt sets the "updated_at" field.
func (acu *AppCoinUpdate) SetUpdatedAt(u uint32) *AppCoinUpdate {
	acu.mutation.ResetUpdatedAt()
	acu.mutation.SetUpdatedAt(u)
	return acu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (acu *AppCoinUpdate) AddUpdatedAt(u int32) *AppCoinUpdate {
	acu.mutation.AddUpdatedAt(u)
	return acu
}

// SetDeletedAt sets the "deleted_at" field.
func (acu *AppCoinUpdate) SetDeletedAt(u uint32) *AppCoinUpdate {
	acu.mutation.ResetDeletedAt()
	acu.mutation.SetDeletedAt(u)
	return acu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acu *AppCoinUpdate) SetNillableDeletedAt(u *uint32) *AppCoinUpdate {
	if u != nil {
		acu.SetDeletedAt(*u)
	}
	return acu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (acu *AppCoinUpdate) AddDeletedAt(u int32) *AppCoinUpdate {
	acu.mutation.AddDeletedAt(u)
	return acu
}

// SetEntID sets the "ent_id" field.
func (acu *AppCoinUpdate) SetEntID(u uuid.UUID) *AppCoinUpdate {
	acu.mutation.SetEntID(u)
	return acu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (acu *AppCoinUpdate) SetNillableEntID(u *uuid.UUID) *AppCoinUpdate {
	if u != nil {
		acu.SetEntID(*u)
	}
	return acu
}

// SetAppID sets the "app_id" field.
func (acu *AppCoinUpdate) SetAppID(u uuid.UUID) *AppCoinUpdate {
	acu.mutation.SetAppID(u)
	return acu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (acu *AppCoinUpdate) SetNillableAppID(u *uuid.UUID) *AppCoinUpdate {
	if u != nil {
		acu.SetAppID(*u)
	}
	return acu
}

// ClearAppID clears the value of the "app_id" field.
func (acu *AppCoinUpdate) ClearAppID() *AppCoinUpdate {
	acu.mutation.ClearAppID()
	return acu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (acu *AppCoinUpdate) SetCoinTypeID(u uuid.UUID) *AppCoinUpdate {
	acu.mutation.SetCoinTypeID(u)
	return acu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (acu *AppCoinUpdate) SetNillableCoinTypeID(u *uuid.UUID) *AppCoinUpdate {
	if u != nil {
		acu.SetCoinTypeID(*u)
	}
	return acu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (acu *AppCoinUpdate) ClearCoinTypeID() *AppCoinUpdate {
	acu.mutation.ClearCoinTypeID()
	return acu
}

// SetName sets the "name" field.
func (acu *AppCoinUpdate) SetName(s string) *AppCoinUpdate {
	acu.mutation.SetName(s)
	return acu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acu *AppCoinUpdate) SetNillableName(s *string) *AppCoinUpdate {
	if s != nil {
		acu.SetName(*s)
	}
	return acu
}

// ClearName clears the value of the "name" field.
func (acu *AppCoinUpdate) ClearName() *AppCoinUpdate {
	acu.mutation.ClearName()
	return acu
}

// SetDisplayNames sets the "display_names" field.
func (acu *AppCoinUpdate) SetDisplayNames(s []string) *AppCoinUpdate {
	acu.mutation.SetDisplayNames(s)
	return acu
}

// ClearDisplayNames clears the value of the "display_names" field.
func (acu *AppCoinUpdate) ClearDisplayNames() *AppCoinUpdate {
	acu.mutation.ClearDisplayNames()
	return acu
}

// SetLogo sets the "logo" field.
func (acu *AppCoinUpdate) SetLogo(s string) *AppCoinUpdate {
	acu.mutation.SetLogo(s)
	return acu
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (acu *AppCoinUpdate) SetNillableLogo(s *string) *AppCoinUpdate {
	if s != nil {
		acu.SetLogo(*s)
	}
	return acu
}

// ClearLogo clears the value of the "logo" field.
func (acu *AppCoinUpdate) ClearLogo() *AppCoinUpdate {
	acu.mutation.ClearLogo()
	return acu
}

// SetForPay sets the "for_pay" field.
func (acu *AppCoinUpdate) SetForPay(b bool) *AppCoinUpdate {
	acu.mutation.SetForPay(b)
	return acu
}

// SetNillableForPay sets the "for_pay" field if the given value is not nil.
func (acu *AppCoinUpdate) SetNillableForPay(b *bool) *AppCoinUpdate {
	if b != nil {
		acu.SetForPay(*b)
	}
	return acu
}

// ClearForPay clears the value of the "for_pay" field.
func (acu *AppCoinUpdate) ClearForPay() *AppCoinUpdate {
	acu.mutation.ClearForPay()
	return acu
}

// SetWithdrawAutoReviewAmount sets the "withdraw_auto_review_amount" field.
func (acu *AppCoinUpdate) SetWithdrawAutoReviewAmount(d decimal.Decimal) *AppCoinUpdate {
	acu.mutation.SetWithdrawAutoReviewAmount(d)
	return acu
}

// SetNillableWithdrawAutoReviewAmount sets the "withdraw_auto_review_amount" field if the given value is not nil.
func (acu *AppCoinUpdate) SetNillableWithdrawAutoReviewAmount(d *decimal.Decimal) *AppCoinUpdate {
	if d != nil {
		acu.SetWithdrawAutoReviewAmount(*d)
	}
	return acu
}

// ClearWithdrawAutoReviewAmount clears the value of the "withdraw_auto_review_amount" field.
func (acu *AppCoinUpdate) ClearWithdrawAutoReviewAmount() *AppCoinUpdate {
	acu.mutation.ClearWithdrawAutoReviewAmount()
	return acu
}

// SetProductPage sets the "product_page" field.
func (acu *AppCoinUpdate) SetProductPage(s string) *AppCoinUpdate {
	acu.mutation.SetProductPage(s)
	return acu
}

// SetNillableProductPage sets the "product_page" field if the given value is not nil.
func (acu *AppCoinUpdate) SetNillableProductPage(s *string) *AppCoinUpdate {
	if s != nil {
		acu.SetProductPage(*s)
	}
	return acu
}

// ClearProductPage clears the value of the "product_page" field.
func (acu *AppCoinUpdate) ClearProductPage() *AppCoinUpdate {
	acu.mutation.ClearProductPage()
	return acu
}

// SetDisabled sets the "disabled" field.
func (acu *AppCoinUpdate) SetDisabled(b bool) *AppCoinUpdate {
	acu.mutation.SetDisabled(b)
	return acu
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (acu *AppCoinUpdate) SetNillableDisabled(b *bool) *AppCoinUpdate {
	if b != nil {
		acu.SetDisabled(*b)
	}
	return acu
}

// ClearDisabled clears the value of the "disabled" field.
func (acu *AppCoinUpdate) ClearDisabled() *AppCoinUpdate {
	acu.mutation.ClearDisabled()
	return acu
}

// SetDailyRewardAmount sets the "daily_reward_amount" field.
func (acu *AppCoinUpdate) SetDailyRewardAmount(d decimal.Decimal) *AppCoinUpdate {
	acu.mutation.SetDailyRewardAmount(d)
	return acu
}

// SetNillableDailyRewardAmount sets the "daily_reward_amount" field if the given value is not nil.
func (acu *AppCoinUpdate) SetNillableDailyRewardAmount(d *decimal.Decimal) *AppCoinUpdate {
	if d != nil {
		acu.SetDailyRewardAmount(*d)
	}
	return acu
}

// ClearDailyRewardAmount clears the value of the "daily_reward_amount" field.
func (acu *AppCoinUpdate) ClearDailyRewardAmount() *AppCoinUpdate {
	acu.mutation.ClearDailyRewardAmount()
	return acu
}

// SetDisplay sets the "display" field.
func (acu *AppCoinUpdate) SetDisplay(b bool) *AppCoinUpdate {
	acu.mutation.SetDisplay(b)
	return acu
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (acu *AppCoinUpdate) SetNillableDisplay(b *bool) *AppCoinUpdate {
	if b != nil {
		acu.SetDisplay(*b)
	}
	return acu
}

// ClearDisplay clears the value of the "display" field.
func (acu *AppCoinUpdate) ClearDisplay() *AppCoinUpdate {
	acu.mutation.ClearDisplay()
	return acu
}

// SetDisplayIndex sets the "display_index" field.
func (acu *AppCoinUpdate) SetDisplayIndex(u uint32) *AppCoinUpdate {
	acu.mutation.ResetDisplayIndex()
	acu.mutation.SetDisplayIndex(u)
	return acu
}

// SetNillableDisplayIndex sets the "display_index" field if the given value is not nil.
func (acu *AppCoinUpdate) SetNillableDisplayIndex(u *uint32) *AppCoinUpdate {
	if u != nil {
		acu.SetDisplayIndex(*u)
	}
	return acu
}

// AddDisplayIndex adds u to the "display_index" field.
func (acu *AppCoinUpdate) AddDisplayIndex(u int32) *AppCoinUpdate {
	acu.mutation.AddDisplayIndex(u)
	return acu
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (acu *AppCoinUpdate) ClearDisplayIndex() *AppCoinUpdate {
	acu.mutation.ClearDisplayIndex()
	return acu
}

// SetMaxAmountPerWithdraw sets the "max_amount_per_withdraw" field.
func (acu *AppCoinUpdate) SetMaxAmountPerWithdraw(d decimal.Decimal) *AppCoinUpdate {
	acu.mutation.SetMaxAmountPerWithdraw(d)
	return acu
}

// SetNillableMaxAmountPerWithdraw sets the "max_amount_per_withdraw" field if the given value is not nil.
func (acu *AppCoinUpdate) SetNillableMaxAmountPerWithdraw(d *decimal.Decimal) *AppCoinUpdate {
	if d != nil {
		acu.SetMaxAmountPerWithdraw(*d)
	}
	return acu
}

// ClearMaxAmountPerWithdraw clears the value of the "max_amount_per_withdraw" field.
func (acu *AppCoinUpdate) ClearMaxAmountPerWithdraw() *AppCoinUpdate {
	acu.mutation.ClearMaxAmountPerWithdraw()
	return acu
}

// Mutation returns the AppCoinMutation object of the builder.
func (acu *AppCoinUpdate) Mutation() *AppCoinMutation {
	return acu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AppCoinUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := acu.defaults(); err != nil {
		return 0, err
	}
	if len(acu.hooks) == 0 {
		affected, err = acu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppCoinMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			acu.mutation = mutation
			affected, err = acu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(acu.hooks) - 1; i >= 0; i-- {
			if acu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AppCoinUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AppCoinUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AppCoinUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acu *AppCoinUpdate) defaults() error {
	if _, ok := acu.mutation.UpdatedAt(); !ok {
		if appcoin.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appcoin.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appcoin.UpdateDefaultUpdatedAt()
		acu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acu *AppCoinUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppCoinUpdate {
	acu.modifiers = append(acu.modifiers, modifiers...)
	return acu
}

func (acu *AppCoinUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appcoin.Table,
			Columns: appcoin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appcoin.FieldID,
			},
		},
	}
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldCreatedAt,
		})
	}
	if value, ok := acu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldCreatedAt,
		})
	}
	if value, ok := acu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldUpdatedAt,
		})
	}
	if value, ok := acu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldUpdatedAt,
		})
	}
	if value, ok := acu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldDeletedAt,
		})
	}
	if value, ok := acu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldDeletedAt,
		})
	}
	if value, ok := acu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appcoin.FieldEntID,
		})
	}
	if value, ok := acu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appcoin.FieldAppID,
		})
	}
	if acu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appcoin.FieldAppID,
		})
	}
	if value, ok := acu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appcoin.FieldCoinTypeID,
		})
	}
	if acu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appcoin.FieldCoinTypeID,
		})
	}
	if value, ok := acu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appcoin.FieldName,
		})
	}
	if acu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appcoin.FieldName,
		})
	}
	if value, ok := acu.mutation.DisplayNames(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appcoin.FieldDisplayNames,
		})
	}
	if acu.mutation.DisplayNamesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: appcoin.FieldDisplayNames,
		})
	}
	if value, ok := acu.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appcoin.FieldLogo,
		})
	}
	if acu.mutation.LogoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appcoin.FieldLogo,
		})
	}
	if value, ok := acu.mutation.ForPay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appcoin.FieldForPay,
		})
	}
	if acu.mutation.ForPayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: appcoin.FieldForPay,
		})
	}
	if value, ok := acu.mutation.WithdrawAutoReviewAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appcoin.FieldWithdrawAutoReviewAmount,
		})
	}
	if acu.mutation.WithdrawAutoReviewAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appcoin.FieldWithdrawAutoReviewAmount,
		})
	}
	if value, ok := acu.mutation.ProductPage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appcoin.FieldProductPage,
		})
	}
	if acu.mutation.ProductPageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appcoin.FieldProductPage,
		})
	}
	if value, ok := acu.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appcoin.FieldDisabled,
		})
	}
	if acu.mutation.DisabledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: appcoin.FieldDisabled,
		})
	}
	if value, ok := acu.mutation.DailyRewardAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appcoin.FieldDailyRewardAmount,
		})
	}
	if acu.mutation.DailyRewardAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appcoin.FieldDailyRewardAmount,
		})
	}
	if value, ok := acu.mutation.Display(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appcoin.FieldDisplay,
		})
	}
	if acu.mutation.DisplayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: appcoin.FieldDisplay,
		})
	}
	if value, ok := acu.mutation.DisplayIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldDisplayIndex,
		})
	}
	if value, ok := acu.mutation.AddedDisplayIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldDisplayIndex,
		})
	}
	if acu.mutation.DisplayIndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: appcoin.FieldDisplayIndex,
		})
	}
	if value, ok := acu.mutation.MaxAmountPerWithdraw(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appcoin.FieldMaxAmountPerWithdraw,
		})
	}
	if acu.mutation.MaxAmountPerWithdrawCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appcoin.FieldMaxAmountPerWithdraw,
		})
	}
	_spec.Modifiers = acu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appcoin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AppCoinUpdateOne is the builder for updating a single AppCoin entity.
type AppCoinUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppCoinMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (acuo *AppCoinUpdateOne) SetCreatedAt(u uint32) *AppCoinUpdateOne {
	acuo.mutation.ResetCreatedAt()
	acuo.mutation.SetCreatedAt(u)
	return acuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acuo *AppCoinUpdateOne) SetNillableCreatedAt(u *uint32) *AppCoinUpdateOne {
	if u != nil {
		acuo.SetCreatedAt(*u)
	}
	return acuo
}

// AddCreatedAt adds u to the "created_at" field.
func (acuo *AppCoinUpdateOne) AddCreatedAt(u int32) *AppCoinUpdateOne {
	acuo.mutation.AddCreatedAt(u)
	return acuo
}

// SetUpdatedAt sets the "updated_at" field.
func (acuo *AppCoinUpdateOne) SetUpdatedAt(u uint32) *AppCoinUpdateOne {
	acuo.mutation.ResetUpdatedAt()
	acuo.mutation.SetUpdatedAt(u)
	return acuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (acuo *AppCoinUpdateOne) AddUpdatedAt(u int32) *AppCoinUpdateOne {
	acuo.mutation.AddUpdatedAt(u)
	return acuo
}

// SetDeletedAt sets the "deleted_at" field.
func (acuo *AppCoinUpdateOne) SetDeletedAt(u uint32) *AppCoinUpdateOne {
	acuo.mutation.ResetDeletedAt()
	acuo.mutation.SetDeletedAt(u)
	return acuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acuo *AppCoinUpdateOne) SetNillableDeletedAt(u *uint32) *AppCoinUpdateOne {
	if u != nil {
		acuo.SetDeletedAt(*u)
	}
	return acuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (acuo *AppCoinUpdateOne) AddDeletedAt(u int32) *AppCoinUpdateOne {
	acuo.mutation.AddDeletedAt(u)
	return acuo
}

// SetEntID sets the "ent_id" field.
func (acuo *AppCoinUpdateOne) SetEntID(u uuid.UUID) *AppCoinUpdateOne {
	acuo.mutation.SetEntID(u)
	return acuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (acuo *AppCoinUpdateOne) SetNillableEntID(u *uuid.UUID) *AppCoinUpdateOne {
	if u != nil {
		acuo.SetEntID(*u)
	}
	return acuo
}

// SetAppID sets the "app_id" field.
func (acuo *AppCoinUpdateOne) SetAppID(u uuid.UUID) *AppCoinUpdateOne {
	acuo.mutation.SetAppID(u)
	return acuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (acuo *AppCoinUpdateOne) SetNillableAppID(u *uuid.UUID) *AppCoinUpdateOne {
	if u != nil {
		acuo.SetAppID(*u)
	}
	return acuo
}

// ClearAppID clears the value of the "app_id" field.
func (acuo *AppCoinUpdateOne) ClearAppID() *AppCoinUpdateOne {
	acuo.mutation.ClearAppID()
	return acuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (acuo *AppCoinUpdateOne) SetCoinTypeID(u uuid.UUID) *AppCoinUpdateOne {
	acuo.mutation.SetCoinTypeID(u)
	return acuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (acuo *AppCoinUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *AppCoinUpdateOne {
	if u != nil {
		acuo.SetCoinTypeID(*u)
	}
	return acuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (acuo *AppCoinUpdateOne) ClearCoinTypeID() *AppCoinUpdateOne {
	acuo.mutation.ClearCoinTypeID()
	return acuo
}

// SetName sets the "name" field.
func (acuo *AppCoinUpdateOne) SetName(s string) *AppCoinUpdateOne {
	acuo.mutation.SetName(s)
	return acuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acuo *AppCoinUpdateOne) SetNillableName(s *string) *AppCoinUpdateOne {
	if s != nil {
		acuo.SetName(*s)
	}
	return acuo
}

// ClearName clears the value of the "name" field.
func (acuo *AppCoinUpdateOne) ClearName() *AppCoinUpdateOne {
	acuo.mutation.ClearName()
	return acuo
}

// SetDisplayNames sets the "display_names" field.
func (acuo *AppCoinUpdateOne) SetDisplayNames(s []string) *AppCoinUpdateOne {
	acuo.mutation.SetDisplayNames(s)
	return acuo
}

// ClearDisplayNames clears the value of the "display_names" field.
func (acuo *AppCoinUpdateOne) ClearDisplayNames() *AppCoinUpdateOne {
	acuo.mutation.ClearDisplayNames()
	return acuo
}

// SetLogo sets the "logo" field.
func (acuo *AppCoinUpdateOne) SetLogo(s string) *AppCoinUpdateOne {
	acuo.mutation.SetLogo(s)
	return acuo
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (acuo *AppCoinUpdateOne) SetNillableLogo(s *string) *AppCoinUpdateOne {
	if s != nil {
		acuo.SetLogo(*s)
	}
	return acuo
}

// ClearLogo clears the value of the "logo" field.
func (acuo *AppCoinUpdateOne) ClearLogo() *AppCoinUpdateOne {
	acuo.mutation.ClearLogo()
	return acuo
}

// SetForPay sets the "for_pay" field.
func (acuo *AppCoinUpdateOne) SetForPay(b bool) *AppCoinUpdateOne {
	acuo.mutation.SetForPay(b)
	return acuo
}

// SetNillableForPay sets the "for_pay" field if the given value is not nil.
func (acuo *AppCoinUpdateOne) SetNillableForPay(b *bool) *AppCoinUpdateOne {
	if b != nil {
		acuo.SetForPay(*b)
	}
	return acuo
}

// ClearForPay clears the value of the "for_pay" field.
func (acuo *AppCoinUpdateOne) ClearForPay() *AppCoinUpdateOne {
	acuo.mutation.ClearForPay()
	return acuo
}

// SetWithdrawAutoReviewAmount sets the "withdraw_auto_review_amount" field.
func (acuo *AppCoinUpdateOne) SetWithdrawAutoReviewAmount(d decimal.Decimal) *AppCoinUpdateOne {
	acuo.mutation.SetWithdrawAutoReviewAmount(d)
	return acuo
}

// SetNillableWithdrawAutoReviewAmount sets the "withdraw_auto_review_amount" field if the given value is not nil.
func (acuo *AppCoinUpdateOne) SetNillableWithdrawAutoReviewAmount(d *decimal.Decimal) *AppCoinUpdateOne {
	if d != nil {
		acuo.SetWithdrawAutoReviewAmount(*d)
	}
	return acuo
}

// ClearWithdrawAutoReviewAmount clears the value of the "withdraw_auto_review_amount" field.
func (acuo *AppCoinUpdateOne) ClearWithdrawAutoReviewAmount() *AppCoinUpdateOne {
	acuo.mutation.ClearWithdrawAutoReviewAmount()
	return acuo
}

// SetProductPage sets the "product_page" field.
func (acuo *AppCoinUpdateOne) SetProductPage(s string) *AppCoinUpdateOne {
	acuo.mutation.SetProductPage(s)
	return acuo
}

// SetNillableProductPage sets the "product_page" field if the given value is not nil.
func (acuo *AppCoinUpdateOne) SetNillableProductPage(s *string) *AppCoinUpdateOne {
	if s != nil {
		acuo.SetProductPage(*s)
	}
	return acuo
}

// ClearProductPage clears the value of the "product_page" field.
func (acuo *AppCoinUpdateOne) ClearProductPage() *AppCoinUpdateOne {
	acuo.mutation.ClearProductPage()
	return acuo
}

// SetDisabled sets the "disabled" field.
func (acuo *AppCoinUpdateOne) SetDisabled(b bool) *AppCoinUpdateOne {
	acuo.mutation.SetDisabled(b)
	return acuo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (acuo *AppCoinUpdateOne) SetNillableDisabled(b *bool) *AppCoinUpdateOne {
	if b != nil {
		acuo.SetDisabled(*b)
	}
	return acuo
}

// ClearDisabled clears the value of the "disabled" field.
func (acuo *AppCoinUpdateOne) ClearDisabled() *AppCoinUpdateOne {
	acuo.mutation.ClearDisabled()
	return acuo
}

// SetDailyRewardAmount sets the "daily_reward_amount" field.
func (acuo *AppCoinUpdateOne) SetDailyRewardAmount(d decimal.Decimal) *AppCoinUpdateOne {
	acuo.mutation.SetDailyRewardAmount(d)
	return acuo
}

// SetNillableDailyRewardAmount sets the "daily_reward_amount" field if the given value is not nil.
func (acuo *AppCoinUpdateOne) SetNillableDailyRewardAmount(d *decimal.Decimal) *AppCoinUpdateOne {
	if d != nil {
		acuo.SetDailyRewardAmount(*d)
	}
	return acuo
}

// ClearDailyRewardAmount clears the value of the "daily_reward_amount" field.
func (acuo *AppCoinUpdateOne) ClearDailyRewardAmount() *AppCoinUpdateOne {
	acuo.mutation.ClearDailyRewardAmount()
	return acuo
}

// SetDisplay sets the "display" field.
func (acuo *AppCoinUpdateOne) SetDisplay(b bool) *AppCoinUpdateOne {
	acuo.mutation.SetDisplay(b)
	return acuo
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (acuo *AppCoinUpdateOne) SetNillableDisplay(b *bool) *AppCoinUpdateOne {
	if b != nil {
		acuo.SetDisplay(*b)
	}
	return acuo
}

// ClearDisplay clears the value of the "display" field.
func (acuo *AppCoinUpdateOne) ClearDisplay() *AppCoinUpdateOne {
	acuo.mutation.ClearDisplay()
	return acuo
}

// SetDisplayIndex sets the "display_index" field.
func (acuo *AppCoinUpdateOne) SetDisplayIndex(u uint32) *AppCoinUpdateOne {
	acuo.mutation.ResetDisplayIndex()
	acuo.mutation.SetDisplayIndex(u)
	return acuo
}

// SetNillableDisplayIndex sets the "display_index" field if the given value is not nil.
func (acuo *AppCoinUpdateOne) SetNillableDisplayIndex(u *uint32) *AppCoinUpdateOne {
	if u != nil {
		acuo.SetDisplayIndex(*u)
	}
	return acuo
}

// AddDisplayIndex adds u to the "display_index" field.
func (acuo *AppCoinUpdateOne) AddDisplayIndex(u int32) *AppCoinUpdateOne {
	acuo.mutation.AddDisplayIndex(u)
	return acuo
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (acuo *AppCoinUpdateOne) ClearDisplayIndex() *AppCoinUpdateOne {
	acuo.mutation.ClearDisplayIndex()
	return acuo
}

// SetMaxAmountPerWithdraw sets the "max_amount_per_withdraw" field.
func (acuo *AppCoinUpdateOne) SetMaxAmountPerWithdraw(d decimal.Decimal) *AppCoinUpdateOne {
	acuo.mutation.SetMaxAmountPerWithdraw(d)
	return acuo
}

// SetNillableMaxAmountPerWithdraw sets the "max_amount_per_withdraw" field if the given value is not nil.
func (acuo *AppCoinUpdateOne) SetNillableMaxAmountPerWithdraw(d *decimal.Decimal) *AppCoinUpdateOne {
	if d != nil {
		acuo.SetMaxAmountPerWithdraw(*d)
	}
	return acuo
}

// ClearMaxAmountPerWithdraw clears the value of the "max_amount_per_withdraw" field.
func (acuo *AppCoinUpdateOne) ClearMaxAmountPerWithdraw() *AppCoinUpdateOne {
	acuo.mutation.ClearMaxAmountPerWithdraw()
	return acuo
}

// Mutation returns the AppCoinMutation object of the builder.
func (acuo *AppCoinUpdateOne) Mutation() *AppCoinMutation {
	return acuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AppCoinUpdateOne) Select(field string, fields ...string) *AppCoinUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AppCoin entity.
func (acuo *AppCoinUpdateOne) Save(ctx context.Context) (*AppCoin, error) {
	var (
		err  error
		node *AppCoin
	)
	if err := acuo.defaults(); err != nil {
		return nil, err
	}
	if len(acuo.hooks) == 0 {
		node, err = acuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppCoinMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			acuo.mutation = mutation
			node, err = acuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(acuo.hooks) - 1; i >= 0; i-- {
			if acuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, acuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppCoin)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppCoinMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AppCoinUpdateOne) SaveX(ctx context.Context) *AppCoin {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AppCoinUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AppCoinUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acuo *AppCoinUpdateOne) defaults() error {
	if _, ok := acuo.mutation.UpdatedAt(); !ok {
		if appcoin.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appcoin.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appcoin.UpdateDefaultUpdatedAt()
		acuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acuo *AppCoinUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppCoinUpdateOne {
	acuo.modifiers = append(acuo.modifiers, modifiers...)
	return acuo
}

func (acuo *AppCoinUpdateOne) sqlSave(ctx context.Context) (_node *AppCoin, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appcoin.Table,
			Columns: appcoin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appcoin.FieldID,
			},
		},
	}
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppCoin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appcoin.FieldID)
		for _, f := range fields {
			if !appcoin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appcoin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldCreatedAt,
		})
	}
	if value, ok := acuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldCreatedAt,
		})
	}
	if value, ok := acuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldUpdatedAt,
		})
	}
	if value, ok := acuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldUpdatedAt,
		})
	}
	if value, ok := acuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldDeletedAt,
		})
	}
	if value, ok := acuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldDeletedAt,
		})
	}
	if value, ok := acuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appcoin.FieldEntID,
		})
	}
	if value, ok := acuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appcoin.FieldAppID,
		})
	}
	if acuo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appcoin.FieldAppID,
		})
	}
	if value, ok := acuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appcoin.FieldCoinTypeID,
		})
	}
	if acuo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appcoin.FieldCoinTypeID,
		})
	}
	if value, ok := acuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appcoin.FieldName,
		})
	}
	if acuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appcoin.FieldName,
		})
	}
	if value, ok := acuo.mutation.DisplayNames(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appcoin.FieldDisplayNames,
		})
	}
	if acuo.mutation.DisplayNamesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: appcoin.FieldDisplayNames,
		})
	}
	if value, ok := acuo.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appcoin.FieldLogo,
		})
	}
	if acuo.mutation.LogoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appcoin.FieldLogo,
		})
	}
	if value, ok := acuo.mutation.ForPay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appcoin.FieldForPay,
		})
	}
	if acuo.mutation.ForPayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: appcoin.FieldForPay,
		})
	}
	if value, ok := acuo.mutation.WithdrawAutoReviewAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appcoin.FieldWithdrawAutoReviewAmount,
		})
	}
	if acuo.mutation.WithdrawAutoReviewAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appcoin.FieldWithdrawAutoReviewAmount,
		})
	}
	if value, ok := acuo.mutation.ProductPage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appcoin.FieldProductPage,
		})
	}
	if acuo.mutation.ProductPageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appcoin.FieldProductPage,
		})
	}
	if value, ok := acuo.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appcoin.FieldDisabled,
		})
	}
	if acuo.mutation.DisabledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: appcoin.FieldDisabled,
		})
	}
	if value, ok := acuo.mutation.DailyRewardAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appcoin.FieldDailyRewardAmount,
		})
	}
	if acuo.mutation.DailyRewardAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appcoin.FieldDailyRewardAmount,
		})
	}
	if value, ok := acuo.mutation.Display(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appcoin.FieldDisplay,
		})
	}
	if acuo.mutation.DisplayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: appcoin.FieldDisplay,
		})
	}
	if value, ok := acuo.mutation.DisplayIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldDisplayIndex,
		})
	}
	if value, ok := acuo.mutation.AddedDisplayIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldDisplayIndex,
		})
	}
	if acuo.mutation.DisplayIndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: appcoin.FieldDisplayIndex,
		})
	}
	if value, ok := acuo.mutation.MaxAmountPerWithdraw(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appcoin.FieldMaxAmountPerWithdraw,
		})
	}
	if acuo.mutation.MaxAmountPerWithdrawCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appcoin.FieldMaxAmountPerWithdraw,
		})
	}
	_spec.Modifiers = acuo.modifiers
	_node = &AppCoin{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appcoin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
