// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/appcoin"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppCoinCreate is the builder for creating a AppCoin entity.
type AppCoinCreate struct {
	config
	mutation *AppCoinMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (acc *AppCoinCreate) SetCreatedAt(u uint32) *AppCoinCreate {
	acc.mutation.SetCreatedAt(u)
	return acc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acc *AppCoinCreate) SetNillableCreatedAt(u *uint32) *AppCoinCreate {
	if u != nil {
		acc.SetCreatedAt(*u)
	}
	return acc
}

// SetUpdatedAt sets the "updated_at" field.
func (acc *AppCoinCreate) SetUpdatedAt(u uint32) *AppCoinCreate {
	acc.mutation.SetUpdatedAt(u)
	return acc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (acc *AppCoinCreate) SetNillableUpdatedAt(u *uint32) *AppCoinCreate {
	if u != nil {
		acc.SetUpdatedAt(*u)
	}
	return acc
}

// SetDeletedAt sets the "deleted_at" field.
func (acc *AppCoinCreate) SetDeletedAt(u uint32) *AppCoinCreate {
	acc.mutation.SetDeletedAt(u)
	return acc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acc *AppCoinCreate) SetNillableDeletedAt(u *uint32) *AppCoinCreate {
	if u != nil {
		acc.SetDeletedAt(*u)
	}
	return acc
}

// SetEntID sets the "ent_id" field.
func (acc *AppCoinCreate) SetEntID(u uuid.UUID) *AppCoinCreate {
	acc.mutation.SetEntID(u)
	return acc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (acc *AppCoinCreate) SetNillableEntID(u *uuid.UUID) *AppCoinCreate {
	if u != nil {
		acc.SetEntID(*u)
	}
	return acc
}

// SetAppID sets the "app_id" field.
func (acc *AppCoinCreate) SetAppID(u uuid.UUID) *AppCoinCreate {
	acc.mutation.SetAppID(u)
	return acc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (acc *AppCoinCreate) SetNillableAppID(u *uuid.UUID) *AppCoinCreate {
	if u != nil {
		acc.SetAppID(*u)
	}
	return acc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (acc *AppCoinCreate) SetCoinTypeID(u uuid.UUID) *AppCoinCreate {
	acc.mutation.SetCoinTypeID(u)
	return acc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (acc *AppCoinCreate) SetNillableCoinTypeID(u *uuid.UUID) *AppCoinCreate {
	if u != nil {
		acc.SetCoinTypeID(*u)
	}
	return acc
}

// SetName sets the "name" field.
func (acc *AppCoinCreate) SetName(s string) *AppCoinCreate {
	acc.mutation.SetName(s)
	return acc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acc *AppCoinCreate) SetNillableName(s *string) *AppCoinCreate {
	if s != nil {
		acc.SetName(*s)
	}
	return acc
}

// SetDisplayNames sets the "display_names" field.
func (acc *AppCoinCreate) SetDisplayNames(s []string) *AppCoinCreate {
	acc.mutation.SetDisplayNames(s)
	return acc
}

// SetLogo sets the "logo" field.
func (acc *AppCoinCreate) SetLogo(s string) *AppCoinCreate {
	acc.mutation.SetLogo(s)
	return acc
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (acc *AppCoinCreate) SetNillableLogo(s *string) *AppCoinCreate {
	if s != nil {
		acc.SetLogo(*s)
	}
	return acc
}

// SetForPay sets the "for_pay" field.
func (acc *AppCoinCreate) SetForPay(b bool) *AppCoinCreate {
	acc.mutation.SetForPay(b)
	return acc
}

// SetNillableForPay sets the "for_pay" field if the given value is not nil.
func (acc *AppCoinCreate) SetNillableForPay(b *bool) *AppCoinCreate {
	if b != nil {
		acc.SetForPay(*b)
	}
	return acc
}

// SetWithdrawAutoReviewAmount sets the "withdraw_auto_review_amount" field.
func (acc *AppCoinCreate) SetWithdrawAutoReviewAmount(d decimal.Decimal) *AppCoinCreate {
	acc.mutation.SetWithdrawAutoReviewAmount(d)
	return acc
}

// SetNillableWithdrawAutoReviewAmount sets the "withdraw_auto_review_amount" field if the given value is not nil.
func (acc *AppCoinCreate) SetNillableWithdrawAutoReviewAmount(d *decimal.Decimal) *AppCoinCreate {
	if d != nil {
		acc.SetWithdrawAutoReviewAmount(*d)
	}
	return acc
}

// SetProductPage sets the "product_page" field.
func (acc *AppCoinCreate) SetProductPage(s string) *AppCoinCreate {
	acc.mutation.SetProductPage(s)
	return acc
}

// SetNillableProductPage sets the "product_page" field if the given value is not nil.
func (acc *AppCoinCreate) SetNillableProductPage(s *string) *AppCoinCreate {
	if s != nil {
		acc.SetProductPage(*s)
	}
	return acc
}

// SetDisabled sets the "disabled" field.
func (acc *AppCoinCreate) SetDisabled(b bool) *AppCoinCreate {
	acc.mutation.SetDisabled(b)
	return acc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (acc *AppCoinCreate) SetNillableDisabled(b *bool) *AppCoinCreate {
	if b != nil {
		acc.SetDisabled(*b)
	}
	return acc
}

// SetDailyRewardAmount sets the "daily_reward_amount" field.
func (acc *AppCoinCreate) SetDailyRewardAmount(d decimal.Decimal) *AppCoinCreate {
	acc.mutation.SetDailyRewardAmount(d)
	return acc
}

// SetNillableDailyRewardAmount sets the "daily_reward_amount" field if the given value is not nil.
func (acc *AppCoinCreate) SetNillableDailyRewardAmount(d *decimal.Decimal) *AppCoinCreate {
	if d != nil {
		acc.SetDailyRewardAmount(*d)
	}
	return acc
}

// SetDisplay sets the "display" field.
func (acc *AppCoinCreate) SetDisplay(b bool) *AppCoinCreate {
	acc.mutation.SetDisplay(b)
	return acc
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (acc *AppCoinCreate) SetNillableDisplay(b *bool) *AppCoinCreate {
	if b != nil {
		acc.SetDisplay(*b)
	}
	return acc
}

// SetDisplayIndex sets the "display_index" field.
func (acc *AppCoinCreate) SetDisplayIndex(u uint32) *AppCoinCreate {
	acc.mutation.SetDisplayIndex(u)
	return acc
}

// SetNillableDisplayIndex sets the "display_index" field if the given value is not nil.
func (acc *AppCoinCreate) SetNillableDisplayIndex(u *uint32) *AppCoinCreate {
	if u != nil {
		acc.SetDisplayIndex(*u)
	}
	return acc
}

// SetMaxAmountPerWithdraw sets the "max_amount_per_withdraw" field.
func (acc *AppCoinCreate) SetMaxAmountPerWithdraw(d decimal.Decimal) *AppCoinCreate {
	acc.mutation.SetMaxAmountPerWithdraw(d)
	return acc
}

// SetNillableMaxAmountPerWithdraw sets the "max_amount_per_withdraw" field if the given value is not nil.
func (acc *AppCoinCreate) SetNillableMaxAmountPerWithdraw(d *decimal.Decimal) *AppCoinCreate {
	if d != nil {
		acc.SetMaxAmountPerWithdraw(*d)
	}
	return acc
}

// SetID sets the "id" field.
func (acc *AppCoinCreate) SetID(u uuid.UUID) *AppCoinCreate {
	acc.mutation.SetID(u)
	return acc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (acc *AppCoinCreate) SetNillableID(u *uuid.UUID) *AppCoinCreate {
	if u != nil {
		acc.SetID(*u)
	}
	return acc
}

// Mutation returns the AppCoinMutation object of the builder.
func (acc *AppCoinCreate) Mutation() *AppCoinMutation {
	return acc.mutation
}

// Save creates the AppCoin in the database.
func (acc *AppCoinCreate) Save(ctx context.Context) (*AppCoin, error) {
	var (
		err  error
		node *AppCoin
	)
	if err := acc.defaults(); err != nil {
		return nil, err
	}
	if len(acc.hooks) == 0 {
		if err = acc.check(); err != nil {
			return nil, err
		}
		node, err = acc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppCoinMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = acc.check(); err != nil {
				return nil, err
			}
			acc.mutation = mutation
			if node, err = acc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(acc.hooks) - 1; i >= 0; i-- {
			if acc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, acc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppCoin)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppCoinMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AppCoinCreate) SaveX(ctx context.Context) *AppCoin {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AppCoinCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AppCoinCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *AppCoinCreate) defaults() error {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		if appcoin.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized appcoin.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := appcoin.DefaultCreatedAt()
		acc.mutation.SetCreatedAt(v)
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		if appcoin.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appcoin.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appcoin.DefaultUpdatedAt()
		acc.mutation.SetUpdatedAt(v)
	}
	if _, ok := acc.mutation.DeletedAt(); !ok {
		if appcoin.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized appcoin.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := appcoin.DefaultDeletedAt()
		acc.mutation.SetDeletedAt(v)
	}
	if _, ok := acc.mutation.EntID(); !ok {
		if appcoin.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized appcoin.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := appcoin.DefaultEntID()
		acc.mutation.SetEntID(v)
	}
	if _, ok := acc.mutation.AppID(); !ok {
		if appcoin.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized appcoin.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := appcoin.DefaultAppID()
		acc.mutation.SetAppID(v)
	}
	if _, ok := acc.mutation.CoinTypeID(); !ok {
		if appcoin.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized appcoin.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := appcoin.DefaultCoinTypeID()
		acc.mutation.SetCoinTypeID(v)
	}
	if _, ok := acc.mutation.Name(); !ok {
		v := appcoin.DefaultName
		acc.mutation.SetName(v)
	}
	if _, ok := acc.mutation.DisplayNames(); !ok {
		v := appcoin.DefaultDisplayNames
		acc.mutation.SetDisplayNames(v)
	}
	if _, ok := acc.mutation.Logo(); !ok {
		v := appcoin.DefaultLogo
		acc.mutation.SetLogo(v)
	}
	if _, ok := acc.mutation.ForPay(); !ok {
		v := appcoin.DefaultForPay
		acc.mutation.SetForPay(v)
	}
	if _, ok := acc.mutation.WithdrawAutoReviewAmount(); !ok {
		v := appcoin.DefaultWithdrawAutoReviewAmount
		acc.mutation.SetWithdrawAutoReviewAmount(v)
	}
	if _, ok := acc.mutation.ProductPage(); !ok {
		v := appcoin.DefaultProductPage
		acc.mutation.SetProductPage(v)
	}
	if _, ok := acc.mutation.Disabled(); !ok {
		v := appcoin.DefaultDisabled
		acc.mutation.SetDisabled(v)
	}
	if _, ok := acc.mutation.DailyRewardAmount(); !ok {
		v := appcoin.DefaultDailyRewardAmount
		acc.mutation.SetDailyRewardAmount(v)
	}
	if _, ok := acc.mutation.Display(); !ok {
		v := appcoin.DefaultDisplay
		acc.mutation.SetDisplay(v)
	}
	if _, ok := acc.mutation.DisplayIndex(); !ok {
		v := appcoin.DefaultDisplayIndex
		acc.mutation.SetDisplayIndex(v)
	}
	if _, ok := acc.mutation.MaxAmountPerWithdraw(); !ok {
		v := appcoin.DefaultMaxAmountPerWithdraw
		acc.mutation.SetMaxAmountPerWithdraw(v)
	}
	if _, ok := acc.mutation.ID(); !ok {
		if appcoin.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized appcoin.DefaultID (forgotten import ent/runtime?)")
		}
		v := appcoin.DefaultID()
		acc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (acc *AppCoinCreate) check() error {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppCoin.created_at"`)}
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AppCoin.updated_at"`)}
	}
	if _, ok := acc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "AppCoin.deleted_at"`)}
	}
	if _, ok := acc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "AppCoin.ent_id"`)}
	}
	return nil
}

func (acc *AppCoinCreate) sqlSave(ctx context.Context) (*AppCoin, error) {
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (acc *AppCoinCreate) createSpec() (*AppCoin, *sqlgraph.CreateSpec) {
	var (
		_node = &AppCoin{config: acc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appcoin.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appcoin.FieldID,
			},
		}
	)
	_spec.OnConflict = acc.conflict
	if id, ok := acc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := acc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := acc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := acc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := acc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appcoin.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := acc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appcoin.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := acc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appcoin.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := acc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appcoin.FieldName,
		})
		_node.Name = value
	}
	if value, ok := acc.mutation.DisplayNames(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appcoin.FieldDisplayNames,
		})
		_node.DisplayNames = value
	}
	if value, ok := acc.mutation.Logo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appcoin.FieldLogo,
		})
		_node.Logo = value
	}
	if value, ok := acc.mutation.ForPay(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appcoin.FieldForPay,
		})
		_node.ForPay = value
	}
	if value, ok := acc.mutation.WithdrawAutoReviewAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appcoin.FieldWithdrawAutoReviewAmount,
		})
		_node.WithdrawAutoReviewAmount = value
	}
	if value, ok := acc.mutation.ProductPage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appcoin.FieldProductPage,
		})
		_node.ProductPage = value
	}
	if value, ok := acc.mutation.Disabled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appcoin.FieldDisabled,
		})
		_node.Disabled = value
	}
	if value, ok := acc.mutation.DailyRewardAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appcoin.FieldDailyRewardAmount,
		})
		_node.DailyRewardAmount = value
	}
	if value, ok := acc.mutation.Display(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appcoin.FieldDisplay,
		})
		_node.Display = value
	}
	if value, ok := acc.mutation.DisplayIndex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcoin.FieldDisplayIndex,
		})
		_node.DisplayIndex = value
	}
	if value, ok := acc.mutation.MaxAmountPerWithdraw(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appcoin.FieldMaxAmountPerWithdraw,
		})
		_node.MaxAmountPerWithdraw = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppCoin.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppCoinUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (acc *AppCoinCreate) OnConflict(opts ...sql.ConflictOption) *AppCoinUpsertOne {
	acc.conflict = opts
	return &AppCoinUpsertOne{
		create: acc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppCoin.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acc *AppCoinCreate) OnConflictColumns(columns ...string) *AppCoinUpsertOne {
	acc.conflict = append(acc.conflict, sql.ConflictColumns(columns...))
	return &AppCoinUpsertOne{
		create: acc,
	}
}

type (
	// AppCoinUpsertOne is the builder for "upsert"-ing
	//  one AppCoin node.
	AppCoinUpsertOne struct {
		create *AppCoinCreate
	}

	// AppCoinUpsert is the "OnConflict" setter.
	AppCoinUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AppCoinUpsert) SetCreatedAt(v uint32) *AppCoinUpsert {
	u.Set(appcoin.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppCoinUpsert) UpdateCreatedAt() *AppCoinUpsert {
	u.SetExcluded(appcoin.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppCoinUpsert) AddCreatedAt(v uint32) *AppCoinUpsert {
	u.Add(appcoin.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppCoinUpsert) SetUpdatedAt(v uint32) *AppCoinUpsert {
	u.Set(appcoin.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppCoinUpsert) UpdateUpdatedAt() *AppCoinUpsert {
	u.SetExcluded(appcoin.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppCoinUpsert) AddUpdatedAt(v uint32) *AppCoinUpsert {
	u.Add(appcoin.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppCoinUpsert) SetDeletedAt(v uint32) *AppCoinUpsert {
	u.Set(appcoin.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppCoinUpsert) UpdateDeletedAt() *AppCoinUpsert {
	u.SetExcluded(appcoin.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppCoinUpsert) AddDeletedAt(v uint32) *AppCoinUpsert {
	u.Add(appcoin.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppCoinUpsert) SetEntID(v uuid.UUID) *AppCoinUpsert {
	u.Set(appcoin.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppCoinUpsert) UpdateEntID() *AppCoinUpsert {
	u.SetExcluded(appcoin.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppCoinUpsert) SetAppID(v uuid.UUID) *AppCoinUpsert {
	u.Set(appcoin.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppCoinUpsert) UpdateAppID() *AppCoinUpsert {
	u.SetExcluded(appcoin.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppCoinUpsert) ClearAppID() *AppCoinUpsert {
	u.SetNull(appcoin.FieldAppID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *AppCoinUpsert) SetCoinTypeID(v uuid.UUID) *AppCoinUpsert {
	u.Set(appcoin.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *AppCoinUpsert) UpdateCoinTypeID() *AppCoinUpsert {
	u.SetExcluded(appcoin.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *AppCoinUpsert) ClearCoinTypeID() *AppCoinUpsert {
	u.SetNull(appcoin.FieldCoinTypeID)
	return u
}

// SetName sets the "name" field.
func (u *AppCoinUpsert) SetName(v string) *AppCoinUpsert {
	u.Set(appcoin.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppCoinUpsert) UpdateName() *AppCoinUpsert {
	u.SetExcluded(appcoin.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *AppCoinUpsert) ClearName() *AppCoinUpsert {
	u.SetNull(appcoin.FieldName)
	return u
}

// SetDisplayNames sets the "display_names" field.
func (u *AppCoinUpsert) SetDisplayNames(v []string) *AppCoinUpsert {
	u.Set(appcoin.FieldDisplayNames, v)
	return u
}

// UpdateDisplayNames sets the "display_names" field to the value that was provided on create.
func (u *AppCoinUpsert) UpdateDisplayNames() *AppCoinUpsert {
	u.SetExcluded(appcoin.FieldDisplayNames)
	return u
}

// ClearDisplayNames clears the value of the "display_names" field.
func (u *AppCoinUpsert) ClearDisplayNames() *AppCoinUpsert {
	u.SetNull(appcoin.FieldDisplayNames)
	return u
}

// SetLogo sets the "logo" field.
func (u *AppCoinUpsert) SetLogo(v string) *AppCoinUpsert {
	u.Set(appcoin.FieldLogo, v)
	return u
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *AppCoinUpsert) UpdateLogo() *AppCoinUpsert {
	u.SetExcluded(appcoin.FieldLogo)
	return u
}

// ClearLogo clears the value of the "logo" field.
func (u *AppCoinUpsert) ClearLogo() *AppCoinUpsert {
	u.SetNull(appcoin.FieldLogo)
	return u
}

// SetForPay sets the "for_pay" field.
func (u *AppCoinUpsert) SetForPay(v bool) *AppCoinUpsert {
	u.Set(appcoin.FieldForPay, v)
	return u
}

// UpdateForPay sets the "for_pay" field to the value that was provided on create.
func (u *AppCoinUpsert) UpdateForPay() *AppCoinUpsert {
	u.SetExcluded(appcoin.FieldForPay)
	return u
}

// ClearForPay clears the value of the "for_pay" field.
func (u *AppCoinUpsert) ClearForPay() *AppCoinUpsert {
	u.SetNull(appcoin.FieldForPay)
	return u
}

// SetWithdrawAutoReviewAmount sets the "withdraw_auto_review_amount" field.
func (u *AppCoinUpsert) SetWithdrawAutoReviewAmount(v decimal.Decimal) *AppCoinUpsert {
	u.Set(appcoin.FieldWithdrawAutoReviewAmount, v)
	return u
}

// UpdateWithdrawAutoReviewAmount sets the "withdraw_auto_review_amount" field to the value that was provided on create.
func (u *AppCoinUpsert) UpdateWithdrawAutoReviewAmount() *AppCoinUpsert {
	u.SetExcluded(appcoin.FieldWithdrawAutoReviewAmount)
	return u
}

// ClearWithdrawAutoReviewAmount clears the value of the "withdraw_auto_review_amount" field.
func (u *AppCoinUpsert) ClearWithdrawAutoReviewAmount() *AppCoinUpsert {
	u.SetNull(appcoin.FieldWithdrawAutoReviewAmount)
	return u
}

// SetProductPage sets the "product_page" field.
func (u *AppCoinUpsert) SetProductPage(v string) *AppCoinUpsert {
	u.Set(appcoin.FieldProductPage, v)
	return u
}

// UpdateProductPage sets the "product_page" field to the value that was provided on create.
func (u *AppCoinUpsert) UpdateProductPage() *AppCoinUpsert {
	u.SetExcluded(appcoin.FieldProductPage)
	return u
}

// ClearProductPage clears the value of the "product_page" field.
func (u *AppCoinUpsert) ClearProductPage() *AppCoinUpsert {
	u.SetNull(appcoin.FieldProductPage)
	return u
}

// SetDisabled sets the "disabled" field.
func (u *AppCoinUpsert) SetDisabled(v bool) *AppCoinUpsert {
	u.Set(appcoin.FieldDisabled, v)
	return u
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *AppCoinUpsert) UpdateDisabled() *AppCoinUpsert {
	u.SetExcluded(appcoin.FieldDisabled)
	return u
}

// ClearDisabled clears the value of the "disabled" field.
func (u *AppCoinUpsert) ClearDisabled() *AppCoinUpsert {
	u.SetNull(appcoin.FieldDisabled)
	return u
}

// SetDailyRewardAmount sets the "daily_reward_amount" field.
func (u *AppCoinUpsert) SetDailyRewardAmount(v decimal.Decimal) *AppCoinUpsert {
	u.Set(appcoin.FieldDailyRewardAmount, v)
	return u
}

// UpdateDailyRewardAmount sets the "daily_reward_amount" field to the value that was provided on create.
func (u *AppCoinUpsert) UpdateDailyRewardAmount() *AppCoinUpsert {
	u.SetExcluded(appcoin.FieldDailyRewardAmount)
	return u
}

// ClearDailyRewardAmount clears the value of the "daily_reward_amount" field.
func (u *AppCoinUpsert) ClearDailyRewardAmount() *AppCoinUpsert {
	u.SetNull(appcoin.FieldDailyRewardAmount)
	return u
}

// SetDisplay sets the "display" field.
func (u *AppCoinUpsert) SetDisplay(v bool) *AppCoinUpsert {
	u.Set(appcoin.FieldDisplay, v)
	return u
}

// UpdateDisplay sets the "display" field to the value that was provided on create.
func (u *AppCoinUpsert) UpdateDisplay() *AppCoinUpsert {
	u.SetExcluded(appcoin.FieldDisplay)
	return u
}

// ClearDisplay clears the value of the "display" field.
func (u *AppCoinUpsert) ClearDisplay() *AppCoinUpsert {
	u.SetNull(appcoin.FieldDisplay)
	return u
}

// SetDisplayIndex sets the "display_index" field.
func (u *AppCoinUpsert) SetDisplayIndex(v uint32) *AppCoinUpsert {
	u.Set(appcoin.FieldDisplayIndex, v)
	return u
}

// UpdateDisplayIndex sets the "display_index" field to the value that was provided on create.
func (u *AppCoinUpsert) UpdateDisplayIndex() *AppCoinUpsert {
	u.SetExcluded(appcoin.FieldDisplayIndex)
	return u
}

// AddDisplayIndex adds v to the "display_index" field.
func (u *AppCoinUpsert) AddDisplayIndex(v uint32) *AppCoinUpsert {
	u.Add(appcoin.FieldDisplayIndex, v)
	return u
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (u *AppCoinUpsert) ClearDisplayIndex() *AppCoinUpsert {
	u.SetNull(appcoin.FieldDisplayIndex)
	return u
}

// SetMaxAmountPerWithdraw sets the "max_amount_per_withdraw" field.
func (u *AppCoinUpsert) SetMaxAmountPerWithdraw(v decimal.Decimal) *AppCoinUpsert {
	u.Set(appcoin.FieldMaxAmountPerWithdraw, v)
	return u
}

// UpdateMaxAmountPerWithdraw sets the "max_amount_per_withdraw" field to the value that was provided on create.
func (u *AppCoinUpsert) UpdateMaxAmountPerWithdraw() *AppCoinUpsert {
	u.SetExcluded(appcoin.FieldMaxAmountPerWithdraw)
	return u
}

// ClearMaxAmountPerWithdraw clears the value of the "max_amount_per_withdraw" field.
func (u *AppCoinUpsert) ClearMaxAmountPerWithdraw() *AppCoinUpsert {
	u.SetNull(appcoin.FieldMaxAmountPerWithdraw)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppCoin.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appcoin.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppCoinUpsertOne) UpdateNewValues() *AppCoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appcoin.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppCoin.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppCoinUpsertOne) Ignore() *AppCoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppCoinUpsertOne) DoNothing() *AppCoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppCoinCreate.OnConflict
// documentation for more info.
func (u *AppCoinUpsertOne) Update(set func(*AppCoinUpsert)) *AppCoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppCoinUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppCoinUpsertOne) SetCreatedAt(v uint32) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppCoinUpsertOne) AddCreatedAt(v uint32) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppCoinUpsertOne) UpdateCreatedAt() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppCoinUpsertOne) SetUpdatedAt(v uint32) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppCoinUpsertOne) AddUpdatedAt(v uint32) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppCoinUpsertOne) UpdateUpdatedAt() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppCoinUpsertOne) SetDeletedAt(v uint32) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppCoinUpsertOne) AddDeletedAt(v uint32) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppCoinUpsertOne) UpdateDeletedAt() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppCoinUpsertOne) SetEntID(v uuid.UUID) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppCoinUpsertOne) UpdateEntID() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppCoinUpsertOne) SetAppID(v uuid.UUID) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppCoinUpsertOne) UpdateAppID() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppCoinUpsertOne) ClearAppID() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearAppID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *AppCoinUpsertOne) SetCoinTypeID(v uuid.UUID) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *AppCoinUpsertOne) UpdateCoinTypeID() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *AppCoinUpsertOne) ClearCoinTypeID() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetName sets the "name" field.
func (u *AppCoinUpsertOne) SetName(v string) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppCoinUpsertOne) UpdateName() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AppCoinUpsertOne) ClearName() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearName()
	})
}

// SetDisplayNames sets the "display_names" field.
func (u *AppCoinUpsertOne) SetDisplayNames(v []string) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetDisplayNames(v)
	})
}

// UpdateDisplayNames sets the "display_names" field to the value that was provided on create.
func (u *AppCoinUpsertOne) UpdateDisplayNames() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateDisplayNames()
	})
}

// ClearDisplayNames clears the value of the "display_names" field.
func (u *AppCoinUpsertOne) ClearDisplayNames() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearDisplayNames()
	})
}

// SetLogo sets the "logo" field.
func (u *AppCoinUpsertOne) SetLogo(v string) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *AppCoinUpsertOne) UpdateLogo() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *AppCoinUpsertOne) ClearLogo() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearLogo()
	})
}

// SetForPay sets the "for_pay" field.
func (u *AppCoinUpsertOne) SetForPay(v bool) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetForPay(v)
	})
}

// UpdateForPay sets the "for_pay" field to the value that was provided on create.
func (u *AppCoinUpsertOne) UpdateForPay() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateForPay()
	})
}

// ClearForPay clears the value of the "for_pay" field.
func (u *AppCoinUpsertOne) ClearForPay() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearForPay()
	})
}

// SetWithdrawAutoReviewAmount sets the "withdraw_auto_review_amount" field.
func (u *AppCoinUpsertOne) SetWithdrawAutoReviewAmount(v decimal.Decimal) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetWithdrawAutoReviewAmount(v)
	})
}

// UpdateWithdrawAutoReviewAmount sets the "withdraw_auto_review_amount" field to the value that was provided on create.
func (u *AppCoinUpsertOne) UpdateWithdrawAutoReviewAmount() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateWithdrawAutoReviewAmount()
	})
}

// ClearWithdrawAutoReviewAmount clears the value of the "withdraw_auto_review_amount" field.
func (u *AppCoinUpsertOne) ClearWithdrawAutoReviewAmount() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearWithdrawAutoReviewAmount()
	})
}

// SetProductPage sets the "product_page" field.
func (u *AppCoinUpsertOne) SetProductPage(v string) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetProductPage(v)
	})
}

// UpdateProductPage sets the "product_page" field to the value that was provided on create.
func (u *AppCoinUpsertOne) UpdateProductPage() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateProductPage()
	})
}

// ClearProductPage clears the value of the "product_page" field.
func (u *AppCoinUpsertOne) ClearProductPage() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearProductPage()
	})
}

// SetDisabled sets the "disabled" field.
func (u *AppCoinUpsertOne) SetDisabled(v bool) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *AppCoinUpsertOne) UpdateDisabled() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateDisabled()
	})
}

// ClearDisabled clears the value of the "disabled" field.
func (u *AppCoinUpsertOne) ClearDisabled() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearDisabled()
	})
}

// SetDailyRewardAmount sets the "daily_reward_amount" field.
func (u *AppCoinUpsertOne) SetDailyRewardAmount(v decimal.Decimal) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetDailyRewardAmount(v)
	})
}

// UpdateDailyRewardAmount sets the "daily_reward_amount" field to the value that was provided on create.
func (u *AppCoinUpsertOne) UpdateDailyRewardAmount() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateDailyRewardAmount()
	})
}

// ClearDailyRewardAmount clears the value of the "daily_reward_amount" field.
func (u *AppCoinUpsertOne) ClearDailyRewardAmount() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearDailyRewardAmount()
	})
}

// SetDisplay sets the "display" field.
func (u *AppCoinUpsertOne) SetDisplay(v bool) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetDisplay(v)
	})
}

// UpdateDisplay sets the "display" field to the value that was provided on create.
func (u *AppCoinUpsertOne) UpdateDisplay() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateDisplay()
	})
}

// ClearDisplay clears the value of the "display" field.
func (u *AppCoinUpsertOne) ClearDisplay() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearDisplay()
	})
}

// SetDisplayIndex sets the "display_index" field.
func (u *AppCoinUpsertOne) SetDisplayIndex(v uint32) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetDisplayIndex(v)
	})
}

// AddDisplayIndex adds v to the "display_index" field.
func (u *AppCoinUpsertOne) AddDisplayIndex(v uint32) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.AddDisplayIndex(v)
	})
}

// UpdateDisplayIndex sets the "display_index" field to the value that was provided on create.
func (u *AppCoinUpsertOne) UpdateDisplayIndex() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateDisplayIndex()
	})
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (u *AppCoinUpsertOne) ClearDisplayIndex() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearDisplayIndex()
	})
}

// SetMaxAmountPerWithdraw sets the "max_amount_per_withdraw" field.
func (u *AppCoinUpsertOne) SetMaxAmountPerWithdraw(v decimal.Decimal) *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetMaxAmountPerWithdraw(v)
	})
}

// UpdateMaxAmountPerWithdraw sets the "max_amount_per_withdraw" field to the value that was provided on create.
func (u *AppCoinUpsertOne) UpdateMaxAmountPerWithdraw() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateMaxAmountPerWithdraw()
	})
}

// ClearMaxAmountPerWithdraw clears the value of the "max_amount_per_withdraw" field.
func (u *AppCoinUpsertOne) ClearMaxAmountPerWithdraw() *AppCoinUpsertOne {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearMaxAmountPerWithdraw()
	})
}

// Exec executes the query.
func (u *AppCoinUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppCoinCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppCoinUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppCoinUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppCoinUpsertOne.ID is not supported by MySQL driver. Use AppCoinUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppCoinUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppCoinCreateBulk is the builder for creating many AppCoin entities in bulk.
type AppCoinCreateBulk struct {
	config
	builders []*AppCoinCreate
	conflict []sql.ConflictOption
}

// Save creates the AppCoin entities in the database.
func (accb *AppCoinCreateBulk) Save(ctx context.Context) ([]*AppCoin, error) {
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AppCoin, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppCoinMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = accb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AppCoinCreateBulk) SaveX(ctx context.Context) []*AppCoin {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AppCoinCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AppCoinCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppCoin.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppCoinUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (accb *AppCoinCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppCoinUpsertBulk {
	accb.conflict = opts
	return &AppCoinUpsertBulk{
		create: accb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppCoin.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (accb *AppCoinCreateBulk) OnConflictColumns(columns ...string) *AppCoinUpsertBulk {
	accb.conflict = append(accb.conflict, sql.ConflictColumns(columns...))
	return &AppCoinUpsertBulk{
		create: accb,
	}
}

// AppCoinUpsertBulk is the builder for "upsert"-ing
// a bulk of AppCoin nodes.
type AppCoinUpsertBulk struct {
	create *AppCoinCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppCoin.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appcoin.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppCoinUpsertBulk) UpdateNewValues() *AppCoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appcoin.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppCoin.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppCoinUpsertBulk) Ignore() *AppCoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppCoinUpsertBulk) DoNothing() *AppCoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppCoinCreateBulk.OnConflict
// documentation for more info.
func (u *AppCoinUpsertBulk) Update(set func(*AppCoinUpsert)) *AppCoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppCoinUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppCoinUpsertBulk) SetCreatedAt(v uint32) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppCoinUpsertBulk) AddCreatedAt(v uint32) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppCoinUpsertBulk) UpdateCreatedAt() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppCoinUpsertBulk) SetUpdatedAt(v uint32) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppCoinUpsertBulk) AddUpdatedAt(v uint32) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppCoinUpsertBulk) UpdateUpdatedAt() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppCoinUpsertBulk) SetDeletedAt(v uint32) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppCoinUpsertBulk) AddDeletedAt(v uint32) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppCoinUpsertBulk) UpdateDeletedAt() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppCoinUpsertBulk) SetEntID(v uuid.UUID) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppCoinUpsertBulk) UpdateEntID() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppCoinUpsertBulk) SetAppID(v uuid.UUID) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppCoinUpsertBulk) UpdateAppID() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppCoinUpsertBulk) ClearAppID() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearAppID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *AppCoinUpsertBulk) SetCoinTypeID(v uuid.UUID) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *AppCoinUpsertBulk) UpdateCoinTypeID() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *AppCoinUpsertBulk) ClearCoinTypeID() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetName sets the "name" field.
func (u *AppCoinUpsertBulk) SetName(v string) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppCoinUpsertBulk) UpdateName() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AppCoinUpsertBulk) ClearName() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearName()
	})
}

// SetDisplayNames sets the "display_names" field.
func (u *AppCoinUpsertBulk) SetDisplayNames(v []string) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetDisplayNames(v)
	})
}

// UpdateDisplayNames sets the "display_names" field to the value that was provided on create.
func (u *AppCoinUpsertBulk) UpdateDisplayNames() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateDisplayNames()
	})
}

// ClearDisplayNames clears the value of the "display_names" field.
func (u *AppCoinUpsertBulk) ClearDisplayNames() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearDisplayNames()
	})
}

// SetLogo sets the "logo" field.
func (u *AppCoinUpsertBulk) SetLogo(v string) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *AppCoinUpsertBulk) UpdateLogo() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *AppCoinUpsertBulk) ClearLogo() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearLogo()
	})
}

// SetForPay sets the "for_pay" field.
func (u *AppCoinUpsertBulk) SetForPay(v bool) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetForPay(v)
	})
}

// UpdateForPay sets the "for_pay" field to the value that was provided on create.
func (u *AppCoinUpsertBulk) UpdateForPay() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateForPay()
	})
}

// ClearForPay clears the value of the "for_pay" field.
func (u *AppCoinUpsertBulk) ClearForPay() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearForPay()
	})
}

// SetWithdrawAutoReviewAmount sets the "withdraw_auto_review_amount" field.
func (u *AppCoinUpsertBulk) SetWithdrawAutoReviewAmount(v decimal.Decimal) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetWithdrawAutoReviewAmount(v)
	})
}

// UpdateWithdrawAutoReviewAmount sets the "withdraw_auto_review_amount" field to the value that was provided on create.
func (u *AppCoinUpsertBulk) UpdateWithdrawAutoReviewAmount() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateWithdrawAutoReviewAmount()
	})
}

// ClearWithdrawAutoReviewAmount clears the value of the "withdraw_auto_review_amount" field.
func (u *AppCoinUpsertBulk) ClearWithdrawAutoReviewAmount() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearWithdrawAutoReviewAmount()
	})
}

// SetProductPage sets the "product_page" field.
func (u *AppCoinUpsertBulk) SetProductPage(v string) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetProductPage(v)
	})
}

// UpdateProductPage sets the "product_page" field to the value that was provided on create.
func (u *AppCoinUpsertBulk) UpdateProductPage() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateProductPage()
	})
}

// ClearProductPage clears the value of the "product_page" field.
func (u *AppCoinUpsertBulk) ClearProductPage() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearProductPage()
	})
}

// SetDisabled sets the "disabled" field.
func (u *AppCoinUpsertBulk) SetDisabled(v bool) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *AppCoinUpsertBulk) UpdateDisabled() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateDisabled()
	})
}

// ClearDisabled clears the value of the "disabled" field.
func (u *AppCoinUpsertBulk) ClearDisabled() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearDisabled()
	})
}

// SetDailyRewardAmount sets the "daily_reward_amount" field.
func (u *AppCoinUpsertBulk) SetDailyRewardAmount(v decimal.Decimal) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetDailyRewardAmount(v)
	})
}

// UpdateDailyRewardAmount sets the "daily_reward_amount" field to the value that was provided on create.
func (u *AppCoinUpsertBulk) UpdateDailyRewardAmount() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateDailyRewardAmount()
	})
}

// ClearDailyRewardAmount clears the value of the "daily_reward_amount" field.
func (u *AppCoinUpsertBulk) ClearDailyRewardAmount() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearDailyRewardAmount()
	})
}

// SetDisplay sets the "display" field.
func (u *AppCoinUpsertBulk) SetDisplay(v bool) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetDisplay(v)
	})
}

// UpdateDisplay sets the "display" field to the value that was provided on create.
func (u *AppCoinUpsertBulk) UpdateDisplay() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateDisplay()
	})
}

// ClearDisplay clears the value of the "display" field.
func (u *AppCoinUpsertBulk) ClearDisplay() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearDisplay()
	})
}

// SetDisplayIndex sets the "display_index" field.
func (u *AppCoinUpsertBulk) SetDisplayIndex(v uint32) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetDisplayIndex(v)
	})
}

// AddDisplayIndex adds v to the "display_index" field.
func (u *AppCoinUpsertBulk) AddDisplayIndex(v uint32) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.AddDisplayIndex(v)
	})
}

// UpdateDisplayIndex sets the "display_index" field to the value that was provided on create.
func (u *AppCoinUpsertBulk) UpdateDisplayIndex() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateDisplayIndex()
	})
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (u *AppCoinUpsertBulk) ClearDisplayIndex() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearDisplayIndex()
	})
}

// SetMaxAmountPerWithdraw sets the "max_amount_per_withdraw" field.
func (u *AppCoinUpsertBulk) SetMaxAmountPerWithdraw(v decimal.Decimal) *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.SetMaxAmountPerWithdraw(v)
	})
}

// UpdateMaxAmountPerWithdraw sets the "max_amount_per_withdraw" field to the value that was provided on create.
func (u *AppCoinUpsertBulk) UpdateMaxAmountPerWithdraw() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.UpdateMaxAmountPerWithdraw()
	})
}

// ClearMaxAmountPerWithdraw clears the value of the "max_amount_per_withdraw" field.
func (u *AppCoinUpsertBulk) ClearMaxAmountPerWithdraw() *AppCoinUpsertBulk {
	return u.Update(func(s *AppCoinUpsert) {
		s.ClearMaxAmountPerWithdraw()
	})
}

// Exec executes the query.
func (u *AppCoinUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppCoinCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppCoinCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppCoinUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
