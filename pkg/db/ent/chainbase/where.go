// Code generated by ent, DO NOT EDIT.

package chainbase

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Logo applies equality check predicate on the "logo" field. It's identical to LogoEQ.
func Logo(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogo), v))
	})
}

// NativeUnit applies equality check predicate on the "native_unit" field. It's identical to NativeUnitEQ.
func NativeUnit(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNativeUnit), v))
	})
}

// AtomicUnit applies equality check predicate on the "atomic_unit" field. It's identical to AtomicUnitEQ.
func AtomicUnit(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAtomicUnit), v))
	})
}

// UnitExp applies equality check predicate on the "unit_exp" field. It's identical to UnitExpEQ.
func UnitExp(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitExp), v))
	})
}

// Env applies equality check predicate on the "env" field. It's identical to EnvEQ.
func Env(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnv), v))
	})
}

// ChainID applies equality check predicate on the "chain_id" field. It's identical to ChainIDEQ.
func ChainID(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainID), v))
	})
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNickname), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// LogoEQ applies the EQ predicate on the "logo" field.
func LogoEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogo), v))
	})
}

// LogoNEQ applies the NEQ predicate on the "logo" field.
func LogoNEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLogo), v))
	})
}

// LogoIn applies the In predicate on the "logo" field.
func LogoIn(vs ...string) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLogo), v...))
	})
}

// LogoNotIn applies the NotIn predicate on the "logo" field.
func LogoNotIn(vs ...string) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLogo), v...))
	})
}

// LogoGT applies the GT predicate on the "logo" field.
func LogoGT(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLogo), v))
	})
}

// LogoGTE applies the GTE predicate on the "logo" field.
func LogoGTE(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLogo), v))
	})
}

// LogoLT applies the LT predicate on the "logo" field.
func LogoLT(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLogo), v))
	})
}

// LogoLTE applies the LTE predicate on the "logo" field.
func LogoLTE(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLogo), v))
	})
}

// LogoContains applies the Contains predicate on the "logo" field.
func LogoContains(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLogo), v))
	})
}

// LogoHasPrefix applies the HasPrefix predicate on the "logo" field.
func LogoHasPrefix(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLogo), v))
	})
}

// LogoHasSuffix applies the HasSuffix predicate on the "logo" field.
func LogoHasSuffix(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLogo), v))
	})
}

// LogoIsNil applies the IsNil predicate on the "logo" field.
func LogoIsNil() predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLogo)))
	})
}

// LogoNotNil applies the NotNil predicate on the "logo" field.
func LogoNotNil() predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLogo)))
	})
}

// LogoEqualFold applies the EqualFold predicate on the "logo" field.
func LogoEqualFold(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLogo), v))
	})
}

// LogoContainsFold applies the ContainsFold predicate on the "logo" field.
func LogoContainsFold(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLogo), v))
	})
}

// NativeUnitEQ applies the EQ predicate on the "native_unit" field.
func NativeUnitEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNativeUnit), v))
	})
}

// NativeUnitNEQ applies the NEQ predicate on the "native_unit" field.
func NativeUnitNEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNativeUnit), v))
	})
}

// NativeUnitIn applies the In predicate on the "native_unit" field.
func NativeUnitIn(vs ...string) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNativeUnit), v...))
	})
}

// NativeUnitNotIn applies the NotIn predicate on the "native_unit" field.
func NativeUnitNotIn(vs ...string) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNativeUnit), v...))
	})
}

// NativeUnitGT applies the GT predicate on the "native_unit" field.
func NativeUnitGT(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNativeUnit), v))
	})
}

// NativeUnitGTE applies the GTE predicate on the "native_unit" field.
func NativeUnitGTE(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNativeUnit), v))
	})
}

// NativeUnitLT applies the LT predicate on the "native_unit" field.
func NativeUnitLT(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNativeUnit), v))
	})
}

// NativeUnitLTE applies the LTE predicate on the "native_unit" field.
func NativeUnitLTE(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNativeUnit), v))
	})
}

// NativeUnitContains applies the Contains predicate on the "native_unit" field.
func NativeUnitContains(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNativeUnit), v))
	})
}

// NativeUnitHasPrefix applies the HasPrefix predicate on the "native_unit" field.
func NativeUnitHasPrefix(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNativeUnit), v))
	})
}

// NativeUnitHasSuffix applies the HasSuffix predicate on the "native_unit" field.
func NativeUnitHasSuffix(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNativeUnit), v))
	})
}

// NativeUnitIsNil applies the IsNil predicate on the "native_unit" field.
func NativeUnitIsNil() predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNativeUnit)))
	})
}

// NativeUnitNotNil applies the NotNil predicate on the "native_unit" field.
func NativeUnitNotNil() predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNativeUnit)))
	})
}

// NativeUnitEqualFold applies the EqualFold predicate on the "native_unit" field.
func NativeUnitEqualFold(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNativeUnit), v))
	})
}

// NativeUnitContainsFold applies the ContainsFold predicate on the "native_unit" field.
func NativeUnitContainsFold(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNativeUnit), v))
	})
}

// AtomicUnitEQ applies the EQ predicate on the "atomic_unit" field.
func AtomicUnitEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAtomicUnit), v))
	})
}

// AtomicUnitNEQ applies the NEQ predicate on the "atomic_unit" field.
func AtomicUnitNEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAtomicUnit), v))
	})
}

// AtomicUnitIn applies the In predicate on the "atomic_unit" field.
func AtomicUnitIn(vs ...string) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAtomicUnit), v...))
	})
}

// AtomicUnitNotIn applies the NotIn predicate on the "atomic_unit" field.
func AtomicUnitNotIn(vs ...string) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAtomicUnit), v...))
	})
}

// AtomicUnitGT applies the GT predicate on the "atomic_unit" field.
func AtomicUnitGT(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAtomicUnit), v))
	})
}

// AtomicUnitGTE applies the GTE predicate on the "atomic_unit" field.
func AtomicUnitGTE(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAtomicUnit), v))
	})
}

// AtomicUnitLT applies the LT predicate on the "atomic_unit" field.
func AtomicUnitLT(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAtomicUnit), v))
	})
}

// AtomicUnitLTE applies the LTE predicate on the "atomic_unit" field.
func AtomicUnitLTE(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAtomicUnit), v))
	})
}

// AtomicUnitContains applies the Contains predicate on the "atomic_unit" field.
func AtomicUnitContains(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAtomicUnit), v))
	})
}

// AtomicUnitHasPrefix applies the HasPrefix predicate on the "atomic_unit" field.
func AtomicUnitHasPrefix(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAtomicUnit), v))
	})
}

// AtomicUnitHasSuffix applies the HasSuffix predicate on the "atomic_unit" field.
func AtomicUnitHasSuffix(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAtomicUnit), v))
	})
}

// AtomicUnitIsNil applies the IsNil predicate on the "atomic_unit" field.
func AtomicUnitIsNil() predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAtomicUnit)))
	})
}

// AtomicUnitNotNil applies the NotNil predicate on the "atomic_unit" field.
func AtomicUnitNotNil() predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAtomicUnit)))
	})
}

// AtomicUnitEqualFold applies the EqualFold predicate on the "atomic_unit" field.
func AtomicUnitEqualFold(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAtomicUnit), v))
	})
}

// AtomicUnitContainsFold applies the ContainsFold predicate on the "atomic_unit" field.
func AtomicUnitContainsFold(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAtomicUnit), v))
	})
}

// UnitExpEQ applies the EQ predicate on the "unit_exp" field.
func UnitExpEQ(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitExp), v))
	})
}

// UnitExpNEQ applies the NEQ predicate on the "unit_exp" field.
func UnitExpNEQ(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitExp), v))
	})
}

// UnitExpIn applies the In predicate on the "unit_exp" field.
func UnitExpIn(vs ...uint32) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnitExp), v...))
	})
}

// UnitExpNotIn applies the NotIn predicate on the "unit_exp" field.
func UnitExpNotIn(vs ...uint32) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnitExp), v...))
	})
}

// UnitExpGT applies the GT predicate on the "unit_exp" field.
func UnitExpGT(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitExp), v))
	})
}

// UnitExpGTE applies the GTE predicate on the "unit_exp" field.
func UnitExpGTE(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitExp), v))
	})
}

// UnitExpLT applies the LT predicate on the "unit_exp" field.
func UnitExpLT(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitExp), v))
	})
}

// UnitExpLTE applies the LTE predicate on the "unit_exp" field.
func UnitExpLTE(v uint32) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitExp), v))
	})
}

// UnitExpIsNil applies the IsNil predicate on the "unit_exp" field.
func UnitExpIsNil() predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitExp)))
	})
}

// UnitExpNotNil applies the NotNil predicate on the "unit_exp" field.
func UnitExpNotNil() predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitExp)))
	})
}

// EnvEQ applies the EQ predicate on the "env" field.
func EnvEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnv), v))
	})
}

// EnvNEQ applies the NEQ predicate on the "env" field.
func EnvNEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnv), v))
	})
}

// EnvIn applies the In predicate on the "env" field.
func EnvIn(vs ...string) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEnv), v...))
	})
}

// EnvNotIn applies the NotIn predicate on the "env" field.
func EnvNotIn(vs ...string) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEnv), v...))
	})
}

// EnvGT applies the GT predicate on the "env" field.
func EnvGT(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEnv), v))
	})
}

// EnvGTE applies the GTE predicate on the "env" field.
func EnvGTE(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEnv), v))
	})
}

// EnvLT applies the LT predicate on the "env" field.
func EnvLT(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEnv), v))
	})
}

// EnvLTE applies the LTE predicate on the "env" field.
func EnvLTE(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEnv), v))
	})
}

// EnvContains applies the Contains predicate on the "env" field.
func EnvContains(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEnv), v))
	})
}

// EnvHasPrefix applies the HasPrefix predicate on the "env" field.
func EnvHasPrefix(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEnv), v))
	})
}

// EnvHasSuffix applies the HasSuffix predicate on the "env" field.
func EnvHasSuffix(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEnv), v))
	})
}

// EnvIsNil applies the IsNil predicate on the "env" field.
func EnvIsNil() predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEnv)))
	})
}

// EnvNotNil applies the NotNil predicate on the "env" field.
func EnvNotNil() predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEnv)))
	})
}

// EnvEqualFold applies the EqualFold predicate on the "env" field.
func EnvEqualFold(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEnv), v))
	})
}

// EnvContainsFold applies the ContainsFold predicate on the "env" field.
func EnvContainsFold(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEnv), v))
	})
}

// ChainIDEQ applies the EQ predicate on the "chain_id" field.
func ChainIDEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainID), v))
	})
}

// ChainIDNEQ applies the NEQ predicate on the "chain_id" field.
func ChainIDNEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChainID), v))
	})
}

// ChainIDIn applies the In predicate on the "chain_id" field.
func ChainIDIn(vs ...string) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChainID), v...))
	})
}

// ChainIDNotIn applies the NotIn predicate on the "chain_id" field.
func ChainIDNotIn(vs ...string) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChainID), v...))
	})
}

// ChainIDGT applies the GT predicate on the "chain_id" field.
func ChainIDGT(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChainID), v))
	})
}

// ChainIDGTE applies the GTE predicate on the "chain_id" field.
func ChainIDGTE(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChainID), v))
	})
}

// ChainIDLT applies the LT predicate on the "chain_id" field.
func ChainIDLT(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChainID), v))
	})
}

// ChainIDLTE applies the LTE predicate on the "chain_id" field.
func ChainIDLTE(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChainID), v))
	})
}

// ChainIDContains applies the Contains predicate on the "chain_id" field.
func ChainIDContains(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChainID), v))
	})
}

// ChainIDHasPrefix applies the HasPrefix predicate on the "chain_id" field.
func ChainIDHasPrefix(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChainID), v))
	})
}

// ChainIDHasSuffix applies the HasSuffix predicate on the "chain_id" field.
func ChainIDHasSuffix(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChainID), v))
	})
}

// ChainIDIsNil applies the IsNil predicate on the "chain_id" field.
func ChainIDIsNil() predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChainID)))
	})
}

// ChainIDNotNil applies the NotNil predicate on the "chain_id" field.
func ChainIDNotNil() predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChainID)))
	})
}

// ChainIDEqualFold applies the EqualFold predicate on the "chain_id" field.
func ChainIDEqualFold(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChainID), v))
	})
}

// ChainIDContainsFold applies the ContainsFold predicate on the "chain_id" field.
func ChainIDContainsFold(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChainID), v))
	})
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNickname), v))
	})
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNickname), v))
	})
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNickname), v...))
	})
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.ChainBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNickname), v...))
	})
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNickname), v))
	})
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNickname), v))
	})
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNickname), v))
	})
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNickname), v))
	})
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNickname), v))
	})
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNickname), v))
	})
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNickname), v))
	})
}

// NicknameIsNil applies the IsNil predicate on the "nickname" field.
func NicknameIsNil() predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNickname)))
	})
}

// NicknameNotNil applies the NotNil predicate on the "nickname" field.
func NicknameNotNil() predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNickname)))
	})
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNickname), v))
	})
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNickname), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChainBase) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChainBase) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChainBase) predicate.ChainBase {
	return predicate.ChainBase(func(s *sql.Selector) {
		p(s.Not())
	})
}
