// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/coinusedfor"
	"github.com/google/uuid"
)

// CoinUsedForCreate is the builder for creating a CoinUsedFor entity.
type CoinUsedForCreate struct {
	config
	mutation *CoinUsedForMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cufc *CoinUsedForCreate) SetCreatedAt(u uint32) *CoinUsedForCreate {
	cufc.mutation.SetCreatedAt(u)
	return cufc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cufc *CoinUsedForCreate) SetNillableCreatedAt(u *uint32) *CoinUsedForCreate {
	if u != nil {
		cufc.SetCreatedAt(*u)
	}
	return cufc
}

// SetUpdatedAt sets the "updated_at" field.
func (cufc *CoinUsedForCreate) SetUpdatedAt(u uint32) *CoinUsedForCreate {
	cufc.mutation.SetUpdatedAt(u)
	return cufc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cufc *CoinUsedForCreate) SetNillableUpdatedAt(u *uint32) *CoinUsedForCreate {
	if u != nil {
		cufc.SetUpdatedAt(*u)
	}
	return cufc
}

// SetDeletedAt sets the "deleted_at" field.
func (cufc *CoinUsedForCreate) SetDeletedAt(u uint32) *CoinUsedForCreate {
	cufc.mutation.SetDeletedAt(u)
	return cufc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cufc *CoinUsedForCreate) SetNillableDeletedAt(u *uint32) *CoinUsedForCreate {
	if u != nil {
		cufc.SetDeletedAt(*u)
	}
	return cufc
}

// SetEntID sets the "ent_id" field.
func (cufc *CoinUsedForCreate) SetEntID(u uuid.UUID) *CoinUsedForCreate {
	cufc.mutation.SetEntID(u)
	return cufc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cufc *CoinUsedForCreate) SetNillableEntID(u *uuid.UUID) *CoinUsedForCreate {
	if u != nil {
		cufc.SetEntID(*u)
	}
	return cufc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cufc *CoinUsedForCreate) SetCoinTypeID(u uuid.UUID) *CoinUsedForCreate {
	cufc.mutation.SetCoinTypeID(u)
	return cufc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (cufc *CoinUsedForCreate) SetNillableCoinTypeID(u *uuid.UUID) *CoinUsedForCreate {
	if u != nil {
		cufc.SetCoinTypeID(*u)
	}
	return cufc
}

// SetUsedFor sets the "used_for" field.
func (cufc *CoinUsedForCreate) SetUsedFor(s string) *CoinUsedForCreate {
	cufc.mutation.SetUsedFor(s)
	return cufc
}

// SetNillableUsedFor sets the "used_for" field if the given value is not nil.
func (cufc *CoinUsedForCreate) SetNillableUsedFor(s *string) *CoinUsedForCreate {
	if s != nil {
		cufc.SetUsedFor(*s)
	}
	return cufc
}

// SetPriority sets the "priority" field.
func (cufc *CoinUsedForCreate) SetPriority(u uint32) *CoinUsedForCreate {
	cufc.mutation.SetPriority(u)
	return cufc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (cufc *CoinUsedForCreate) SetNillablePriority(u *uint32) *CoinUsedForCreate {
	if u != nil {
		cufc.SetPriority(*u)
	}
	return cufc
}

// SetID sets the "id" field.
func (cufc *CoinUsedForCreate) SetID(u uint32) *CoinUsedForCreate {
	cufc.mutation.SetID(u)
	return cufc
}

// Mutation returns the CoinUsedForMutation object of the builder.
func (cufc *CoinUsedForCreate) Mutation() *CoinUsedForMutation {
	return cufc.mutation
}

// Save creates the CoinUsedFor in the database.
func (cufc *CoinUsedForCreate) Save(ctx context.Context) (*CoinUsedFor, error) {
	var (
		err  error
		node *CoinUsedFor
	)
	if err := cufc.defaults(); err != nil {
		return nil, err
	}
	if len(cufc.hooks) == 0 {
		if err = cufc.check(); err != nil {
			return nil, err
		}
		node, err = cufc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinUsedForMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cufc.check(); err != nil {
				return nil, err
			}
			cufc.mutation = mutation
			if node, err = cufc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cufc.hooks) - 1; i >= 0; i-- {
			if cufc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cufc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cufc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CoinUsedFor)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CoinUsedForMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cufc *CoinUsedForCreate) SaveX(ctx context.Context) *CoinUsedFor {
	v, err := cufc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cufc *CoinUsedForCreate) Exec(ctx context.Context) error {
	_, err := cufc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cufc *CoinUsedForCreate) ExecX(ctx context.Context) {
	if err := cufc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cufc *CoinUsedForCreate) defaults() error {
	if _, ok := cufc.mutation.CreatedAt(); !ok {
		if coinusedfor.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized coinusedfor.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := coinusedfor.DefaultCreatedAt()
		cufc.mutation.SetCreatedAt(v)
	}
	if _, ok := cufc.mutation.UpdatedAt(); !ok {
		if coinusedfor.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coinusedfor.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coinusedfor.DefaultUpdatedAt()
		cufc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cufc.mutation.DeletedAt(); !ok {
		if coinusedfor.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized coinusedfor.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := coinusedfor.DefaultDeletedAt()
		cufc.mutation.SetDeletedAt(v)
	}
	if _, ok := cufc.mutation.EntID(); !ok {
		if coinusedfor.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized coinusedfor.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := coinusedfor.DefaultEntID()
		cufc.mutation.SetEntID(v)
	}
	if _, ok := cufc.mutation.CoinTypeID(); !ok {
		if coinusedfor.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized coinusedfor.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := coinusedfor.DefaultCoinTypeID()
		cufc.mutation.SetCoinTypeID(v)
	}
	if _, ok := cufc.mutation.UsedFor(); !ok {
		v := coinusedfor.DefaultUsedFor
		cufc.mutation.SetUsedFor(v)
	}
	if _, ok := cufc.mutation.Priority(); !ok {
		v := coinusedfor.DefaultPriority
		cufc.mutation.SetPriority(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cufc *CoinUsedForCreate) check() error {
	if _, ok := cufc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CoinUsedFor.created_at"`)}
	}
	if _, ok := cufc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CoinUsedFor.updated_at"`)}
	}
	if _, ok := cufc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "CoinUsedFor.deleted_at"`)}
	}
	if _, ok := cufc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "CoinUsedFor.ent_id"`)}
	}
	return nil
}

func (cufc *CoinUsedForCreate) sqlSave(ctx context.Context) (*CoinUsedFor, error) {
	_node, _spec := cufc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cufc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (cufc *CoinUsedForCreate) createSpec() (*CoinUsedFor, *sqlgraph.CreateSpec) {
	var (
		_node = &CoinUsedFor{config: cufc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: coinusedfor.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: coinusedfor.FieldID,
			},
		}
	)
	_spec.OnConflict = cufc.conflict
	if id, ok := cufc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cufc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinusedfor.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cufc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinusedfor.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cufc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinusedfor.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := cufc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinusedfor.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := cufc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinusedfor.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := cufc.mutation.UsedFor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coinusedfor.FieldUsedFor,
		})
		_node.UsedFor = value
	}
	if value, ok := cufc.mutation.Priority(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinusedfor.FieldPriority,
		})
		_node.Priority = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinUsedFor.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinUsedForUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cufc *CoinUsedForCreate) OnConflict(opts ...sql.ConflictOption) *CoinUsedForUpsertOne {
	cufc.conflict = opts
	return &CoinUsedForUpsertOne{
		create: cufc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinUsedFor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cufc *CoinUsedForCreate) OnConflictColumns(columns ...string) *CoinUsedForUpsertOne {
	cufc.conflict = append(cufc.conflict, sql.ConflictColumns(columns...))
	return &CoinUsedForUpsertOne{
		create: cufc,
	}
}

type (
	// CoinUsedForUpsertOne is the builder for "upsert"-ing
	//  one CoinUsedFor node.
	CoinUsedForUpsertOne struct {
		create *CoinUsedForCreate
	}

	// CoinUsedForUpsert is the "OnConflict" setter.
	CoinUsedForUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CoinUsedForUpsert) SetCreatedAt(v uint32) *CoinUsedForUpsert {
	u.Set(coinusedfor.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CoinUsedForUpsert) UpdateCreatedAt() *CoinUsedForUpsert {
	u.SetExcluded(coinusedfor.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CoinUsedForUpsert) AddCreatedAt(v uint32) *CoinUsedForUpsert {
	u.Add(coinusedfor.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CoinUsedForUpsert) SetUpdatedAt(v uint32) *CoinUsedForUpsert {
	u.Set(coinusedfor.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CoinUsedForUpsert) UpdateUpdatedAt() *CoinUsedForUpsert {
	u.SetExcluded(coinusedfor.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CoinUsedForUpsert) AddUpdatedAt(v uint32) *CoinUsedForUpsert {
	u.Add(coinusedfor.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CoinUsedForUpsert) SetDeletedAt(v uint32) *CoinUsedForUpsert {
	u.Set(coinusedfor.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CoinUsedForUpsert) UpdateDeletedAt() *CoinUsedForUpsert {
	u.SetExcluded(coinusedfor.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CoinUsedForUpsert) AddDeletedAt(v uint32) *CoinUsedForUpsert {
	u.Add(coinusedfor.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *CoinUsedForUpsert) SetEntID(v uuid.UUID) *CoinUsedForUpsert {
	u.Set(coinusedfor.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CoinUsedForUpsert) UpdateEntID() *CoinUsedForUpsert {
	u.SetExcluded(coinusedfor.FieldEntID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinUsedForUpsert) SetCoinTypeID(v uuid.UUID) *CoinUsedForUpsert {
	u.Set(coinusedfor.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinUsedForUpsert) UpdateCoinTypeID() *CoinUsedForUpsert {
	u.SetExcluded(coinusedfor.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *CoinUsedForUpsert) ClearCoinTypeID() *CoinUsedForUpsert {
	u.SetNull(coinusedfor.FieldCoinTypeID)
	return u
}

// SetUsedFor sets the "used_for" field.
func (u *CoinUsedForUpsert) SetUsedFor(v string) *CoinUsedForUpsert {
	u.Set(coinusedfor.FieldUsedFor, v)
	return u
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *CoinUsedForUpsert) UpdateUsedFor() *CoinUsedForUpsert {
	u.SetExcluded(coinusedfor.FieldUsedFor)
	return u
}

// ClearUsedFor clears the value of the "used_for" field.
func (u *CoinUsedForUpsert) ClearUsedFor() *CoinUsedForUpsert {
	u.SetNull(coinusedfor.FieldUsedFor)
	return u
}

// SetPriority sets the "priority" field.
func (u *CoinUsedForUpsert) SetPriority(v uint32) *CoinUsedForUpsert {
	u.Set(coinusedfor.FieldPriority, v)
	return u
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *CoinUsedForUpsert) UpdatePriority() *CoinUsedForUpsert {
	u.SetExcluded(coinusedfor.FieldPriority)
	return u
}

// AddPriority adds v to the "priority" field.
func (u *CoinUsedForUpsert) AddPriority(v uint32) *CoinUsedForUpsert {
	u.Add(coinusedfor.FieldPriority, v)
	return u
}

// ClearPriority clears the value of the "priority" field.
func (u *CoinUsedForUpsert) ClearPriority() *CoinUsedForUpsert {
	u.SetNull(coinusedfor.FieldPriority)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CoinUsedFor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coinusedfor.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CoinUsedForUpsertOne) UpdateNewValues() *CoinUsedForUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(coinusedfor.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CoinUsedFor.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CoinUsedForUpsertOne) Ignore() *CoinUsedForUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinUsedForUpsertOne) DoNothing() *CoinUsedForUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinUsedForCreate.OnConflict
// documentation for more info.
func (u *CoinUsedForUpsertOne) Update(set func(*CoinUsedForUpsert)) *CoinUsedForUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinUsedForUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CoinUsedForUpsertOne) SetCreatedAt(v uint32) *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CoinUsedForUpsertOne) AddCreatedAt(v uint32) *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CoinUsedForUpsertOne) UpdateCreatedAt() *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CoinUsedForUpsertOne) SetUpdatedAt(v uint32) *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CoinUsedForUpsertOne) AddUpdatedAt(v uint32) *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CoinUsedForUpsertOne) UpdateUpdatedAt() *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CoinUsedForUpsertOne) SetDeletedAt(v uint32) *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CoinUsedForUpsertOne) AddDeletedAt(v uint32) *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CoinUsedForUpsertOne) UpdateDeletedAt() *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CoinUsedForUpsertOne) SetEntID(v uuid.UUID) *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CoinUsedForUpsertOne) UpdateEntID() *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.UpdateEntID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinUsedForUpsertOne) SetCoinTypeID(v uuid.UUID) *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinUsedForUpsertOne) UpdateCoinTypeID() *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *CoinUsedForUpsertOne) ClearCoinTypeID() *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetUsedFor sets the "used_for" field.
func (u *CoinUsedForUpsertOne) SetUsedFor(v string) *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.SetUsedFor(v)
	})
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *CoinUsedForUpsertOne) UpdateUsedFor() *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.UpdateUsedFor()
	})
}

// ClearUsedFor clears the value of the "used_for" field.
func (u *CoinUsedForUpsertOne) ClearUsedFor() *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.ClearUsedFor()
	})
}

// SetPriority sets the "priority" field.
func (u *CoinUsedForUpsertOne) SetPriority(v uint32) *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *CoinUsedForUpsertOne) AddPriority(v uint32) *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *CoinUsedForUpsertOne) UpdatePriority() *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.UpdatePriority()
	})
}

// ClearPriority clears the value of the "priority" field.
func (u *CoinUsedForUpsertOne) ClearPriority() *CoinUsedForUpsertOne {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.ClearPriority()
	})
}

// Exec executes the query.
func (u *CoinUsedForUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CoinUsedForCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinUsedForUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CoinUsedForUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CoinUsedForUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CoinUsedForCreateBulk is the builder for creating many CoinUsedFor entities in bulk.
type CoinUsedForCreateBulk struct {
	config
	builders []*CoinUsedForCreate
	conflict []sql.ConflictOption
}

// Save creates the CoinUsedFor entities in the database.
func (cufcb *CoinUsedForCreateBulk) Save(ctx context.Context) ([]*CoinUsedFor, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cufcb.builders))
	nodes := make([]*CoinUsedFor, len(cufcb.builders))
	mutators := make([]Mutator, len(cufcb.builders))
	for i := range cufcb.builders {
		func(i int, root context.Context) {
			builder := cufcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CoinUsedForMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cufcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cufcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cufcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cufcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cufcb *CoinUsedForCreateBulk) SaveX(ctx context.Context) []*CoinUsedFor {
	v, err := cufcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cufcb *CoinUsedForCreateBulk) Exec(ctx context.Context) error {
	_, err := cufcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cufcb *CoinUsedForCreateBulk) ExecX(ctx context.Context) {
	if err := cufcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinUsedFor.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinUsedForUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cufcb *CoinUsedForCreateBulk) OnConflict(opts ...sql.ConflictOption) *CoinUsedForUpsertBulk {
	cufcb.conflict = opts
	return &CoinUsedForUpsertBulk{
		create: cufcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinUsedFor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cufcb *CoinUsedForCreateBulk) OnConflictColumns(columns ...string) *CoinUsedForUpsertBulk {
	cufcb.conflict = append(cufcb.conflict, sql.ConflictColumns(columns...))
	return &CoinUsedForUpsertBulk{
		create: cufcb,
	}
}

// CoinUsedForUpsertBulk is the builder for "upsert"-ing
// a bulk of CoinUsedFor nodes.
type CoinUsedForUpsertBulk struct {
	create *CoinUsedForCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CoinUsedFor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coinusedfor.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CoinUsedForUpsertBulk) UpdateNewValues() *CoinUsedForUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(coinusedfor.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CoinUsedFor.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CoinUsedForUpsertBulk) Ignore() *CoinUsedForUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinUsedForUpsertBulk) DoNothing() *CoinUsedForUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinUsedForCreateBulk.OnConflict
// documentation for more info.
func (u *CoinUsedForUpsertBulk) Update(set func(*CoinUsedForUpsert)) *CoinUsedForUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinUsedForUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CoinUsedForUpsertBulk) SetCreatedAt(v uint32) *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CoinUsedForUpsertBulk) AddCreatedAt(v uint32) *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CoinUsedForUpsertBulk) UpdateCreatedAt() *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CoinUsedForUpsertBulk) SetUpdatedAt(v uint32) *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CoinUsedForUpsertBulk) AddUpdatedAt(v uint32) *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CoinUsedForUpsertBulk) UpdateUpdatedAt() *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CoinUsedForUpsertBulk) SetDeletedAt(v uint32) *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CoinUsedForUpsertBulk) AddDeletedAt(v uint32) *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CoinUsedForUpsertBulk) UpdateDeletedAt() *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CoinUsedForUpsertBulk) SetEntID(v uuid.UUID) *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CoinUsedForUpsertBulk) UpdateEntID() *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.UpdateEntID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinUsedForUpsertBulk) SetCoinTypeID(v uuid.UUID) *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinUsedForUpsertBulk) UpdateCoinTypeID() *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *CoinUsedForUpsertBulk) ClearCoinTypeID() *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetUsedFor sets the "used_for" field.
func (u *CoinUsedForUpsertBulk) SetUsedFor(v string) *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.SetUsedFor(v)
	})
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *CoinUsedForUpsertBulk) UpdateUsedFor() *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.UpdateUsedFor()
	})
}

// ClearUsedFor clears the value of the "used_for" field.
func (u *CoinUsedForUpsertBulk) ClearUsedFor() *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.ClearUsedFor()
	})
}

// SetPriority sets the "priority" field.
func (u *CoinUsedForUpsertBulk) SetPriority(v uint32) *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *CoinUsedForUpsertBulk) AddPriority(v uint32) *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *CoinUsedForUpsertBulk) UpdatePriority() *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.UpdatePriority()
	})
}

// ClearPriority clears the value of the "priority" field.
func (u *CoinUsedForUpsertBulk) ClearPriority() *CoinUsedForUpsertBulk {
	return u.Update(func(s *CoinUsedForUpsert) {
		s.ClearPriority()
	})
}

// Exec executes the query.
func (u *CoinUsedForUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CoinUsedForCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CoinUsedForCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinUsedForUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
