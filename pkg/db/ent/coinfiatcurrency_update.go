// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/coinfiatcurrency"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CoinFiatCurrencyUpdate is the builder for updating CoinFiatCurrency entities.
type CoinFiatCurrencyUpdate struct {
	config
	hooks     []Hook
	mutation  *CoinFiatCurrencyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CoinFiatCurrencyUpdate builder.
func (cfcu *CoinFiatCurrencyUpdate) Where(ps ...predicate.CoinFiatCurrency) *CoinFiatCurrencyUpdate {
	cfcu.mutation.Where(ps...)
	return cfcu
}

// SetCreatedAt sets the "created_at" field.
func (cfcu *CoinFiatCurrencyUpdate) SetCreatedAt(u uint32) *CoinFiatCurrencyUpdate {
	cfcu.mutation.ResetCreatedAt()
	cfcu.mutation.SetCreatedAt(u)
	return cfcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cfcu *CoinFiatCurrencyUpdate) SetNillableCreatedAt(u *uint32) *CoinFiatCurrencyUpdate {
	if u != nil {
		cfcu.SetCreatedAt(*u)
	}
	return cfcu
}

// AddCreatedAt adds u to the "created_at" field.
func (cfcu *CoinFiatCurrencyUpdate) AddCreatedAt(u int32) *CoinFiatCurrencyUpdate {
	cfcu.mutation.AddCreatedAt(u)
	return cfcu
}

// SetUpdatedAt sets the "updated_at" field.
func (cfcu *CoinFiatCurrencyUpdate) SetUpdatedAt(u uint32) *CoinFiatCurrencyUpdate {
	cfcu.mutation.ResetUpdatedAt()
	cfcu.mutation.SetUpdatedAt(u)
	return cfcu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cfcu *CoinFiatCurrencyUpdate) AddUpdatedAt(u int32) *CoinFiatCurrencyUpdate {
	cfcu.mutation.AddUpdatedAt(u)
	return cfcu
}

// SetDeletedAt sets the "deleted_at" field.
func (cfcu *CoinFiatCurrencyUpdate) SetDeletedAt(u uint32) *CoinFiatCurrencyUpdate {
	cfcu.mutation.ResetDeletedAt()
	cfcu.mutation.SetDeletedAt(u)
	return cfcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cfcu *CoinFiatCurrencyUpdate) SetNillableDeletedAt(u *uint32) *CoinFiatCurrencyUpdate {
	if u != nil {
		cfcu.SetDeletedAt(*u)
	}
	return cfcu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cfcu *CoinFiatCurrencyUpdate) AddDeletedAt(u int32) *CoinFiatCurrencyUpdate {
	cfcu.mutation.AddDeletedAt(u)
	return cfcu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cfcu *CoinFiatCurrencyUpdate) SetCoinTypeID(u uuid.UUID) *CoinFiatCurrencyUpdate {
	cfcu.mutation.SetCoinTypeID(u)
	return cfcu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (cfcu *CoinFiatCurrencyUpdate) SetNillableCoinTypeID(u *uuid.UUID) *CoinFiatCurrencyUpdate {
	if u != nil {
		cfcu.SetCoinTypeID(*u)
	}
	return cfcu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (cfcu *CoinFiatCurrencyUpdate) ClearCoinTypeID() *CoinFiatCurrencyUpdate {
	cfcu.mutation.ClearCoinTypeID()
	return cfcu
}

// SetFiatID sets the "fiat_id" field.
func (cfcu *CoinFiatCurrencyUpdate) SetFiatID(u uuid.UUID) *CoinFiatCurrencyUpdate {
	cfcu.mutation.SetFiatID(u)
	return cfcu
}

// SetNillableFiatID sets the "fiat_id" field if the given value is not nil.
func (cfcu *CoinFiatCurrencyUpdate) SetNillableFiatID(u *uuid.UUID) *CoinFiatCurrencyUpdate {
	if u != nil {
		cfcu.SetFiatID(*u)
	}
	return cfcu
}

// ClearFiatID clears the value of the "fiat_id" field.
func (cfcu *CoinFiatCurrencyUpdate) ClearFiatID() *CoinFiatCurrencyUpdate {
	cfcu.mutation.ClearFiatID()
	return cfcu
}

// SetFeedType sets the "feed_type" field.
func (cfcu *CoinFiatCurrencyUpdate) SetFeedType(s string) *CoinFiatCurrencyUpdate {
	cfcu.mutation.SetFeedType(s)
	return cfcu
}

// SetNillableFeedType sets the "feed_type" field if the given value is not nil.
func (cfcu *CoinFiatCurrencyUpdate) SetNillableFeedType(s *string) *CoinFiatCurrencyUpdate {
	if s != nil {
		cfcu.SetFeedType(*s)
	}
	return cfcu
}

// ClearFeedType clears the value of the "feed_type" field.
func (cfcu *CoinFiatCurrencyUpdate) ClearFeedType() *CoinFiatCurrencyUpdate {
	cfcu.mutation.ClearFeedType()
	return cfcu
}

// SetMarketValueLow sets the "market_value_low" field.
func (cfcu *CoinFiatCurrencyUpdate) SetMarketValueLow(d decimal.Decimal) *CoinFiatCurrencyUpdate {
	cfcu.mutation.SetMarketValueLow(d)
	return cfcu
}

// SetNillableMarketValueLow sets the "market_value_low" field if the given value is not nil.
func (cfcu *CoinFiatCurrencyUpdate) SetNillableMarketValueLow(d *decimal.Decimal) *CoinFiatCurrencyUpdate {
	if d != nil {
		cfcu.SetMarketValueLow(*d)
	}
	return cfcu
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (cfcu *CoinFiatCurrencyUpdate) ClearMarketValueLow() *CoinFiatCurrencyUpdate {
	cfcu.mutation.ClearMarketValueLow()
	return cfcu
}

// SetMarketValueHigh sets the "market_value_high" field.
func (cfcu *CoinFiatCurrencyUpdate) SetMarketValueHigh(d decimal.Decimal) *CoinFiatCurrencyUpdate {
	cfcu.mutation.SetMarketValueHigh(d)
	return cfcu
}

// SetNillableMarketValueHigh sets the "market_value_high" field if the given value is not nil.
func (cfcu *CoinFiatCurrencyUpdate) SetNillableMarketValueHigh(d *decimal.Decimal) *CoinFiatCurrencyUpdate {
	if d != nil {
		cfcu.SetMarketValueHigh(*d)
	}
	return cfcu
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (cfcu *CoinFiatCurrencyUpdate) ClearMarketValueHigh() *CoinFiatCurrencyUpdate {
	cfcu.mutation.ClearMarketValueHigh()
	return cfcu
}

// Mutation returns the CoinFiatCurrencyMutation object of the builder.
func (cfcu *CoinFiatCurrencyUpdate) Mutation() *CoinFiatCurrencyMutation {
	return cfcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cfcu *CoinFiatCurrencyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := cfcu.defaults(); err != nil {
		return 0, err
	}
	if len(cfcu.hooks) == 0 {
		affected, err = cfcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinFiatCurrencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cfcu.mutation = mutation
			affected, err = cfcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cfcu.hooks) - 1; i >= 0; i-- {
			if cfcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cfcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cfcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cfcu *CoinFiatCurrencyUpdate) SaveX(ctx context.Context) int {
	affected, err := cfcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cfcu *CoinFiatCurrencyUpdate) Exec(ctx context.Context) error {
	_, err := cfcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfcu *CoinFiatCurrencyUpdate) ExecX(ctx context.Context) {
	if err := cfcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfcu *CoinFiatCurrencyUpdate) defaults() error {
	if _, ok := cfcu.mutation.UpdatedAt(); !ok {
		if coinfiatcurrency.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coinfiatcurrency.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coinfiatcurrency.UpdateDefaultUpdatedAt()
		cfcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cfcu *CoinFiatCurrencyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CoinFiatCurrencyUpdate {
	cfcu.modifiers = append(cfcu.modifiers, modifiers...)
	return cfcu
}

func (cfcu *CoinFiatCurrencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coinfiatcurrency.Table,
			Columns: coinfiatcurrency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: coinfiatcurrency.FieldID,
			},
		},
	}
	if ps := cfcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfcu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiatcurrency.FieldCreatedAt,
		})
	}
	if value, ok := cfcu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiatcurrency.FieldCreatedAt,
		})
	}
	if value, ok := cfcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiatcurrency.FieldUpdatedAt,
		})
	}
	if value, ok := cfcu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiatcurrency.FieldUpdatedAt,
		})
	}
	if value, ok := cfcu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiatcurrency.FieldDeletedAt,
		})
	}
	if value, ok := cfcu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiatcurrency.FieldDeletedAt,
		})
	}
	if value, ok := cfcu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinfiatcurrency.FieldCoinTypeID,
		})
	}
	if cfcu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: coinfiatcurrency.FieldCoinTypeID,
		})
	}
	if value, ok := cfcu.mutation.FiatID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinfiatcurrency.FieldFiatID,
		})
	}
	if cfcu.mutation.FiatIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: coinfiatcurrency.FieldFiatID,
		})
	}
	if value, ok := cfcu.mutation.FeedType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coinfiatcurrency.FieldFeedType,
		})
	}
	if cfcu.mutation.FeedTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: coinfiatcurrency.FieldFeedType,
		})
	}
	if value, ok := cfcu.mutation.MarketValueLow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: coinfiatcurrency.FieldMarketValueLow,
		})
	}
	if cfcu.mutation.MarketValueLowCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: coinfiatcurrency.FieldMarketValueLow,
		})
	}
	if value, ok := cfcu.mutation.MarketValueHigh(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: coinfiatcurrency.FieldMarketValueHigh,
		})
	}
	if cfcu.mutation.MarketValueHighCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: coinfiatcurrency.FieldMarketValueHigh,
		})
	}
	_spec.Modifiers = cfcu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, cfcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coinfiatcurrency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CoinFiatCurrencyUpdateOne is the builder for updating a single CoinFiatCurrency entity.
type CoinFiatCurrencyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CoinFiatCurrencyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (cfcuo *CoinFiatCurrencyUpdateOne) SetCreatedAt(u uint32) *CoinFiatCurrencyUpdateOne {
	cfcuo.mutation.ResetCreatedAt()
	cfcuo.mutation.SetCreatedAt(u)
	return cfcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cfcuo *CoinFiatCurrencyUpdateOne) SetNillableCreatedAt(u *uint32) *CoinFiatCurrencyUpdateOne {
	if u != nil {
		cfcuo.SetCreatedAt(*u)
	}
	return cfcuo
}

// AddCreatedAt adds u to the "created_at" field.
func (cfcuo *CoinFiatCurrencyUpdateOne) AddCreatedAt(u int32) *CoinFiatCurrencyUpdateOne {
	cfcuo.mutation.AddCreatedAt(u)
	return cfcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cfcuo *CoinFiatCurrencyUpdateOne) SetUpdatedAt(u uint32) *CoinFiatCurrencyUpdateOne {
	cfcuo.mutation.ResetUpdatedAt()
	cfcuo.mutation.SetUpdatedAt(u)
	return cfcuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cfcuo *CoinFiatCurrencyUpdateOne) AddUpdatedAt(u int32) *CoinFiatCurrencyUpdateOne {
	cfcuo.mutation.AddUpdatedAt(u)
	return cfcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cfcuo *CoinFiatCurrencyUpdateOne) SetDeletedAt(u uint32) *CoinFiatCurrencyUpdateOne {
	cfcuo.mutation.ResetDeletedAt()
	cfcuo.mutation.SetDeletedAt(u)
	return cfcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cfcuo *CoinFiatCurrencyUpdateOne) SetNillableDeletedAt(u *uint32) *CoinFiatCurrencyUpdateOne {
	if u != nil {
		cfcuo.SetDeletedAt(*u)
	}
	return cfcuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cfcuo *CoinFiatCurrencyUpdateOne) AddDeletedAt(u int32) *CoinFiatCurrencyUpdateOne {
	cfcuo.mutation.AddDeletedAt(u)
	return cfcuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cfcuo *CoinFiatCurrencyUpdateOne) SetCoinTypeID(u uuid.UUID) *CoinFiatCurrencyUpdateOne {
	cfcuo.mutation.SetCoinTypeID(u)
	return cfcuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (cfcuo *CoinFiatCurrencyUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *CoinFiatCurrencyUpdateOne {
	if u != nil {
		cfcuo.SetCoinTypeID(*u)
	}
	return cfcuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (cfcuo *CoinFiatCurrencyUpdateOne) ClearCoinTypeID() *CoinFiatCurrencyUpdateOne {
	cfcuo.mutation.ClearCoinTypeID()
	return cfcuo
}

// SetFiatID sets the "fiat_id" field.
func (cfcuo *CoinFiatCurrencyUpdateOne) SetFiatID(u uuid.UUID) *CoinFiatCurrencyUpdateOne {
	cfcuo.mutation.SetFiatID(u)
	return cfcuo
}

// SetNillableFiatID sets the "fiat_id" field if the given value is not nil.
func (cfcuo *CoinFiatCurrencyUpdateOne) SetNillableFiatID(u *uuid.UUID) *CoinFiatCurrencyUpdateOne {
	if u != nil {
		cfcuo.SetFiatID(*u)
	}
	return cfcuo
}

// ClearFiatID clears the value of the "fiat_id" field.
func (cfcuo *CoinFiatCurrencyUpdateOne) ClearFiatID() *CoinFiatCurrencyUpdateOne {
	cfcuo.mutation.ClearFiatID()
	return cfcuo
}

// SetFeedType sets the "feed_type" field.
func (cfcuo *CoinFiatCurrencyUpdateOne) SetFeedType(s string) *CoinFiatCurrencyUpdateOne {
	cfcuo.mutation.SetFeedType(s)
	return cfcuo
}

// SetNillableFeedType sets the "feed_type" field if the given value is not nil.
func (cfcuo *CoinFiatCurrencyUpdateOne) SetNillableFeedType(s *string) *CoinFiatCurrencyUpdateOne {
	if s != nil {
		cfcuo.SetFeedType(*s)
	}
	return cfcuo
}

// ClearFeedType clears the value of the "feed_type" field.
func (cfcuo *CoinFiatCurrencyUpdateOne) ClearFeedType() *CoinFiatCurrencyUpdateOne {
	cfcuo.mutation.ClearFeedType()
	return cfcuo
}

// SetMarketValueLow sets the "market_value_low" field.
func (cfcuo *CoinFiatCurrencyUpdateOne) SetMarketValueLow(d decimal.Decimal) *CoinFiatCurrencyUpdateOne {
	cfcuo.mutation.SetMarketValueLow(d)
	return cfcuo
}

// SetNillableMarketValueLow sets the "market_value_low" field if the given value is not nil.
func (cfcuo *CoinFiatCurrencyUpdateOne) SetNillableMarketValueLow(d *decimal.Decimal) *CoinFiatCurrencyUpdateOne {
	if d != nil {
		cfcuo.SetMarketValueLow(*d)
	}
	return cfcuo
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (cfcuo *CoinFiatCurrencyUpdateOne) ClearMarketValueLow() *CoinFiatCurrencyUpdateOne {
	cfcuo.mutation.ClearMarketValueLow()
	return cfcuo
}

// SetMarketValueHigh sets the "market_value_high" field.
func (cfcuo *CoinFiatCurrencyUpdateOne) SetMarketValueHigh(d decimal.Decimal) *CoinFiatCurrencyUpdateOne {
	cfcuo.mutation.SetMarketValueHigh(d)
	return cfcuo
}

// SetNillableMarketValueHigh sets the "market_value_high" field if the given value is not nil.
func (cfcuo *CoinFiatCurrencyUpdateOne) SetNillableMarketValueHigh(d *decimal.Decimal) *CoinFiatCurrencyUpdateOne {
	if d != nil {
		cfcuo.SetMarketValueHigh(*d)
	}
	return cfcuo
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (cfcuo *CoinFiatCurrencyUpdateOne) ClearMarketValueHigh() *CoinFiatCurrencyUpdateOne {
	cfcuo.mutation.ClearMarketValueHigh()
	return cfcuo
}

// Mutation returns the CoinFiatCurrencyMutation object of the builder.
func (cfcuo *CoinFiatCurrencyUpdateOne) Mutation() *CoinFiatCurrencyMutation {
	return cfcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cfcuo *CoinFiatCurrencyUpdateOne) Select(field string, fields ...string) *CoinFiatCurrencyUpdateOne {
	cfcuo.fields = append([]string{field}, fields...)
	return cfcuo
}

// Save executes the query and returns the updated CoinFiatCurrency entity.
func (cfcuo *CoinFiatCurrencyUpdateOne) Save(ctx context.Context) (*CoinFiatCurrency, error) {
	var (
		err  error
		node *CoinFiatCurrency
	)
	if err := cfcuo.defaults(); err != nil {
		return nil, err
	}
	if len(cfcuo.hooks) == 0 {
		node, err = cfcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinFiatCurrencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cfcuo.mutation = mutation
			node, err = cfcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cfcuo.hooks) - 1; i >= 0; i-- {
			if cfcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cfcuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cfcuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CoinFiatCurrency)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CoinFiatCurrencyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cfcuo *CoinFiatCurrencyUpdateOne) SaveX(ctx context.Context) *CoinFiatCurrency {
	node, err := cfcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cfcuo *CoinFiatCurrencyUpdateOne) Exec(ctx context.Context) error {
	_, err := cfcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfcuo *CoinFiatCurrencyUpdateOne) ExecX(ctx context.Context) {
	if err := cfcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfcuo *CoinFiatCurrencyUpdateOne) defaults() error {
	if _, ok := cfcuo.mutation.UpdatedAt(); !ok {
		if coinfiatcurrency.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coinfiatcurrency.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coinfiatcurrency.UpdateDefaultUpdatedAt()
		cfcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cfcuo *CoinFiatCurrencyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CoinFiatCurrencyUpdateOne {
	cfcuo.modifiers = append(cfcuo.modifiers, modifiers...)
	return cfcuo
}

func (cfcuo *CoinFiatCurrencyUpdateOne) sqlSave(ctx context.Context) (_node *CoinFiatCurrency, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coinfiatcurrency.Table,
			Columns: coinfiatcurrency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: coinfiatcurrency.FieldID,
			},
		},
	}
	id, ok := cfcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CoinFiatCurrency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cfcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coinfiatcurrency.FieldID)
		for _, f := range fields {
			if !coinfiatcurrency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coinfiatcurrency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cfcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfcuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiatcurrency.FieldCreatedAt,
		})
	}
	if value, ok := cfcuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiatcurrency.FieldCreatedAt,
		})
	}
	if value, ok := cfcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiatcurrency.FieldUpdatedAt,
		})
	}
	if value, ok := cfcuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiatcurrency.FieldUpdatedAt,
		})
	}
	if value, ok := cfcuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiatcurrency.FieldDeletedAt,
		})
	}
	if value, ok := cfcuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiatcurrency.FieldDeletedAt,
		})
	}
	if value, ok := cfcuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinfiatcurrency.FieldCoinTypeID,
		})
	}
	if cfcuo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: coinfiatcurrency.FieldCoinTypeID,
		})
	}
	if value, ok := cfcuo.mutation.FiatID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinfiatcurrency.FieldFiatID,
		})
	}
	if cfcuo.mutation.FiatIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: coinfiatcurrency.FieldFiatID,
		})
	}
	if value, ok := cfcuo.mutation.FeedType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coinfiatcurrency.FieldFeedType,
		})
	}
	if cfcuo.mutation.FeedTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: coinfiatcurrency.FieldFeedType,
		})
	}
	if value, ok := cfcuo.mutation.MarketValueLow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: coinfiatcurrency.FieldMarketValueLow,
		})
	}
	if cfcuo.mutation.MarketValueLowCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: coinfiatcurrency.FieldMarketValueLow,
		})
	}
	if value, ok := cfcuo.mutation.MarketValueHigh(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: coinfiatcurrency.FieldMarketValueHigh,
		})
	}
	if cfcuo.mutation.MarketValueHighCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: coinfiatcurrency.FieldMarketValueHigh,
		})
	}
	_spec.Modifiers = cfcuo.modifiers
	_node = &CoinFiatCurrency{config: cfcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cfcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coinfiatcurrency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
