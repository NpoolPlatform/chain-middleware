// Code generated by ent, DO NOT EDIT.

package exchangerate

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinTypeID), v))
	})
}

// MarketValue applies equality check predicate on the "market_value" field. It's identical to MarketValueEQ.
func MarketValue(v decimal.Decimal) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarketValue), v))
	})
}

// SettleValue applies equality check predicate on the "settle_value" field. It's identical to SettleValueEQ.
func SettleValue(v decimal.Decimal) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSettleValue), v))
	})
}

// SettlePercent applies equality check predicate on the "settle_percent" field. It's identical to SettlePercentEQ.
func SettlePercent(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSettlePercent), v))
	})
}

// Setter applies equality check predicate on the "setter" field. It's identical to SetterEQ.
func Setter(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSetter), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.ExchangeRate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.ExchangeRate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.ExchangeRate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.ExchangeRate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.ExchangeRate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.ExchangeRate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.ExchangeRate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.ExchangeRate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.ExchangeRate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCoinTypeID), v...))
	})
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.ExchangeRate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCoinTypeID), v...))
	})
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDIsNil applies the IsNil predicate on the "coin_type_id" field.
func CoinTypeIDIsNil() predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoinTypeID)))
	})
}

// CoinTypeIDNotNil applies the NotNil predicate on the "coin_type_id" field.
func CoinTypeIDNotNil() predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoinTypeID)))
	})
}

// MarketValueEQ applies the EQ predicate on the "market_value" field.
func MarketValueEQ(v decimal.Decimal) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarketValue), v))
	})
}

// MarketValueNEQ applies the NEQ predicate on the "market_value" field.
func MarketValueNEQ(v decimal.Decimal) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMarketValue), v))
	})
}

// MarketValueIn applies the In predicate on the "market_value" field.
func MarketValueIn(vs ...decimal.Decimal) predicate.ExchangeRate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMarketValue), v...))
	})
}

// MarketValueNotIn applies the NotIn predicate on the "market_value" field.
func MarketValueNotIn(vs ...decimal.Decimal) predicate.ExchangeRate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMarketValue), v...))
	})
}

// MarketValueGT applies the GT predicate on the "market_value" field.
func MarketValueGT(v decimal.Decimal) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMarketValue), v))
	})
}

// MarketValueGTE applies the GTE predicate on the "market_value" field.
func MarketValueGTE(v decimal.Decimal) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMarketValue), v))
	})
}

// MarketValueLT applies the LT predicate on the "market_value" field.
func MarketValueLT(v decimal.Decimal) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMarketValue), v))
	})
}

// MarketValueLTE applies the LTE predicate on the "market_value" field.
func MarketValueLTE(v decimal.Decimal) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMarketValue), v))
	})
}

// MarketValueIsNil applies the IsNil predicate on the "market_value" field.
func MarketValueIsNil() predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMarketValue)))
	})
}

// MarketValueNotNil applies the NotNil predicate on the "market_value" field.
func MarketValueNotNil() predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMarketValue)))
	})
}

// SettleValueEQ applies the EQ predicate on the "settle_value" field.
func SettleValueEQ(v decimal.Decimal) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSettleValue), v))
	})
}

// SettleValueNEQ applies the NEQ predicate on the "settle_value" field.
func SettleValueNEQ(v decimal.Decimal) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSettleValue), v))
	})
}

// SettleValueIn applies the In predicate on the "settle_value" field.
func SettleValueIn(vs ...decimal.Decimal) predicate.ExchangeRate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSettleValue), v...))
	})
}

// SettleValueNotIn applies the NotIn predicate on the "settle_value" field.
func SettleValueNotIn(vs ...decimal.Decimal) predicate.ExchangeRate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSettleValue), v...))
	})
}

// SettleValueGT applies the GT predicate on the "settle_value" field.
func SettleValueGT(v decimal.Decimal) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSettleValue), v))
	})
}

// SettleValueGTE applies the GTE predicate on the "settle_value" field.
func SettleValueGTE(v decimal.Decimal) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSettleValue), v))
	})
}

// SettleValueLT applies the LT predicate on the "settle_value" field.
func SettleValueLT(v decimal.Decimal) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSettleValue), v))
	})
}

// SettleValueLTE applies the LTE predicate on the "settle_value" field.
func SettleValueLTE(v decimal.Decimal) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSettleValue), v))
	})
}

// SettleValueIsNil applies the IsNil predicate on the "settle_value" field.
func SettleValueIsNil() predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSettleValue)))
	})
}

// SettleValueNotNil applies the NotNil predicate on the "settle_value" field.
func SettleValueNotNil() predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSettleValue)))
	})
}

// SettlePercentEQ applies the EQ predicate on the "settle_percent" field.
func SettlePercentEQ(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSettlePercent), v))
	})
}

// SettlePercentNEQ applies the NEQ predicate on the "settle_percent" field.
func SettlePercentNEQ(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSettlePercent), v))
	})
}

// SettlePercentIn applies the In predicate on the "settle_percent" field.
func SettlePercentIn(vs ...uint32) predicate.ExchangeRate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSettlePercent), v...))
	})
}

// SettlePercentNotIn applies the NotIn predicate on the "settle_percent" field.
func SettlePercentNotIn(vs ...uint32) predicate.ExchangeRate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSettlePercent), v...))
	})
}

// SettlePercentGT applies the GT predicate on the "settle_percent" field.
func SettlePercentGT(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSettlePercent), v))
	})
}

// SettlePercentGTE applies the GTE predicate on the "settle_percent" field.
func SettlePercentGTE(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSettlePercent), v))
	})
}

// SettlePercentLT applies the LT predicate on the "settle_percent" field.
func SettlePercentLT(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSettlePercent), v))
	})
}

// SettlePercentLTE applies the LTE predicate on the "settle_percent" field.
func SettlePercentLTE(v uint32) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSettlePercent), v))
	})
}

// SettlePercentIsNil applies the IsNil predicate on the "settle_percent" field.
func SettlePercentIsNil() predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSettlePercent)))
	})
}

// SettlePercentNotNil applies the NotNil predicate on the "settle_percent" field.
func SettlePercentNotNil() predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSettlePercent)))
	})
}

// SettleTipsIsNil applies the IsNil predicate on the "settle_tips" field.
func SettleTipsIsNil() predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSettleTips)))
	})
}

// SettleTipsNotNil applies the NotNil predicate on the "settle_tips" field.
func SettleTipsNotNil() predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSettleTips)))
	})
}

// SetterEQ applies the EQ predicate on the "setter" field.
func SetterEQ(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSetter), v))
	})
}

// SetterNEQ applies the NEQ predicate on the "setter" field.
func SetterNEQ(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSetter), v))
	})
}

// SetterIn applies the In predicate on the "setter" field.
func SetterIn(vs ...uuid.UUID) predicate.ExchangeRate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSetter), v...))
	})
}

// SetterNotIn applies the NotIn predicate on the "setter" field.
func SetterNotIn(vs ...uuid.UUID) predicate.ExchangeRate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSetter), v...))
	})
}

// SetterGT applies the GT predicate on the "setter" field.
func SetterGT(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSetter), v))
	})
}

// SetterGTE applies the GTE predicate on the "setter" field.
func SetterGTE(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSetter), v))
	})
}

// SetterLT applies the LT predicate on the "setter" field.
func SetterLT(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSetter), v))
	})
}

// SetterLTE applies the LTE predicate on the "setter" field.
func SetterLTE(v uuid.UUID) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSetter), v))
	})
}

// SetterIsNil applies the IsNil predicate on the "setter" field.
func SetterIsNil() predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSetter)))
	})
}

// SetterNotNil applies the NotNil predicate on the "setter" field.
func SetterNotNil() predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSetter)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExchangeRate) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExchangeRate) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExchangeRate) predicate.ExchangeRate {
	return predicate.ExchangeRate(func(s *sql.Selector) {
		p(s.Not())
	})
}
