// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/coinextra"
	"github.com/google/uuid"
)

// CoinExtraCreate is the builder for creating a CoinExtra entity.
type CoinExtraCreate struct {
	config
	mutation *CoinExtraMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cec *CoinExtraCreate) SetCreatedAt(u uint32) *CoinExtraCreate {
	cec.mutation.SetCreatedAt(u)
	return cec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cec *CoinExtraCreate) SetNillableCreatedAt(u *uint32) *CoinExtraCreate {
	if u != nil {
		cec.SetCreatedAt(*u)
	}
	return cec
}

// SetUpdatedAt sets the "updated_at" field.
func (cec *CoinExtraCreate) SetUpdatedAt(u uint32) *CoinExtraCreate {
	cec.mutation.SetUpdatedAt(u)
	return cec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cec *CoinExtraCreate) SetNillableUpdatedAt(u *uint32) *CoinExtraCreate {
	if u != nil {
		cec.SetUpdatedAt(*u)
	}
	return cec
}

// SetDeletedAt sets the "deleted_at" field.
func (cec *CoinExtraCreate) SetDeletedAt(u uint32) *CoinExtraCreate {
	cec.mutation.SetDeletedAt(u)
	return cec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cec *CoinExtraCreate) SetNillableDeletedAt(u *uint32) *CoinExtraCreate {
	if u != nil {
		cec.SetDeletedAt(*u)
	}
	return cec
}

// SetEntID sets the "ent_id" field.
func (cec *CoinExtraCreate) SetEntID(u uuid.UUID) *CoinExtraCreate {
	cec.mutation.SetEntID(u)
	return cec
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cec *CoinExtraCreate) SetNillableEntID(u *uuid.UUID) *CoinExtraCreate {
	if u != nil {
		cec.SetEntID(*u)
	}
	return cec
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cec *CoinExtraCreate) SetCoinTypeID(u uuid.UUID) *CoinExtraCreate {
	cec.mutation.SetCoinTypeID(u)
	return cec
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (cec *CoinExtraCreate) SetNillableCoinTypeID(u *uuid.UUID) *CoinExtraCreate {
	if u != nil {
		cec.SetCoinTypeID(*u)
	}
	return cec
}

// SetHomePage sets the "home_page" field.
func (cec *CoinExtraCreate) SetHomePage(s string) *CoinExtraCreate {
	cec.mutation.SetHomePage(s)
	return cec
}

// SetNillableHomePage sets the "home_page" field if the given value is not nil.
func (cec *CoinExtraCreate) SetNillableHomePage(s *string) *CoinExtraCreate {
	if s != nil {
		cec.SetHomePage(*s)
	}
	return cec
}

// SetSpecs sets the "specs" field.
func (cec *CoinExtraCreate) SetSpecs(s string) *CoinExtraCreate {
	cec.mutation.SetSpecs(s)
	return cec
}

// SetNillableSpecs sets the "specs" field if the given value is not nil.
func (cec *CoinExtraCreate) SetNillableSpecs(s *string) *CoinExtraCreate {
	if s != nil {
		cec.SetSpecs(*s)
	}
	return cec
}

// SetStableUsd sets the "stable_usd" field.
func (cec *CoinExtraCreate) SetStableUsd(b bool) *CoinExtraCreate {
	cec.mutation.SetStableUsd(b)
	return cec
}

// SetNillableStableUsd sets the "stable_usd" field if the given value is not nil.
func (cec *CoinExtraCreate) SetNillableStableUsd(b *bool) *CoinExtraCreate {
	if b != nil {
		cec.SetStableUsd(*b)
	}
	return cec
}

// SetID sets the "id" field.
func (cec *CoinExtraCreate) SetID(i int) *CoinExtraCreate {
	cec.mutation.SetID(i)
	return cec
}

// Mutation returns the CoinExtraMutation object of the builder.
func (cec *CoinExtraCreate) Mutation() *CoinExtraMutation {
	return cec.mutation
}

// Save creates the CoinExtra in the database.
func (cec *CoinExtraCreate) Save(ctx context.Context) (*CoinExtra, error) {
	var (
		err  error
		node *CoinExtra
	)
	if err := cec.defaults(); err != nil {
		return nil, err
	}
	if len(cec.hooks) == 0 {
		if err = cec.check(); err != nil {
			return nil, err
		}
		node, err = cec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinExtraMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cec.check(); err != nil {
				return nil, err
			}
			cec.mutation = mutation
			if node, err = cec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cec.hooks) - 1; i >= 0; i-- {
			if cec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CoinExtra)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CoinExtraMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cec *CoinExtraCreate) SaveX(ctx context.Context) *CoinExtra {
	v, err := cec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cec *CoinExtraCreate) Exec(ctx context.Context) error {
	_, err := cec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cec *CoinExtraCreate) ExecX(ctx context.Context) {
	if err := cec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cec *CoinExtraCreate) defaults() error {
	if _, ok := cec.mutation.CreatedAt(); !ok {
		if coinextra.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized coinextra.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := coinextra.DefaultCreatedAt()
		cec.mutation.SetCreatedAt(v)
	}
	if _, ok := cec.mutation.UpdatedAt(); !ok {
		if coinextra.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coinextra.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coinextra.DefaultUpdatedAt()
		cec.mutation.SetUpdatedAt(v)
	}
	if _, ok := cec.mutation.DeletedAt(); !ok {
		if coinextra.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized coinextra.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := coinextra.DefaultDeletedAt()
		cec.mutation.SetDeletedAt(v)
	}
	if _, ok := cec.mutation.EntID(); !ok {
		if coinextra.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized coinextra.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := coinextra.DefaultEntID()
		cec.mutation.SetEntID(v)
	}
	if _, ok := cec.mutation.CoinTypeID(); !ok {
		if coinextra.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized coinextra.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := coinextra.DefaultCoinTypeID()
		cec.mutation.SetCoinTypeID(v)
	}
	if _, ok := cec.mutation.HomePage(); !ok {
		v := coinextra.DefaultHomePage
		cec.mutation.SetHomePage(v)
	}
	if _, ok := cec.mutation.Specs(); !ok {
		v := coinextra.DefaultSpecs
		cec.mutation.SetSpecs(v)
	}
	if _, ok := cec.mutation.StableUsd(); !ok {
		v := coinextra.DefaultStableUsd
		cec.mutation.SetStableUsd(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cec *CoinExtraCreate) check() error {
	if _, ok := cec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CoinExtra.created_at"`)}
	}
	if _, ok := cec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CoinExtra.updated_at"`)}
	}
	if _, ok := cec.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "CoinExtra.deleted_at"`)}
	}
	if _, ok := cec.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "CoinExtra.ent_id"`)}
	}
	return nil
}

func (cec *CoinExtraCreate) sqlSave(ctx context.Context) (*CoinExtra, error) {
	_node, _spec := cec.createSpec()
	if err := sqlgraph.CreateNode(ctx, cec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (cec *CoinExtraCreate) createSpec() (*CoinExtra, *sqlgraph.CreateSpec) {
	var (
		_node = &CoinExtra{config: cec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: coinextra.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: coinextra.FieldID,
			},
		}
	)
	_spec.OnConflict = cec.conflict
	if id, ok := cec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cec.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinextra.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cec.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinextra.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cec.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinextra.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := cec.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinextra.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := cec.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinextra.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := cec.mutation.HomePage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coinextra.FieldHomePage,
		})
		_node.HomePage = value
	}
	if value, ok := cec.mutation.Specs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coinextra.FieldSpecs,
		})
		_node.Specs = value
	}
	if value, ok := cec.mutation.StableUsd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: coinextra.FieldStableUsd,
		})
		_node.StableUsd = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinExtra.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinExtraUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cec *CoinExtraCreate) OnConflict(opts ...sql.ConflictOption) *CoinExtraUpsertOne {
	cec.conflict = opts
	return &CoinExtraUpsertOne{
		create: cec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinExtra.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cec *CoinExtraCreate) OnConflictColumns(columns ...string) *CoinExtraUpsertOne {
	cec.conflict = append(cec.conflict, sql.ConflictColumns(columns...))
	return &CoinExtraUpsertOne{
		create: cec,
	}
}

type (
	// CoinExtraUpsertOne is the builder for "upsert"-ing
	//  one CoinExtra node.
	CoinExtraUpsertOne struct {
		create *CoinExtraCreate
	}

	// CoinExtraUpsert is the "OnConflict" setter.
	CoinExtraUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CoinExtraUpsert) SetCreatedAt(v uint32) *CoinExtraUpsert {
	u.Set(coinextra.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CoinExtraUpsert) UpdateCreatedAt() *CoinExtraUpsert {
	u.SetExcluded(coinextra.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CoinExtraUpsert) AddCreatedAt(v uint32) *CoinExtraUpsert {
	u.Add(coinextra.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CoinExtraUpsert) SetUpdatedAt(v uint32) *CoinExtraUpsert {
	u.Set(coinextra.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CoinExtraUpsert) UpdateUpdatedAt() *CoinExtraUpsert {
	u.SetExcluded(coinextra.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CoinExtraUpsert) AddUpdatedAt(v uint32) *CoinExtraUpsert {
	u.Add(coinextra.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CoinExtraUpsert) SetDeletedAt(v uint32) *CoinExtraUpsert {
	u.Set(coinextra.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CoinExtraUpsert) UpdateDeletedAt() *CoinExtraUpsert {
	u.SetExcluded(coinextra.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CoinExtraUpsert) AddDeletedAt(v uint32) *CoinExtraUpsert {
	u.Add(coinextra.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *CoinExtraUpsert) SetEntID(v uuid.UUID) *CoinExtraUpsert {
	u.Set(coinextra.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CoinExtraUpsert) UpdateEntID() *CoinExtraUpsert {
	u.SetExcluded(coinextra.FieldEntID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinExtraUpsert) SetCoinTypeID(v uuid.UUID) *CoinExtraUpsert {
	u.Set(coinextra.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinExtraUpsert) UpdateCoinTypeID() *CoinExtraUpsert {
	u.SetExcluded(coinextra.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *CoinExtraUpsert) ClearCoinTypeID() *CoinExtraUpsert {
	u.SetNull(coinextra.FieldCoinTypeID)
	return u
}

// SetHomePage sets the "home_page" field.
func (u *CoinExtraUpsert) SetHomePage(v string) *CoinExtraUpsert {
	u.Set(coinextra.FieldHomePage, v)
	return u
}

// UpdateHomePage sets the "home_page" field to the value that was provided on create.
func (u *CoinExtraUpsert) UpdateHomePage() *CoinExtraUpsert {
	u.SetExcluded(coinextra.FieldHomePage)
	return u
}

// ClearHomePage clears the value of the "home_page" field.
func (u *CoinExtraUpsert) ClearHomePage() *CoinExtraUpsert {
	u.SetNull(coinextra.FieldHomePage)
	return u
}

// SetSpecs sets the "specs" field.
func (u *CoinExtraUpsert) SetSpecs(v string) *CoinExtraUpsert {
	u.Set(coinextra.FieldSpecs, v)
	return u
}

// UpdateSpecs sets the "specs" field to the value that was provided on create.
func (u *CoinExtraUpsert) UpdateSpecs() *CoinExtraUpsert {
	u.SetExcluded(coinextra.FieldSpecs)
	return u
}

// ClearSpecs clears the value of the "specs" field.
func (u *CoinExtraUpsert) ClearSpecs() *CoinExtraUpsert {
	u.SetNull(coinextra.FieldSpecs)
	return u
}

// SetStableUsd sets the "stable_usd" field.
func (u *CoinExtraUpsert) SetStableUsd(v bool) *CoinExtraUpsert {
	u.Set(coinextra.FieldStableUsd, v)
	return u
}

// UpdateStableUsd sets the "stable_usd" field to the value that was provided on create.
func (u *CoinExtraUpsert) UpdateStableUsd() *CoinExtraUpsert {
	u.SetExcluded(coinextra.FieldStableUsd)
	return u
}

// ClearStableUsd clears the value of the "stable_usd" field.
func (u *CoinExtraUpsert) ClearStableUsd() *CoinExtraUpsert {
	u.SetNull(coinextra.FieldStableUsd)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CoinExtra.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coinextra.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CoinExtraUpsertOne) UpdateNewValues() *CoinExtraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(coinextra.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CoinExtra.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CoinExtraUpsertOne) Ignore() *CoinExtraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinExtraUpsertOne) DoNothing() *CoinExtraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinExtraCreate.OnConflict
// documentation for more info.
func (u *CoinExtraUpsertOne) Update(set func(*CoinExtraUpsert)) *CoinExtraUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinExtraUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CoinExtraUpsertOne) SetCreatedAt(v uint32) *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CoinExtraUpsertOne) AddCreatedAt(v uint32) *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CoinExtraUpsertOne) UpdateCreatedAt() *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CoinExtraUpsertOne) SetUpdatedAt(v uint32) *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CoinExtraUpsertOne) AddUpdatedAt(v uint32) *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CoinExtraUpsertOne) UpdateUpdatedAt() *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CoinExtraUpsertOne) SetDeletedAt(v uint32) *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CoinExtraUpsertOne) AddDeletedAt(v uint32) *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CoinExtraUpsertOne) UpdateDeletedAt() *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CoinExtraUpsertOne) SetEntID(v uuid.UUID) *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CoinExtraUpsertOne) UpdateEntID() *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.UpdateEntID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinExtraUpsertOne) SetCoinTypeID(v uuid.UUID) *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinExtraUpsertOne) UpdateCoinTypeID() *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *CoinExtraUpsertOne) ClearCoinTypeID() *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetHomePage sets the "home_page" field.
func (u *CoinExtraUpsertOne) SetHomePage(v string) *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.SetHomePage(v)
	})
}

// UpdateHomePage sets the "home_page" field to the value that was provided on create.
func (u *CoinExtraUpsertOne) UpdateHomePage() *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.UpdateHomePage()
	})
}

// ClearHomePage clears the value of the "home_page" field.
func (u *CoinExtraUpsertOne) ClearHomePage() *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.ClearHomePage()
	})
}

// SetSpecs sets the "specs" field.
func (u *CoinExtraUpsertOne) SetSpecs(v string) *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.SetSpecs(v)
	})
}

// UpdateSpecs sets the "specs" field to the value that was provided on create.
func (u *CoinExtraUpsertOne) UpdateSpecs() *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.UpdateSpecs()
	})
}

// ClearSpecs clears the value of the "specs" field.
func (u *CoinExtraUpsertOne) ClearSpecs() *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.ClearSpecs()
	})
}

// SetStableUsd sets the "stable_usd" field.
func (u *CoinExtraUpsertOne) SetStableUsd(v bool) *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.SetStableUsd(v)
	})
}

// UpdateStableUsd sets the "stable_usd" field to the value that was provided on create.
func (u *CoinExtraUpsertOne) UpdateStableUsd() *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.UpdateStableUsd()
	})
}

// ClearStableUsd clears the value of the "stable_usd" field.
func (u *CoinExtraUpsertOne) ClearStableUsd() *CoinExtraUpsertOne {
	return u.Update(func(s *CoinExtraUpsert) {
		s.ClearStableUsd()
	})
}

// Exec executes the query.
func (u *CoinExtraUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CoinExtraCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinExtraUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CoinExtraUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CoinExtraUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CoinExtraCreateBulk is the builder for creating many CoinExtra entities in bulk.
type CoinExtraCreateBulk struct {
	config
	builders []*CoinExtraCreate
	conflict []sql.ConflictOption
}

// Save creates the CoinExtra entities in the database.
func (cecb *CoinExtraCreateBulk) Save(ctx context.Context) ([]*CoinExtra, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cecb.builders))
	nodes := make([]*CoinExtra, len(cecb.builders))
	mutators := make([]Mutator, len(cecb.builders))
	for i := range cecb.builders {
		func(i int, root context.Context) {
			builder := cecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CoinExtraMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cecb *CoinExtraCreateBulk) SaveX(ctx context.Context) []*CoinExtra {
	v, err := cecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cecb *CoinExtraCreateBulk) Exec(ctx context.Context) error {
	_, err := cecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cecb *CoinExtraCreateBulk) ExecX(ctx context.Context) {
	if err := cecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinExtra.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinExtraUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cecb *CoinExtraCreateBulk) OnConflict(opts ...sql.ConflictOption) *CoinExtraUpsertBulk {
	cecb.conflict = opts
	return &CoinExtraUpsertBulk{
		create: cecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinExtra.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cecb *CoinExtraCreateBulk) OnConflictColumns(columns ...string) *CoinExtraUpsertBulk {
	cecb.conflict = append(cecb.conflict, sql.ConflictColumns(columns...))
	return &CoinExtraUpsertBulk{
		create: cecb,
	}
}

// CoinExtraUpsertBulk is the builder for "upsert"-ing
// a bulk of CoinExtra nodes.
type CoinExtraUpsertBulk struct {
	create *CoinExtraCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CoinExtra.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coinextra.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CoinExtraUpsertBulk) UpdateNewValues() *CoinExtraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(coinextra.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CoinExtra.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CoinExtraUpsertBulk) Ignore() *CoinExtraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinExtraUpsertBulk) DoNothing() *CoinExtraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinExtraCreateBulk.OnConflict
// documentation for more info.
func (u *CoinExtraUpsertBulk) Update(set func(*CoinExtraUpsert)) *CoinExtraUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinExtraUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CoinExtraUpsertBulk) SetCreatedAt(v uint32) *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CoinExtraUpsertBulk) AddCreatedAt(v uint32) *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CoinExtraUpsertBulk) UpdateCreatedAt() *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CoinExtraUpsertBulk) SetUpdatedAt(v uint32) *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CoinExtraUpsertBulk) AddUpdatedAt(v uint32) *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CoinExtraUpsertBulk) UpdateUpdatedAt() *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CoinExtraUpsertBulk) SetDeletedAt(v uint32) *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CoinExtraUpsertBulk) AddDeletedAt(v uint32) *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CoinExtraUpsertBulk) UpdateDeletedAt() *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CoinExtraUpsertBulk) SetEntID(v uuid.UUID) *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CoinExtraUpsertBulk) UpdateEntID() *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.UpdateEntID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinExtraUpsertBulk) SetCoinTypeID(v uuid.UUID) *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinExtraUpsertBulk) UpdateCoinTypeID() *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *CoinExtraUpsertBulk) ClearCoinTypeID() *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetHomePage sets the "home_page" field.
func (u *CoinExtraUpsertBulk) SetHomePage(v string) *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.SetHomePage(v)
	})
}

// UpdateHomePage sets the "home_page" field to the value that was provided on create.
func (u *CoinExtraUpsertBulk) UpdateHomePage() *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.UpdateHomePage()
	})
}

// ClearHomePage clears the value of the "home_page" field.
func (u *CoinExtraUpsertBulk) ClearHomePage() *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.ClearHomePage()
	})
}

// SetSpecs sets the "specs" field.
func (u *CoinExtraUpsertBulk) SetSpecs(v string) *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.SetSpecs(v)
	})
}

// UpdateSpecs sets the "specs" field to the value that was provided on create.
func (u *CoinExtraUpsertBulk) UpdateSpecs() *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.UpdateSpecs()
	})
}

// ClearSpecs clears the value of the "specs" field.
func (u *CoinExtraUpsertBulk) ClearSpecs() *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.ClearSpecs()
	})
}

// SetStableUsd sets the "stable_usd" field.
func (u *CoinExtraUpsertBulk) SetStableUsd(v bool) *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.SetStableUsd(v)
	})
}

// UpdateStableUsd sets the "stable_usd" field to the value that was provided on create.
func (u *CoinExtraUpsertBulk) UpdateStableUsd() *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.UpdateStableUsd()
	})
}

// ClearStableUsd clears the value of the "stable_usd" field.
func (u *CoinExtraUpsertBulk) ClearStableUsd() *CoinExtraUpsertBulk {
	return u.Update(func(s *CoinExtraUpsert) {
		s.ClearStableUsd()
	})
}

// Exec executes the query.
func (u *CoinExtraUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CoinExtraCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CoinExtraCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinExtraUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
