// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/currencyhistory"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CurrencyHistoryUpdate is the builder for updating CurrencyHistory entities.
type CurrencyHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *CurrencyHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CurrencyHistoryUpdate builder.
func (chu *CurrencyHistoryUpdate) Where(ps ...predicate.CurrencyHistory) *CurrencyHistoryUpdate {
	chu.mutation.Where(ps...)
	return chu
}

// SetCreatedAt sets the "created_at" field.
func (chu *CurrencyHistoryUpdate) SetCreatedAt(u uint32) *CurrencyHistoryUpdate {
	chu.mutation.ResetCreatedAt()
	chu.mutation.SetCreatedAt(u)
	return chu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (chu *CurrencyHistoryUpdate) SetNillableCreatedAt(u *uint32) *CurrencyHistoryUpdate {
	if u != nil {
		chu.SetCreatedAt(*u)
	}
	return chu
}

// AddCreatedAt adds u to the "created_at" field.
func (chu *CurrencyHistoryUpdate) AddCreatedAt(u int32) *CurrencyHistoryUpdate {
	chu.mutation.AddCreatedAt(u)
	return chu
}

// SetUpdatedAt sets the "updated_at" field.
func (chu *CurrencyHistoryUpdate) SetUpdatedAt(u uint32) *CurrencyHistoryUpdate {
	chu.mutation.ResetUpdatedAt()
	chu.mutation.SetUpdatedAt(u)
	return chu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (chu *CurrencyHistoryUpdate) AddUpdatedAt(u int32) *CurrencyHistoryUpdate {
	chu.mutation.AddUpdatedAt(u)
	return chu
}

// SetDeletedAt sets the "deleted_at" field.
func (chu *CurrencyHistoryUpdate) SetDeletedAt(u uint32) *CurrencyHistoryUpdate {
	chu.mutation.ResetDeletedAt()
	chu.mutation.SetDeletedAt(u)
	return chu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (chu *CurrencyHistoryUpdate) SetNillableDeletedAt(u *uint32) *CurrencyHistoryUpdate {
	if u != nil {
		chu.SetDeletedAt(*u)
	}
	return chu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (chu *CurrencyHistoryUpdate) AddDeletedAt(u int32) *CurrencyHistoryUpdate {
	chu.mutation.AddDeletedAt(u)
	return chu
}

// SetEntID sets the "ent_id" field.
func (chu *CurrencyHistoryUpdate) SetEntID(u uuid.UUID) *CurrencyHistoryUpdate {
	chu.mutation.SetEntID(u)
	return chu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (chu *CurrencyHistoryUpdate) SetNillableEntID(u *uuid.UUID) *CurrencyHistoryUpdate {
	if u != nil {
		chu.SetEntID(*u)
	}
	return chu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (chu *CurrencyHistoryUpdate) SetCoinTypeID(u uuid.UUID) *CurrencyHistoryUpdate {
	chu.mutation.SetCoinTypeID(u)
	return chu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (chu *CurrencyHistoryUpdate) SetNillableCoinTypeID(u *uuid.UUID) *CurrencyHistoryUpdate {
	if u != nil {
		chu.SetCoinTypeID(*u)
	}
	return chu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (chu *CurrencyHistoryUpdate) ClearCoinTypeID() *CurrencyHistoryUpdate {
	chu.mutation.ClearCoinTypeID()
	return chu
}

// SetFeedType sets the "feed_type" field.
func (chu *CurrencyHistoryUpdate) SetFeedType(s string) *CurrencyHistoryUpdate {
	chu.mutation.SetFeedType(s)
	return chu
}

// SetNillableFeedType sets the "feed_type" field if the given value is not nil.
func (chu *CurrencyHistoryUpdate) SetNillableFeedType(s *string) *CurrencyHistoryUpdate {
	if s != nil {
		chu.SetFeedType(*s)
	}
	return chu
}

// ClearFeedType clears the value of the "feed_type" field.
func (chu *CurrencyHistoryUpdate) ClearFeedType() *CurrencyHistoryUpdate {
	chu.mutation.ClearFeedType()
	return chu
}

// SetMarketValueHigh sets the "market_value_high" field.
func (chu *CurrencyHistoryUpdate) SetMarketValueHigh(d decimal.Decimal) *CurrencyHistoryUpdate {
	chu.mutation.SetMarketValueHigh(d)
	return chu
}

// SetNillableMarketValueHigh sets the "market_value_high" field if the given value is not nil.
func (chu *CurrencyHistoryUpdate) SetNillableMarketValueHigh(d *decimal.Decimal) *CurrencyHistoryUpdate {
	if d != nil {
		chu.SetMarketValueHigh(*d)
	}
	return chu
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (chu *CurrencyHistoryUpdate) ClearMarketValueHigh() *CurrencyHistoryUpdate {
	chu.mutation.ClearMarketValueHigh()
	return chu
}

// SetMarketValueLow sets the "market_value_low" field.
func (chu *CurrencyHistoryUpdate) SetMarketValueLow(d decimal.Decimal) *CurrencyHistoryUpdate {
	chu.mutation.SetMarketValueLow(d)
	return chu
}

// SetNillableMarketValueLow sets the "market_value_low" field if the given value is not nil.
func (chu *CurrencyHistoryUpdate) SetNillableMarketValueLow(d *decimal.Decimal) *CurrencyHistoryUpdate {
	if d != nil {
		chu.SetMarketValueLow(*d)
	}
	return chu
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (chu *CurrencyHistoryUpdate) ClearMarketValueLow() *CurrencyHistoryUpdate {
	chu.mutation.ClearMarketValueLow()
	return chu
}

// Mutation returns the CurrencyHistoryMutation object of the builder.
func (chu *CurrencyHistoryUpdate) Mutation() *CurrencyHistoryMutation {
	return chu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (chu *CurrencyHistoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := chu.defaults(); err != nil {
		return 0, err
	}
	if len(chu.hooks) == 0 {
		affected, err = chu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CurrencyHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			chu.mutation = mutation
			affected, err = chu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(chu.hooks) - 1; i >= 0; i-- {
			if chu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = chu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, chu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (chu *CurrencyHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := chu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (chu *CurrencyHistoryUpdate) Exec(ctx context.Context) error {
	_, err := chu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chu *CurrencyHistoryUpdate) ExecX(ctx context.Context) {
	if err := chu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (chu *CurrencyHistoryUpdate) defaults() error {
	if _, ok := chu.mutation.UpdatedAt(); !ok {
		if currencyhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized currencyhistory.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := currencyhistory.UpdateDefaultUpdatedAt()
		chu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (chu *CurrencyHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CurrencyHistoryUpdate {
	chu.modifiers = append(chu.modifiers, modifiers...)
	return chu
}

func (chu *CurrencyHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   currencyhistory.Table,
			Columns: currencyhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: currencyhistory.FieldID,
			},
		},
	}
	if ps := chu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := chu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyhistory.FieldCreatedAt,
		})
	}
	if value, ok := chu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyhistory.FieldCreatedAt,
		})
	}
	if value, ok := chu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyhistory.FieldUpdatedAt,
		})
	}
	if value, ok := chu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyhistory.FieldUpdatedAt,
		})
	}
	if value, ok := chu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyhistory.FieldDeletedAt,
		})
	}
	if value, ok := chu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyhistory.FieldDeletedAt,
		})
	}
	if value, ok := chu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: currencyhistory.FieldEntID,
		})
	}
	if value, ok := chu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: currencyhistory.FieldCoinTypeID,
		})
	}
	if chu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: currencyhistory.FieldCoinTypeID,
		})
	}
	if value, ok := chu.mutation.FeedType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: currencyhistory.FieldFeedType,
		})
	}
	if chu.mutation.FeedTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: currencyhistory.FieldFeedType,
		})
	}
	if value, ok := chu.mutation.MarketValueHigh(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: currencyhistory.FieldMarketValueHigh,
		})
	}
	if chu.mutation.MarketValueHighCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: currencyhistory.FieldMarketValueHigh,
		})
	}
	if value, ok := chu.mutation.MarketValueLow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: currencyhistory.FieldMarketValueLow,
		})
	}
	if chu.mutation.MarketValueLowCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: currencyhistory.FieldMarketValueLow,
		})
	}
	_spec.Modifiers = chu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, chu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{currencyhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CurrencyHistoryUpdateOne is the builder for updating a single CurrencyHistory entity.
type CurrencyHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CurrencyHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (chuo *CurrencyHistoryUpdateOne) SetCreatedAt(u uint32) *CurrencyHistoryUpdateOne {
	chuo.mutation.ResetCreatedAt()
	chuo.mutation.SetCreatedAt(u)
	return chuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (chuo *CurrencyHistoryUpdateOne) SetNillableCreatedAt(u *uint32) *CurrencyHistoryUpdateOne {
	if u != nil {
		chuo.SetCreatedAt(*u)
	}
	return chuo
}

// AddCreatedAt adds u to the "created_at" field.
func (chuo *CurrencyHistoryUpdateOne) AddCreatedAt(u int32) *CurrencyHistoryUpdateOne {
	chuo.mutation.AddCreatedAt(u)
	return chuo
}

// SetUpdatedAt sets the "updated_at" field.
func (chuo *CurrencyHistoryUpdateOne) SetUpdatedAt(u uint32) *CurrencyHistoryUpdateOne {
	chuo.mutation.ResetUpdatedAt()
	chuo.mutation.SetUpdatedAt(u)
	return chuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (chuo *CurrencyHistoryUpdateOne) AddUpdatedAt(u int32) *CurrencyHistoryUpdateOne {
	chuo.mutation.AddUpdatedAt(u)
	return chuo
}

// SetDeletedAt sets the "deleted_at" field.
func (chuo *CurrencyHistoryUpdateOne) SetDeletedAt(u uint32) *CurrencyHistoryUpdateOne {
	chuo.mutation.ResetDeletedAt()
	chuo.mutation.SetDeletedAt(u)
	return chuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (chuo *CurrencyHistoryUpdateOne) SetNillableDeletedAt(u *uint32) *CurrencyHistoryUpdateOne {
	if u != nil {
		chuo.SetDeletedAt(*u)
	}
	return chuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (chuo *CurrencyHistoryUpdateOne) AddDeletedAt(u int32) *CurrencyHistoryUpdateOne {
	chuo.mutation.AddDeletedAt(u)
	return chuo
}

// SetEntID sets the "ent_id" field.
func (chuo *CurrencyHistoryUpdateOne) SetEntID(u uuid.UUID) *CurrencyHistoryUpdateOne {
	chuo.mutation.SetEntID(u)
	return chuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (chuo *CurrencyHistoryUpdateOne) SetNillableEntID(u *uuid.UUID) *CurrencyHistoryUpdateOne {
	if u != nil {
		chuo.SetEntID(*u)
	}
	return chuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (chuo *CurrencyHistoryUpdateOne) SetCoinTypeID(u uuid.UUID) *CurrencyHistoryUpdateOne {
	chuo.mutation.SetCoinTypeID(u)
	return chuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (chuo *CurrencyHistoryUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *CurrencyHistoryUpdateOne {
	if u != nil {
		chuo.SetCoinTypeID(*u)
	}
	return chuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (chuo *CurrencyHistoryUpdateOne) ClearCoinTypeID() *CurrencyHistoryUpdateOne {
	chuo.mutation.ClearCoinTypeID()
	return chuo
}

// SetFeedType sets the "feed_type" field.
func (chuo *CurrencyHistoryUpdateOne) SetFeedType(s string) *CurrencyHistoryUpdateOne {
	chuo.mutation.SetFeedType(s)
	return chuo
}

// SetNillableFeedType sets the "feed_type" field if the given value is not nil.
func (chuo *CurrencyHistoryUpdateOne) SetNillableFeedType(s *string) *CurrencyHistoryUpdateOne {
	if s != nil {
		chuo.SetFeedType(*s)
	}
	return chuo
}

// ClearFeedType clears the value of the "feed_type" field.
func (chuo *CurrencyHistoryUpdateOne) ClearFeedType() *CurrencyHistoryUpdateOne {
	chuo.mutation.ClearFeedType()
	return chuo
}

// SetMarketValueHigh sets the "market_value_high" field.
func (chuo *CurrencyHistoryUpdateOne) SetMarketValueHigh(d decimal.Decimal) *CurrencyHistoryUpdateOne {
	chuo.mutation.SetMarketValueHigh(d)
	return chuo
}

// SetNillableMarketValueHigh sets the "market_value_high" field if the given value is not nil.
func (chuo *CurrencyHistoryUpdateOne) SetNillableMarketValueHigh(d *decimal.Decimal) *CurrencyHistoryUpdateOne {
	if d != nil {
		chuo.SetMarketValueHigh(*d)
	}
	return chuo
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (chuo *CurrencyHistoryUpdateOne) ClearMarketValueHigh() *CurrencyHistoryUpdateOne {
	chuo.mutation.ClearMarketValueHigh()
	return chuo
}

// SetMarketValueLow sets the "market_value_low" field.
func (chuo *CurrencyHistoryUpdateOne) SetMarketValueLow(d decimal.Decimal) *CurrencyHistoryUpdateOne {
	chuo.mutation.SetMarketValueLow(d)
	return chuo
}

// SetNillableMarketValueLow sets the "market_value_low" field if the given value is not nil.
func (chuo *CurrencyHistoryUpdateOne) SetNillableMarketValueLow(d *decimal.Decimal) *CurrencyHistoryUpdateOne {
	if d != nil {
		chuo.SetMarketValueLow(*d)
	}
	return chuo
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (chuo *CurrencyHistoryUpdateOne) ClearMarketValueLow() *CurrencyHistoryUpdateOne {
	chuo.mutation.ClearMarketValueLow()
	return chuo
}

// Mutation returns the CurrencyHistoryMutation object of the builder.
func (chuo *CurrencyHistoryUpdateOne) Mutation() *CurrencyHistoryMutation {
	return chuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (chuo *CurrencyHistoryUpdateOne) Select(field string, fields ...string) *CurrencyHistoryUpdateOne {
	chuo.fields = append([]string{field}, fields...)
	return chuo
}

// Save executes the query and returns the updated CurrencyHistory entity.
func (chuo *CurrencyHistoryUpdateOne) Save(ctx context.Context) (*CurrencyHistory, error) {
	var (
		err  error
		node *CurrencyHistory
	)
	if err := chuo.defaults(); err != nil {
		return nil, err
	}
	if len(chuo.hooks) == 0 {
		node, err = chuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CurrencyHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			chuo.mutation = mutation
			node, err = chuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(chuo.hooks) - 1; i >= 0; i-- {
			if chuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = chuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, chuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CurrencyHistory)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CurrencyHistoryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (chuo *CurrencyHistoryUpdateOne) SaveX(ctx context.Context) *CurrencyHistory {
	node, err := chuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (chuo *CurrencyHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := chuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chuo *CurrencyHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := chuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (chuo *CurrencyHistoryUpdateOne) defaults() error {
	if _, ok := chuo.mutation.UpdatedAt(); !ok {
		if currencyhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized currencyhistory.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := currencyhistory.UpdateDefaultUpdatedAt()
		chuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (chuo *CurrencyHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CurrencyHistoryUpdateOne {
	chuo.modifiers = append(chuo.modifiers, modifiers...)
	return chuo
}

func (chuo *CurrencyHistoryUpdateOne) sqlSave(ctx context.Context) (_node *CurrencyHistory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   currencyhistory.Table,
			Columns: currencyhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: currencyhistory.FieldID,
			},
		},
	}
	id, ok := chuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CurrencyHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := chuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, currencyhistory.FieldID)
		for _, f := range fields {
			if !currencyhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != currencyhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := chuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := chuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyhistory.FieldCreatedAt,
		})
	}
	if value, ok := chuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyhistory.FieldCreatedAt,
		})
	}
	if value, ok := chuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyhistory.FieldUpdatedAt,
		})
	}
	if value, ok := chuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyhistory.FieldUpdatedAt,
		})
	}
	if value, ok := chuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyhistory.FieldDeletedAt,
		})
	}
	if value, ok := chuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: currencyhistory.FieldDeletedAt,
		})
	}
	if value, ok := chuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: currencyhistory.FieldEntID,
		})
	}
	if value, ok := chuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: currencyhistory.FieldCoinTypeID,
		})
	}
	if chuo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: currencyhistory.FieldCoinTypeID,
		})
	}
	if value, ok := chuo.mutation.FeedType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: currencyhistory.FieldFeedType,
		})
	}
	if chuo.mutation.FeedTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: currencyhistory.FieldFeedType,
		})
	}
	if value, ok := chuo.mutation.MarketValueHigh(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: currencyhistory.FieldMarketValueHigh,
		})
	}
	if chuo.mutation.MarketValueHighCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: currencyhistory.FieldMarketValueHigh,
		})
	}
	if value, ok := chuo.mutation.MarketValueLow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: currencyhistory.FieldMarketValueLow,
		})
	}
	if chuo.mutation.MarketValueLowCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: currencyhistory.FieldMarketValueLow,
		})
	}
	_spec.Modifiers = chuo.modifiers
	_node = &CurrencyHistory{config: chuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, chuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{currencyhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
