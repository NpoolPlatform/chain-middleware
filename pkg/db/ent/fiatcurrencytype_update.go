// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/fiatcurrencytype"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/predicate"
)

// FiatCurrencyTypeUpdate is the builder for updating FiatCurrencyType entities.
type FiatCurrencyTypeUpdate struct {
	config
	hooks     []Hook
	mutation  *FiatCurrencyTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FiatCurrencyTypeUpdate builder.
func (fctu *FiatCurrencyTypeUpdate) Where(ps ...predicate.FiatCurrencyType) *FiatCurrencyTypeUpdate {
	fctu.mutation.Where(ps...)
	return fctu
}

// SetCreatedAt sets the "created_at" field.
func (fctu *FiatCurrencyTypeUpdate) SetCreatedAt(u uint32) *FiatCurrencyTypeUpdate {
	fctu.mutation.ResetCreatedAt()
	fctu.mutation.SetCreatedAt(u)
	return fctu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fctu *FiatCurrencyTypeUpdate) SetNillableCreatedAt(u *uint32) *FiatCurrencyTypeUpdate {
	if u != nil {
		fctu.SetCreatedAt(*u)
	}
	return fctu
}

// AddCreatedAt adds u to the "created_at" field.
func (fctu *FiatCurrencyTypeUpdate) AddCreatedAt(u int32) *FiatCurrencyTypeUpdate {
	fctu.mutation.AddCreatedAt(u)
	return fctu
}

// SetUpdatedAt sets the "updated_at" field.
func (fctu *FiatCurrencyTypeUpdate) SetUpdatedAt(u uint32) *FiatCurrencyTypeUpdate {
	fctu.mutation.ResetUpdatedAt()
	fctu.mutation.SetUpdatedAt(u)
	return fctu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (fctu *FiatCurrencyTypeUpdate) AddUpdatedAt(u int32) *FiatCurrencyTypeUpdate {
	fctu.mutation.AddUpdatedAt(u)
	return fctu
}

// SetDeletedAt sets the "deleted_at" field.
func (fctu *FiatCurrencyTypeUpdate) SetDeletedAt(u uint32) *FiatCurrencyTypeUpdate {
	fctu.mutation.ResetDeletedAt()
	fctu.mutation.SetDeletedAt(u)
	return fctu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fctu *FiatCurrencyTypeUpdate) SetNillableDeletedAt(u *uint32) *FiatCurrencyTypeUpdate {
	if u != nil {
		fctu.SetDeletedAt(*u)
	}
	return fctu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (fctu *FiatCurrencyTypeUpdate) AddDeletedAt(u int32) *FiatCurrencyTypeUpdate {
	fctu.mutation.AddDeletedAt(u)
	return fctu
}

// SetName sets the "name" field.
func (fctu *FiatCurrencyTypeUpdate) SetName(s string) *FiatCurrencyTypeUpdate {
	fctu.mutation.SetName(s)
	return fctu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fctu *FiatCurrencyTypeUpdate) SetNillableName(s *string) *FiatCurrencyTypeUpdate {
	if s != nil {
		fctu.SetName(*s)
	}
	return fctu
}

// ClearName clears the value of the "name" field.
func (fctu *FiatCurrencyTypeUpdate) ClearName() *FiatCurrencyTypeUpdate {
	fctu.mutation.ClearName()
	return fctu
}

// SetLogo sets the "logo" field.
func (fctu *FiatCurrencyTypeUpdate) SetLogo(s string) *FiatCurrencyTypeUpdate {
	fctu.mutation.SetLogo(s)
	return fctu
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (fctu *FiatCurrencyTypeUpdate) SetNillableLogo(s *string) *FiatCurrencyTypeUpdate {
	if s != nil {
		fctu.SetLogo(*s)
	}
	return fctu
}

// ClearLogo clears the value of the "logo" field.
func (fctu *FiatCurrencyTypeUpdate) ClearLogo() *FiatCurrencyTypeUpdate {
	fctu.mutation.ClearLogo()
	return fctu
}

// Mutation returns the FiatCurrencyTypeMutation object of the builder.
func (fctu *FiatCurrencyTypeUpdate) Mutation() *FiatCurrencyTypeMutation {
	return fctu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fctu *FiatCurrencyTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := fctu.defaults(); err != nil {
		return 0, err
	}
	if len(fctu.hooks) == 0 {
		affected, err = fctu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FiatCurrencyTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fctu.mutation = mutation
			affected, err = fctu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fctu.hooks) - 1; i >= 0; i-- {
			if fctu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fctu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fctu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fctu *FiatCurrencyTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := fctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fctu *FiatCurrencyTypeUpdate) Exec(ctx context.Context) error {
	_, err := fctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fctu *FiatCurrencyTypeUpdate) ExecX(ctx context.Context) {
	if err := fctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fctu *FiatCurrencyTypeUpdate) defaults() error {
	if _, ok := fctu.mutation.UpdatedAt(); !ok {
		if fiatcurrencytype.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fiatcurrencytype.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fiatcurrencytype.UpdateDefaultUpdatedAt()
		fctu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fctu *FiatCurrencyTypeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FiatCurrencyTypeUpdate {
	fctu.modifiers = append(fctu.modifiers, modifiers...)
	return fctu
}

func (fctu *FiatCurrencyTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fiatcurrencytype.Table,
			Columns: fiatcurrencytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: fiatcurrencytype.FieldID,
			},
		},
	}
	if ps := fctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fctu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencytype.FieldCreatedAt,
		})
	}
	if value, ok := fctu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencytype.FieldCreatedAt,
		})
	}
	if value, ok := fctu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencytype.FieldUpdatedAt,
		})
	}
	if value, ok := fctu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencytype.FieldUpdatedAt,
		})
	}
	if value, ok := fctu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencytype.FieldDeletedAt,
		})
	}
	if value, ok := fctu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencytype.FieldDeletedAt,
		})
	}
	if value, ok := fctu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fiatcurrencytype.FieldName,
		})
	}
	if fctu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fiatcurrencytype.FieldName,
		})
	}
	if value, ok := fctu.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fiatcurrencytype.FieldLogo,
		})
	}
	if fctu.mutation.LogoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fiatcurrencytype.FieldLogo,
		})
	}
	_spec.Modifiers = fctu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, fctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fiatcurrencytype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FiatCurrencyTypeUpdateOne is the builder for updating a single FiatCurrencyType entity.
type FiatCurrencyTypeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FiatCurrencyTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (fctuo *FiatCurrencyTypeUpdateOne) SetCreatedAt(u uint32) *FiatCurrencyTypeUpdateOne {
	fctuo.mutation.ResetCreatedAt()
	fctuo.mutation.SetCreatedAt(u)
	return fctuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fctuo *FiatCurrencyTypeUpdateOne) SetNillableCreatedAt(u *uint32) *FiatCurrencyTypeUpdateOne {
	if u != nil {
		fctuo.SetCreatedAt(*u)
	}
	return fctuo
}

// AddCreatedAt adds u to the "created_at" field.
func (fctuo *FiatCurrencyTypeUpdateOne) AddCreatedAt(u int32) *FiatCurrencyTypeUpdateOne {
	fctuo.mutation.AddCreatedAt(u)
	return fctuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fctuo *FiatCurrencyTypeUpdateOne) SetUpdatedAt(u uint32) *FiatCurrencyTypeUpdateOne {
	fctuo.mutation.ResetUpdatedAt()
	fctuo.mutation.SetUpdatedAt(u)
	return fctuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (fctuo *FiatCurrencyTypeUpdateOne) AddUpdatedAt(u int32) *FiatCurrencyTypeUpdateOne {
	fctuo.mutation.AddUpdatedAt(u)
	return fctuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fctuo *FiatCurrencyTypeUpdateOne) SetDeletedAt(u uint32) *FiatCurrencyTypeUpdateOne {
	fctuo.mutation.ResetDeletedAt()
	fctuo.mutation.SetDeletedAt(u)
	return fctuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fctuo *FiatCurrencyTypeUpdateOne) SetNillableDeletedAt(u *uint32) *FiatCurrencyTypeUpdateOne {
	if u != nil {
		fctuo.SetDeletedAt(*u)
	}
	return fctuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (fctuo *FiatCurrencyTypeUpdateOne) AddDeletedAt(u int32) *FiatCurrencyTypeUpdateOne {
	fctuo.mutation.AddDeletedAt(u)
	return fctuo
}

// SetName sets the "name" field.
func (fctuo *FiatCurrencyTypeUpdateOne) SetName(s string) *FiatCurrencyTypeUpdateOne {
	fctuo.mutation.SetName(s)
	return fctuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fctuo *FiatCurrencyTypeUpdateOne) SetNillableName(s *string) *FiatCurrencyTypeUpdateOne {
	if s != nil {
		fctuo.SetName(*s)
	}
	return fctuo
}

// ClearName clears the value of the "name" field.
func (fctuo *FiatCurrencyTypeUpdateOne) ClearName() *FiatCurrencyTypeUpdateOne {
	fctuo.mutation.ClearName()
	return fctuo
}

// SetLogo sets the "logo" field.
func (fctuo *FiatCurrencyTypeUpdateOne) SetLogo(s string) *FiatCurrencyTypeUpdateOne {
	fctuo.mutation.SetLogo(s)
	return fctuo
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (fctuo *FiatCurrencyTypeUpdateOne) SetNillableLogo(s *string) *FiatCurrencyTypeUpdateOne {
	if s != nil {
		fctuo.SetLogo(*s)
	}
	return fctuo
}

// ClearLogo clears the value of the "logo" field.
func (fctuo *FiatCurrencyTypeUpdateOne) ClearLogo() *FiatCurrencyTypeUpdateOne {
	fctuo.mutation.ClearLogo()
	return fctuo
}

// Mutation returns the FiatCurrencyTypeMutation object of the builder.
func (fctuo *FiatCurrencyTypeUpdateOne) Mutation() *FiatCurrencyTypeMutation {
	return fctuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fctuo *FiatCurrencyTypeUpdateOne) Select(field string, fields ...string) *FiatCurrencyTypeUpdateOne {
	fctuo.fields = append([]string{field}, fields...)
	return fctuo
}

// Save executes the query and returns the updated FiatCurrencyType entity.
func (fctuo *FiatCurrencyTypeUpdateOne) Save(ctx context.Context) (*FiatCurrencyType, error) {
	var (
		err  error
		node *FiatCurrencyType
	)
	if err := fctuo.defaults(); err != nil {
		return nil, err
	}
	if len(fctuo.hooks) == 0 {
		node, err = fctuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FiatCurrencyTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fctuo.mutation = mutation
			node, err = fctuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fctuo.hooks) - 1; i >= 0; i-- {
			if fctuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fctuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fctuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FiatCurrencyType)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FiatCurrencyTypeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fctuo *FiatCurrencyTypeUpdateOne) SaveX(ctx context.Context) *FiatCurrencyType {
	node, err := fctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fctuo *FiatCurrencyTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := fctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fctuo *FiatCurrencyTypeUpdateOne) ExecX(ctx context.Context) {
	if err := fctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fctuo *FiatCurrencyTypeUpdateOne) defaults() error {
	if _, ok := fctuo.mutation.UpdatedAt(); !ok {
		if fiatcurrencytype.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fiatcurrencytype.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fiatcurrencytype.UpdateDefaultUpdatedAt()
		fctuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fctuo *FiatCurrencyTypeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FiatCurrencyTypeUpdateOne {
	fctuo.modifiers = append(fctuo.modifiers, modifiers...)
	return fctuo
}

func (fctuo *FiatCurrencyTypeUpdateOne) sqlSave(ctx context.Context) (_node *FiatCurrencyType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fiatcurrencytype.Table,
			Columns: fiatcurrencytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: fiatcurrencytype.FieldID,
			},
		},
	}
	id, ok := fctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FiatCurrencyType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fiatcurrencytype.FieldID)
		for _, f := range fields {
			if !fiatcurrencytype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fiatcurrencytype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fctuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencytype.FieldCreatedAt,
		})
	}
	if value, ok := fctuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencytype.FieldCreatedAt,
		})
	}
	if value, ok := fctuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencytype.FieldUpdatedAt,
		})
	}
	if value, ok := fctuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencytype.FieldUpdatedAt,
		})
	}
	if value, ok := fctuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencytype.FieldDeletedAt,
		})
	}
	if value, ok := fctuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencytype.FieldDeletedAt,
		})
	}
	if value, ok := fctuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fiatcurrencytype.FieldName,
		})
	}
	if fctuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fiatcurrencytype.FieldName,
		})
	}
	if value, ok := fctuo.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fiatcurrencytype.FieldLogo,
		})
	}
	if fctuo.mutation.LogoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fiatcurrencytype.FieldLogo,
		})
	}
	_spec.Modifiers = fctuo.modifiers
	_node = &FiatCurrencyType{config: fctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fiatcurrencytype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
