// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/chainbase"
)

// ChainBaseCreate is the builder for creating a ChainBase entity.
type ChainBaseCreate struct {
	config
	mutation *ChainBaseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cbc *ChainBaseCreate) SetCreatedAt(u uint32) *ChainBaseCreate {
	cbc.mutation.SetCreatedAt(u)
	return cbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cbc *ChainBaseCreate) SetNillableCreatedAt(u *uint32) *ChainBaseCreate {
	if u != nil {
		cbc.SetCreatedAt(*u)
	}
	return cbc
}

// SetUpdatedAt sets the "updated_at" field.
func (cbc *ChainBaseCreate) SetUpdatedAt(u uint32) *ChainBaseCreate {
	cbc.mutation.SetUpdatedAt(u)
	return cbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cbc *ChainBaseCreate) SetNillableUpdatedAt(u *uint32) *ChainBaseCreate {
	if u != nil {
		cbc.SetUpdatedAt(*u)
	}
	return cbc
}

// SetDeletedAt sets the "deleted_at" field.
func (cbc *ChainBaseCreate) SetDeletedAt(u uint32) *ChainBaseCreate {
	cbc.mutation.SetDeletedAt(u)
	return cbc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cbc *ChainBaseCreate) SetNillableDeletedAt(u *uint32) *ChainBaseCreate {
	if u != nil {
		cbc.SetDeletedAt(*u)
	}
	return cbc
}

// SetName sets the "name" field.
func (cbc *ChainBaseCreate) SetName(s string) *ChainBaseCreate {
	cbc.mutation.SetName(s)
	return cbc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cbc *ChainBaseCreate) SetNillableName(s *string) *ChainBaseCreate {
	if s != nil {
		cbc.SetName(*s)
	}
	return cbc
}

// SetLogo sets the "logo" field.
func (cbc *ChainBaseCreate) SetLogo(s string) *ChainBaseCreate {
	cbc.mutation.SetLogo(s)
	return cbc
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (cbc *ChainBaseCreate) SetNillableLogo(s *string) *ChainBaseCreate {
	if s != nil {
		cbc.SetLogo(*s)
	}
	return cbc
}

// SetNativeUnit sets the "native_unit" field.
func (cbc *ChainBaseCreate) SetNativeUnit(s string) *ChainBaseCreate {
	cbc.mutation.SetNativeUnit(s)
	return cbc
}

// SetNillableNativeUnit sets the "native_unit" field if the given value is not nil.
func (cbc *ChainBaseCreate) SetNillableNativeUnit(s *string) *ChainBaseCreate {
	if s != nil {
		cbc.SetNativeUnit(*s)
	}
	return cbc
}

// SetAtomicUnit sets the "atomic_unit" field.
func (cbc *ChainBaseCreate) SetAtomicUnit(s string) *ChainBaseCreate {
	cbc.mutation.SetAtomicUnit(s)
	return cbc
}

// SetNillableAtomicUnit sets the "atomic_unit" field if the given value is not nil.
func (cbc *ChainBaseCreate) SetNillableAtomicUnit(s *string) *ChainBaseCreate {
	if s != nil {
		cbc.SetAtomicUnit(*s)
	}
	return cbc
}

// SetUnitExp sets the "unit_exp" field.
func (cbc *ChainBaseCreate) SetUnitExp(u uint32) *ChainBaseCreate {
	cbc.mutation.SetUnitExp(u)
	return cbc
}

// SetNillableUnitExp sets the "unit_exp" field if the given value is not nil.
func (cbc *ChainBaseCreate) SetNillableUnitExp(u *uint32) *ChainBaseCreate {
	if u != nil {
		cbc.SetUnitExp(*u)
	}
	return cbc
}

// SetEnv sets the "env" field.
func (cbc *ChainBaseCreate) SetEnv(s string) *ChainBaseCreate {
	cbc.mutation.SetEnv(s)
	return cbc
}

// SetNillableEnv sets the "env" field if the given value is not nil.
func (cbc *ChainBaseCreate) SetNillableEnv(s *string) *ChainBaseCreate {
	if s != nil {
		cbc.SetEnv(*s)
	}
	return cbc
}

// SetChainID sets the "chain_id" field.
func (cbc *ChainBaseCreate) SetChainID(s string) *ChainBaseCreate {
	cbc.mutation.SetChainID(s)
	return cbc
}

// SetNillableChainID sets the "chain_id" field if the given value is not nil.
func (cbc *ChainBaseCreate) SetNillableChainID(s *string) *ChainBaseCreate {
	if s != nil {
		cbc.SetChainID(*s)
	}
	return cbc
}

// SetNickname sets the "nickname" field.
func (cbc *ChainBaseCreate) SetNickname(s string) *ChainBaseCreate {
	cbc.mutation.SetNickname(s)
	return cbc
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (cbc *ChainBaseCreate) SetNillableNickname(s *string) *ChainBaseCreate {
	if s != nil {
		cbc.SetNickname(*s)
	}
	return cbc
}

// SetGasType sets the "gas_type" field.
func (cbc *ChainBaseCreate) SetGasType(s string) *ChainBaseCreate {
	cbc.mutation.SetGasType(s)
	return cbc
}

// SetNillableGasType sets the "gas_type" field if the given value is not nil.
func (cbc *ChainBaseCreate) SetNillableGasType(s *string) *ChainBaseCreate {
	if s != nil {
		cbc.SetGasType(*s)
	}
	return cbc
}

// SetID sets the "id" field.
func (cbc *ChainBaseCreate) SetID(u uint32) *ChainBaseCreate {
	cbc.mutation.SetID(u)
	return cbc
}

// Mutation returns the ChainBaseMutation object of the builder.
func (cbc *ChainBaseCreate) Mutation() *ChainBaseMutation {
	return cbc.mutation
}

// Save creates the ChainBase in the database.
func (cbc *ChainBaseCreate) Save(ctx context.Context) (*ChainBase, error) {
	var (
		err  error
		node *ChainBase
	)
	if err := cbc.defaults(); err != nil {
		return nil, err
	}
	if len(cbc.hooks) == 0 {
		if err = cbc.check(); err != nil {
			return nil, err
		}
		node, err = cbc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChainBaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cbc.check(); err != nil {
				return nil, err
			}
			cbc.mutation = mutation
			if node, err = cbc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cbc.hooks) - 1; i >= 0; i-- {
			if cbc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cbc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cbc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ChainBase)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ChainBaseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cbc *ChainBaseCreate) SaveX(ctx context.Context) *ChainBase {
	v, err := cbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cbc *ChainBaseCreate) Exec(ctx context.Context) error {
	_, err := cbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbc *ChainBaseCreate) ExecX(ctx context.Context) {
	if err := cbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cbc *ChainBaseCreate) defaults() error {
	if _, ok := cbc.mutation.CreatedAt(); !ok {
		if chainbase.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized chainbase.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := chainbase.DefaultCreatedAt()
		cbc.mutation.SetCreatedAt(v)
	}
	if _, ok := cbc.mutation.UpdatedAt(); !ok {
		if chainbase.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized chainbase.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := chainbase.DefaultUpdatedAt()
		cbc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cbc.mutation.DeletedAt(); !ok {
		if chainbase.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized chainbase.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := chainbase.DefaultDeletedAt()
		cbc.mutation.SetDeletedAt(v)
	}
	if _, ok := cbc.mutation.Name(); !ok {
		v := chainbase.DefaultName
		cbc.mutation.SetName(v)
	}
	if _, ok := cbc.mutation.Logo(); !ok {
		v := chainbase.DefaultLogo
		cbc.mutation.SetLogo(v)
	}
	if _, ok := cbc.mutation.NativeUnit(); !ok {
		v := chainbase.DefaultNativeUnit
		cbc.mutation.SetNativeUnit(v)
	}
	if _, ok := cbc.mutation.AtomicUnit(); !ok {
		v := chainbase.DefaultAtomicUnit
		cbc.mutation.SetAtomicUnit(v)
	}
	if _, ok := cbc.mutation.UnitExp(); !ok {
		v := chainbase.DefaultUnitExp
		cbc.mutation.SetUnitExp(v)
	}
	if _, ok := cbc.mutation.Env(); !ok {
		v := chainbase.DefaultEnv
		cbc.mutation.SetEnv(v)
	}
	if _, ok := cbc.mutation.ChainID(); !ok {
		v := chainbase.DefaultChainID
		cbc.mutation.SetChainID(v)
	}
	if _, ok := cbc.mutation.Nickname(); !ok {
		v := chainbase.DefaultNickname
		cbc.mutation.SetNickname(v)
	}
	if _, ok := cbc.mutation.GasType(); !ok {
		v := chainbase.DefaultGasType
		cbc.mutation.SetGasType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cbc *ChainBaseCreate) check() error {
	if _, ok := cbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ChainBase.created_at"`)}
	}
	if _, ok := cbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ChainBase.updated_at"`)}
	}
	if _, ok := cbc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "ChainBase.deleted_at"`)}
	}
	return nil
}

func (cbc *ChainBaseCreate) sqlSave(ctx context.Context) (*ChainBase, error) {
	_node, _spec := cbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (cbc *ChainBaseCreate) createSpec() (*ChainBase, *sqlgraph.CreateSpec) {
	var (
		_node = &ChainBase{config: cbc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: chainbase.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: chainbase.FieldID,
			},
		}
	)
	_spec.OnConflict = cbc.conflict
	if id, ok := cbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cbc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: chainbase.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cbc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: chainbase.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cbc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: chainbase.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := cbc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chainbase.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cbc.mutation.Logo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chainbase.FieldLogo,
		})
		_node.Logo = value
	}
	if value, ok := cbc.mutation.NativeUnit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chainbase.FieldNativeUnit,
		})
		_node.NativeUnit = value
	}
	if value, ok := cbc.mutation.AtomicUnit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chainbase.FieldAtomicUnit,
		})
		_node.AtomicUnit = value
	}
	if value, ok := cbc.mutation.UnitExp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: chainbase.FieldUnitExp,
		})
		_node.UnitExp = value
	}
	if value, ok := cbc.mutation.Env(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chainbase.FieldEnv,
		})
		_node.Env = value
	}
	if value, ok := cbc.mutation.ChainID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chainbase.FieldChainID,
		})
		_node.ChainID = value
	}
	if value, ok := cbc.mutation.Nickname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chainbase.FieldNickname,
		})
		_node.Nickname = value
	}
	if value, ok := cbc.mutation.GasType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chainbase.FieldGasType,
		})
		_node.GasType = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChainBase.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChainBaseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cbc *ChainBaseCreate) OnConflict(opts ...sql.ConflictOption) *ChainBaseUpsertOne {
	cbc.conflict = opts
	return &ChainBaseUpsertOne{
		create: cbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChainBase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cbc *ChainBaseCreate) OnConflictColumns(columns ...string) *ChainBaseUpsertOne {
	cbc.conflict = append(cbc.conflict, sql.ConflictColumns(columns...))
	return &ChainBaseUpsertOne{
		create: cbc,
	}
}

type (
	// ChainBaseUpsertOne is the builder for "upsert"-ing
	//  one ChainBase node.
	ChainBaseUpsertOne struct {
		create *ChainBaseCreate
	}

	// ChainBaseUpsert is the "OnConflict" setter.
	ChainBaseUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *ChainBaseUpsert) SetCreatedAt(v uint32) *ChainBaseUpsert {
	u.Set(chainbase.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ChainBaseUpsert) UpdateCreatedAt() *ChainBaseUpsert {
	u.SetExcluded(chainbase.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ChainBaseUpsert) AddCreatedAt(v uint32) *ChainBaseUpsert {
	u.Add(chainbase.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChainBaseUpsert) SetUpdatedAt(v uint32) *ChainBaseUpsert {
	u.Set(chainbase.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChainBaseUpsert) UpdateUpdatedAt() *ChainBaseUpsert {
	u.SetExcluded(chainbase.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ChainBaseUpsert) AddUpdatedAt(v uint32) *ChainBaseUpsert {
	u.Add(chainbase.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ChainBaseUpsert) SetDeletedAt(v uint32) *ChainBaseUpsert {
	u.Set(chainbase.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ChainBaseUpsert) UpdateDeletedAt() *ChainBaseUpsert {
	u.SetExcluded(chainbase.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ChainBaseUpsert) AddDeletedAt(v uint32) *ChainBaseUpsert {
	u.Add(chainbase.FieldDeletedAt, v)
	return u
}

// SetName sets the "name" field.
func (u *ChainBaseUpsert) SetName(v string) *ChainBaseUpsert {
	u.Set(chainbase.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ChainBaseUpsert) UpdateName() *ChainBaseUpsert {
	u.SetExcluded(chainbase.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *ChainBaseUpsert) ClearName() *ChainBaseUpsert {
	u.SetNull(chainbase.FieldName)
	return u
}

// SetLogo sets the "logo" field.
func (u *ChainBaseUpsert) SetLogo(v string) *ChainBaseUpsert {
	u.Set(chainbase.FieldLogo, v)
	return u
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *ChainBaseUpsert) UpdateLogo() *ChainBaseUpsert {
	u.SetExcluded(chainbase.FieldLogo)
	return u
}

// ClearLogo clears the value of the "logo" field.
func (u *ChainBaseUpsert) ClearLogo() *ChainBaseUpsert {
	u.SetNull(chainbase.FieldLogo)
	return u
}

// SetNativeUnit sets the "native_unit" field.
func (u *ChainBaseUpsert) SetNativeUnit(v string) *ChainBaseUpsert {
	u.Set(chainbase.FieldNativeUnit, v)
	return u
}

// UpdateNativeUnit sets the "native_unit" field to the value that was provided on create.
func (u *ChainBaseUpsert) UpdateNativeUnit() *ChainBaseUpsert {
	u.SetExcluded(chainbase.FieldNativeUnit)
	return u
}

// ClearNativeUnit clears the value of the "native_unit" field.
func (u *ChainBaseUpsert) ClearNativeUnit() *ChainBaseUpsert {
	u.SetNull(chainbase.FieldNativeUnit)
	return u
}

// SetAtomicUnit sets the "atomic_unit" field.
func (u *ChainBaseUpsert) SetAtomicUnit(v string) *ChainBaseUpsert {
	u.Set(chainbase.FieldAtomicUnit, v)
	return u
}

// UpdateAtomicUnit sets the "atomic_unit" field to the value that was provided on create.
func (u *ChainBaseUpsert) UpdateAtomicUnit() *ChainBaseUpsert {
	u.SetExcluded(chainbase.FieldAtomicUnit)
	return u
}

// ClearAtomicUnit clears the value of the "atomic_unit" field.
func (u *ChainBaseUpsert) ClearAtomicUnit() *ChainBaseUpsert {
	u.SetNull(chainbase.FieldAtomicUnit)
	return u
}

// SetUnitExp sets the "unit_exp" field.
func (u *ChainBaseUpsert) SetUnitExp(v uint32) *ChainBaseUpsert {
	u.Set(chainbase.FieldUnitExp, v)
	return u
}

// UpdateUnitExp sets the "unit_exp" field to the value that was provided on create.
func (u *ChainBaseUpsert) UpdateUnitExp() *ChainBaseUpsert {
	u.SetExcluded(chainbase.FieldUnitExp)
	return u
}

// AddUnitExp adds v to the "unit_exp" field.
func (u *ChainBaseUpsert) AddUnitExp(v uint32) *ChainBaseUpsert {
	u.Add(chainbase.FieldUnitExp, v)
	return u
}

// ClearUnitExp clears the value of the "unit_exp" field.
func (u *ChainBaseUpsert) ClearUnitExp() *ChainBaseUpsert {
	u.SetNull(chainbase.FieldUnitExp)
	return u
}

// SetEnv sets the "env" field.
func (u *ChainBaseUpsert) SetEnv(v string) *ChainBaseUpsert {
	u.Set(chainbase.FieldEnv, v)
	return u
}

// UpdateEnv sets the "env" field to the value that was provided on create.
func (u *ChainBaseUpsert) UpdateEnv() *ChainBaseUpsert {
	u.SetExcluded(chainbase.FieldEnv)
	return u
}

// ClearEnv clears the value of the "env" field.
func (u *ChainBaseUpsert) ClearEnv() *ChainBaseUpsert {
	u.SetNull(chainbase.FieldEnv)
	return u
}

// SetChainID sets the "chain_id" field.
func (u *ChainBaseUpsert) SetChainID(v string) *ChainBaseUpsert {
	u.Set(chainbase.FieldChainID, v)
	return u
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *ChainBaseUpsert) UpdateChainID() *ChainBaseUpsert {
	u.SetExcluded(chainbase.FieldChainID)
	return u
}

// ClearChainID clears the value of the "chain_id" field.
func (u *ChainBaseUpsert) ClearChainID() *ChainBaseUpsert {
	u.SetNull(chainbase.FieldChainID)
	return u
}

// SetNickname sets the "nickname" field.
func (u *ChainBaseUpsert) SetNickname(v string) *ChainBaseUpsert {
	u.Set(chainbase.FieldNickname, v)
	return u
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *ChainBaseUpsert) UpdateNickname() *ChainBaseUpsert {
	u.SetExcluded(chainbase.FieldNickname)
	return u
}

// ClearNickname clears the value of the "nickname" field.
func (u *ChainBaseUpsert) ClearNickname() *ChainBaseUpsert {
	u.SetNull(chainbase.FieldNickname)
	return u
}

// SetGasType sets the "gas_type" field.
func (u *ChainBaseUpsert) SetGasType(v string) *ChainBaseUpsert {
	u.Set(chainbase.FieldGasType, v)
	return u
}

// UpdateGasType sets the "gas_type" field to the value that was provided on create.
func (u *ChainBaseUpsert) UpdateGasType() *ChainBaseUpsert {
	u.SetExcluded(chainbase.FieldGasType)
	return u
}

// ClearGasType clears the value of the "gas_type" field.
func (u *ChainBaseUpsert) ClearGasType() *ChainBaseUpsert {
	u.SetNull(chainbase.FieldGasType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ChainBase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(chainbase.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ChainBaseUpsertOne) UpdateNewValues() *ChainBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(chainbase.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.ChainBase.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ChainBaseUpsertOne) Ignore() *ChainBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChainBaseUpsertOne) DoNothing() *ChainBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChainBaseCreate.OnConflict
// documentation for more info.
func (u *ChainBaseUpsertOne) Update(set func(*ChainBaseUpsert)) *ChainBaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChainBaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ChainBaseUpsertOne) SetCreatedAt(v uint32) *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ChainBaseUpsertOne) AddCreatedAt(v uint32) *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ChainBaseUpsertOne) UpdateCreatedAt() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChainBaseUpsertOne) SetUpdatedAt(v uint32) *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ChainBaseUpsertOne) AddUpdatedAt(v uint32) *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChainBaseUpsertOne) UpdateUpdatedAt() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ChainBaseUpsertOne) SetDeletedAt(v uint32) *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ChainBaseUpsertOne) AddDeletedAt(v uint32) *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ChainBaseUpsertOne) UpdateDeletedAt() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *ChainBaseUpsertOne) SetName(v string) *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ChainBaseUpsertOne) UpdateName() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *ChainBaseUpsertOne) ClearName() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.ClearName()
	})
}

// SetLogo sets the "logo" field.
func (u *ChainBaseUpsertOne) SetLogo(v string) *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *ChainBaseUpsertOne) UpdateLogo() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *ChainBaseUpsertOne) ClearLogo() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.ClearLogo()
	})
}

// SetNativeUnit sets the "native_unit" field.
func (u *ChainBaseUpsertOne) SetNativeUnit(v string) *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetNativeUnit(v)
	})
}

// UpdateNativeUnit sets the "native_unit" field to the value that was provided on create.
func (u *ChainBaseUpsertOne) UpdateNativeUnit() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateNativeUnit()
	})
}

// ClearNativeUnit clears the value of the "native_unit" field.
func (u *ChainBaseUpsertOne) ClearNativeUnit() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.ClearNativeUnit()
	})
}

// SetAtomicUnit sets the "atomic_unit" field.
func (u *ChainBaseUpsertOne) SetAtomicUnit(v string) *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetAtomicUnit(v)
	})
}

// UpdateAtomicUnit sets the "atomic_unit" field to the value that was provided on create.
func (u *ChainBaseUpsertOne) UpdateAtomicUnit() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateAtomicUnit()
	})
}

// ClearAtomicUnit clears the value of the "atomic_unit" field.
func (u *ChainBaseUpsertOne) ClearAtomicUnit() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.ClearAtomicUnit()
	})
}

// SetUnitExp sets the "unit_exp" field.
func (u *ChainBaseUpsertOne) SetUnitExp(v uint32) *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetUnitExp(v)
	})
}

// AddUnitExp adds v to the "unit_exp" field.
func (u *ChainBaseUpsertOne) AddUnitExp(v uint32) *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.AddUnitExp(v)
	})
}

// UpdateUnitExp sets the "unit_exp" field to the value that was provided on create.
func (u *ChainBaseUpsertOne) UpdateUnitExp() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateUnitExp()
	})
}

// ClearUnitExp clears the value of the "unit_exp" field.
func (u *ChainBaseUpsertOne) ClearUnitExp() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.ClearUnitExp()
	})
}

// SetEnv sets the "env" field.
func (u *ChainBaseUpsertOne) SetEnv(v string) *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetEnv(v)
	})
}

// UpdateEnv sets the "env" field to the value that was provided on create.
func (u *ChainBaseUpsertOne) UpdateEnv() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateEnv()
	})
}

// ClearEnv clears the value of the "env" field.
func (u *ChainBaseUpsertOne) ClearEnv() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.ClearEnv()
	})
}

// SetChainID sets the "chain_id" field.
func (u *ChainBaseUpsertOne) SetChainID(v string) *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *ChainBaseUpsertOne) UpdateChainID() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateChainID()
	})
}

// ClearChainID clears the value of the "chain_id" field.
func (u *ChainBaseUpsertOne) ClearChainID() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.ClearChainID()
	})
}

// SetNickname sets the "nickname" field.
func (u *ChainBaseUpsertOne) SetNickname(v string) *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *ChainBaseUpsertOne) UpdateNickname() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateNickname()
	})
}

// ClearNickname clears the value of the "nickname" field.
func (u *ChainBaseUpsertOne) ClearNickname() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.ClearNickname()
	})
}

// SetGasType sets the "gas_type" field.
func (u *ChainBaseUpsertOne) SetGasType(v string) *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetGasType(v)
	})
}

// UpdateGasType sets the "gas_type" field to the value that was provided on create.
func (u *ChainBaseUpsertOne) UpdateGasType() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateGasType()
	})
}

// ClearGasType clears the value of the "gas_type" field.
func (u *ChainBaseUpsertOne) ClearGasType() *ChainBaseUpsertOne {
	return u.Update(func(s *ChainBaseUpsert) {
		s.ClearGasType()
	})
}

// Exec executes the query.
func (u *ChainBaseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChainBaseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChainBaseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChainBaseUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChainBaseUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChainBaseCreateBulk is the builder for creating many ChainBase entities in bulk.
type ChainBaseCreateBulk struct {
	config
	builders []*ChainBaseCreate
	conflict []sql.ConflictOption
}

// Save creates the ChainBase entities in the database.
func (cbcb *ChainBaseCreateBulk) Save(ctx context.Context) ([]*ChainBase, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cbcb.builders))
	nodes := make([]*ChainBase, len(cbcb.builders))
	mutators := make([]Mutator, len(cbcb.builders))
	for i := range cbcb.builders {
		func(i int, root context.Context) {
			builder := cbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChainBaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cbcb *ChainBaseCreateBulk) SaveX(ctx context.Context) []*ChainBase {
	v, err := cbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cbcb *ChainBaseCreateBulk) Exec(ctx context.Context) error {
	_, err := cbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbcb *ChainBaseCreateBulk) ExecX(ctx context.Context) {
	if err := cbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChainBase.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChainBaseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cbcb *ChainBaseCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChainBaseUpsertBulk {
	cbcb.conflict = opts
	return &ChainBaseUpsertBulk{
		create: cbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChainBase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cbcb *ChainBaseCreateBulk) OnConflictColumns(columns ...string) *ChainBaseUpsertBulk {
	cbcb.conflict = append(cbcb.conflict, sql.ConflictColumns(columns...))
	return &ChainBaseUpsertBulk{
		create: cbcb,
	}
}

// ChainBaseUpsertBulk is the builder for "upsert"-ing
// a bulk of ChainBase nodes.
type ChainBaseUpsertBulk struct {
	create *ChainBaseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ChainBase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(chainbase.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ChainBaseUpsertBulk) UpdateNewValues() *ChainBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(chainbase.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChainBase.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ChainBaseUpsertBulk) Ignore() *ChainBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChainBaseUpsertBulk) DoNothing() *ChainBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChainBaseCreateBulk.OnConflict
// documentation for more info.
func (u *ChainBaseUpsertBulk) Update(set func(*ChainBaseUpsert)) *ChainBaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChainBaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ChainBaseUpsertBulk) SetCreatedAt(v uint32) *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ChainBaseUpsertBulk) AddCreatedAt(v uint32) *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ChainBaseUpsertBulk) UpdateCreatedAt() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChainBaseUpsertBulk) SetUpdatedAt(v uint32) *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ChainBaseUpsertBulk) AddUpdatedAt(v uint32) *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChainBaseUpsertBulk) UpdateUpdatedAt() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ChainBaseUpsertBulk) SetDeletedAt(v uint32) *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ChainBaseUpsertBulk) AddDeletedAt(v uint32) *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ChainBaseUpsertBulk) UpdateDeletedAt() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *ChainBaseUpsertBulk) SetName(v string) *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ChainBaseUpsertBulk) UpdateName() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *ChainBaseUpsertBulk) ClearName() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.ClearName()
	})
}

// SetLogo sets the "logo" field.
func (u *ChainBaseUpsertBulk) SetLogo(v string) *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *ChainBaseUpsertBulk) UpdateLogo() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *ChainBaseUpsertBulk) ClearLogo() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.ClearLogo()
	})
}

// SetNativeUnit sets the "native_unit" field.
func (u *ChainBaseUpsertBulk) SetNativeUnit(v string) *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetNativeUnit(v)
	})
}

// UpdateNativeUnit sets the "native_unit" field to the value that was provided on create.
func (u *ChainBaseUpsertBulk) UpdateNativeUnit() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateNativeUnit()
	})
}

// ClearNativeUnit clears the value of the "native_unit" field.
func (u *ChainBaseUpsertBulk) ClearNativeUnit() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.ClearNativeUnit()
	})
}

// SetAtomicUnit sets the "atomic_unit" field.
func (u *ChainBaseUpsertBulk) SetAtomicUnit(v string) *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetAtomicUnit(v)
	})
}

// UpdateAtomicUnit sets the "atomic_unit" field to the value that was provided on create.
func (u *ChainBaseUpsertBulk) UpdateAtomicUnit() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateAtomicUnit()
	})
}

// ClearAtomicUnit clears the value of the "atomic_unit" field.
func (u *ChainBaseUpsertBulk) ClearAtomicUnit() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.ClearAtomicUnit()
	})
}

// SetUnitExp sets the "unit_exp" field.
func (u *ChainBaseUpsertBulk) SetUnitExp(v uint32) *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetUnitExp(v)
	})
}

// AddUnitExp adds v to the "unit_exp" field.
func (u *ChainBaseUpsertBulk) AddUnitExp(v uint32) *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.AddUnitExp(v)
	})
}

// UpdateUnitExp sets the "unit_exp" field to the value that was provided on create.
func (u *ChainBaseUpsertBulk) UpdateUnitExp() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateUnitExp()
	})
}

// ClearUnitExp clears the value of the "unit_exp" field.
func (u *ChainBaseUpsertBulk) ClearUnitExp() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.ClearUnitExp()
	})
}

// SetEnv sets the "env" field.
func (u *ChainBaseUpsertBulk) SetEnv(v string) *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetEnv(v)
	})
}

// UpdateEnv sets the "env" field to the value that was provided on create.
func (u *ChainBaseUpsertBulk) UpdateEnv() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateEnv()
	})
}

// ClearEnv clears the value of the "env" field.
func (u *ChainBaseUpsertBulk) ClearEnv() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.ClearEnv()
	})
}

// SetChainID sets the "chain_id" field.
func (u *ChainBaseUpsertBulk) SetChainID(v string) *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *ChainBaseUpsertBulk) UpdateChainID() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateChainID()
	})
}

// ClearChainID clears the value of the "chain_id" field.
func (u *ChainBaseUpsertBulk) ClearChainID() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.ClearChainID()
	})
}

// SetNickname sets the "nickname" field.
func (u *ChainBaseUpsertBulk) SetNickname(v string) *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *ChainBaseUpsertBulk) UpdateNickname() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateNickname()
	})
}

// ClearNickname clears the value of the "nickname" field.
func (u *ChainBaseUpsertBulk) ClearNickname() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.ClearNickname()
	})
}

// SetGasType sets the "gas_type" field.
func (u *ChainBaseUpsertBulk) SetGasType(v string) *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.SetGasType(v)
	})
}

// UpdateGasType sets the "gas_type" field to the value that was provided on create.
func (u *ChainBaseUpsertBulk) UpdateGasType() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.UpdateGasType()
	})
}

// ClearGasType clears the value of the "gas_type" field.
func (u *ChainBaseUpsertBulk) ClearGasType() *ChainBaseUpsertBulk {
	return u.Update(func(s *ChainBaseUpsert) {
		s.ClearGasType()
	})
}

// Exec executes the query.
func (u *ChainBaseUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ChainBaseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChainBaseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChainBaseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
