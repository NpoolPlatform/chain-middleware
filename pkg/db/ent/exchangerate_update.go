// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/exchangerate"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ExchangeRateUpdate is the builder for updating ExchangeRate entities.
type ExchangeRateUpdate struct {
	config
	hooks     []Hook
	mutation  *ExchangeRateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ExchangeRateUpdate builder.
func (eru *ExchangeRateUpdate) Where(ps ...predicate.ExchangeRate) *ExchangeRateUpdate {
	eru.mutation.Where(ps...)
	return eru
}

// SetCreatedAt sets the "created_at" field.
func (eru *ExchangeRateUpdate) SetCreatedAt(u uint32) *ExchangeRateUpdate {
	eru.mutation.ResetCreatedAt()
	eru.mutation.SetCreatedAt(u)
	return eru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eru *ExchangeRateUpdate) SetNillableCreatedAt(u *uint32) *ExchangeRateUpdate {
	if u != nil {
		eru.SetCreatedAt(*u)
	}
	return eru
}

// AddCreatedAt adds u to the "created_at" field.
func (eru *ExchangeRateUpdate) AddCreatedAt(u int32) *ExchangeRateUpdate {
	eru.mutation.AddCreatedAt(u)
	return eru
}

// SetUpdatedAt sets the "updated_at" field.
func (eru *ExchangeRateUpdate) SetUpdatedAt(u uint32) *ExchangeRateUpdate {
	eru.mutation.ResetUpdatedAt()
	eru.mutation.SetUpdatedAt(u)
	return eru
}

// AddUpdatedAt adds u to the "updated_at" field.
func (eru *ExchangeRateUpdate) AddUpdatedAt(u int32) *ExchangeRateUpdate {
	eru.mutation.AddUpdatedAt(u)
	return eru
}

// SetDeletedAt sets the "deleted_at" field.
func (eru *ExchangeRateUpdate) SetDeletedAt(u uint32) *ExchangeRateUpdate {
	eru.mutation.ResetDeletedAt()
	eru.mutation.SetDeletedAt(u)
	return eru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eru *ExchangeRateUpdate) SetNillableDeletedAt(u *uint32) *ExchangeRateUpdate {
	if u != nil {
		eru.SetDeletedAt(*u)
	}
	return eru
}

// AddDeletedAt adds u to the "deleted_at" field.
func (eru *ExchangeRateUpdate) AddDeletedAt(u int32) *ExchangeRateUpdate {
	eru.mutation.AddDeletedAt(u)
	return eru
}

// SetEntID sets the "ent_id" field.
func (eru *ExchangeRateUpdate) SetEntID(u uuid.UUID) *ExchangeRateUpdate {
	eru.mutation.SetEntID(u)
	return eru
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (eru *ExchangeRateUpdate) SetNillableEntID(u *uuid.UUID) *ExchangeRateUpdate {
	if u != nil {
		eru.SetEntID(*u)
	}
	return eru
}

// SetAppID sets the "app_id" field.
func (eru *ExchangeRateUpdate) SetAppID(u uuid.UUID) *ExchangeRateUpdate {
	eru.mutation.SetAppID(u)
	return eru
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (eru *ExchangeRateUpdate) SetNillableAppID(u *uuid.UUID) *ExchangeRateUpdate {
	if u != nil {
		eru.SetAppID(*u)
	}
	return eru
}

// ClearAppID clears the value of the "app_id" field.
func (eru *ExchangeRateUpdate) ClearAppID() *ExchangeRateUpdate {
	eru.mutation.ClearAppID()
	return eru
}

// SetCoinTypeID sets the "coin_type_id" field.
func (eru *ExchangeRateUpdate) SetCoinTypeID(u uuid.UUID) *ExchangeRateUpdate {
	eru.mutation.SetCoinTypeID(u)
	return eru
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (eru *ExchangeRateUpdate) SetNillableCoinTypeID(u *uuid.UUID) *ExchangeRateUpdate {
	if u != nil {
		eru.SetCoinTypeID(*u)
	}
	return eru
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (eru *ExchangeRateUpdate) ClearCoinTypeID() *ExchangeRateUpdate {
	eru.mutation.ClearCoinTypeID()
	return eru
}

// SetMarketValue sets the "market_value" field.
func (eru *ExchangeRateUpdate) SetMarketValue(d decimal.Decimal) *ExchangeRateUpdate {
	eru.mutation.SetMarketValue(d)
	return eru
}

// SetNillableMarketValue sets the "market_value" field if the given value is not nil.
func (eru *ExchangeRateUpdate) SetNillableMarketValue(d *decimal.Decimal) *ExchangeRateUpdate {
	if d != nil {
		eru.SetMarketValue(*d)
	}
	return eru
}

// ClearMarketValue clears the value of the "market_value" field.
func (eru *ExchangeRateUpdate) ClearMarketValue() *ExchangeRateUpdate {
	eru.mutation.ClearMarketValue()
	return eru
}

// SetSettleValue sets the "settle_value" field.
func (eru *ExchangeRateUpdate) SetSettleValue(d decimal.Decimal) *ExchangeRateUpdate {
	eru.mutation.SetSettleValue(d)
	return eru
}

// SetNillableSettleValue sets the "settle_value" field if the given value is not nil.
func (eru *ExchangeRateUpdate) SetNillableSettleValue(d *decimal.Decimal) *ExchangeRateUpdate {
	if d != nil {
		eru.SetSettleValue(*d)
	}
	return eru
}

// ClearSettleValue clears the value of the "settle_value" field.
func (eru *ExchangeRateUpdate) ClearSettleValue() *ExchangeRateUpdate {
	eru.mutation.ClearSettleValue()
	return eru
}

// SetSettlePercent sets the "settle_percent" field.
func (eru *ExchangeRateUpdate) SetSettlePercent(u uint32) *ExchangeRateUpdate {
	eru.mutation.ResetSettlePercent()
	eru.mutation.SetSettlePercent(u)
	return eru
}

// SetNillableSettlePercent sets the "settle_percent" field if the given value is not nil.
func (eru *ExchangeRateUpdate) SetNillableSettlePercent(u *uint32) *ExchangeRateUpdate {
	if u != nil {
		eru.SetSettlePercent(*u)
	}
	return eru
}

// AddSettlePercent adds u to the "settle_percent" field.
func (eru *ExchangeRateUpdate) AddSettlePercent(u int32) *ExchangeRateUpdate {
	eru.mutation.AddSettlePercent(u)
	return eru
}

// ClearSettlePercent clears the value of the "settle_percent" field.
func (eru *ExchangeRateUpdate) ClearSettlePercent() *ExchangeRateUpdate {
	eru.mutation.ClearSettlePercent()
	return eru
}

// SetSettleTips sets the "settle_tips" field.
func (eru *ExchangeRateUpdate) SetSettleTips(s []string) *ExchangeRateUpdate {
	eru.mutation.SetSettleTips(s)
	return eru
}

// ClearSettleTips clears the value of the "settle_tips" field.
func (eru *ExchangeRateUpdate) ClearSettleTips() *ExchangeRateUpdate {
	eru.mutation.ClearSettleTips()
	return eru
}

// SetSetter sets the "setter" field.
func (eru *ExchangeRateUpdate) SetSetter(u uuid.UUID) *ExchangeRateUpdate {
	eru.mutation.SetSetter(u)
	return eru
}

// SetNillableSetter sets the "setter" field if the given value is not nil.
func (eru *ExchangeRateUpdate) SetNillableSetter(u *uuid.UUID) *ExchangeRateUpdate {
	if u != nil {
		eru.SetSetter(*u)
	}
	return eru
}

// ClearSetter clears the value of the "setter" field.
func (eru *ExchangeRateUpdate) ClearSetter() *ExchangeRateUpdate {
	eru.mutation.ClearSetter()
	return eru
}

// Mutation returns the ExchangeRateMutation object of the builder.
func (eru *ExchangeRateUpdate) Mutation() *ExchangeRateMutation {
	return eru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eru *ExchangeRateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := eru.defaults(); err != nil {
		return 0, err
	}
	if len(eru.hooks) == 0 {
		affected, err = eru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExchangeRateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eru.mutation = mutation
			affected, err = eru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eru.hooks) - 1; i >= 0; i-- {
			if eru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eru *ExchangeRateUpdate) SaveX(ctx context.Context) int {
	affected, err := eru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eru *ExchangeRateUpdate) Exec(ctx context.Context) error {
	_, err := eru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eru *ExchangeRateUpdate) ExecX(ctx context.Context) {
	if err := eru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eru *ExchangeRateUpdate) defaults() error {
	if _, ok := eru.mutation.UpdatedAt(); !ok {
		if exchangerate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized exchangerate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := exchangerate.UpdateDefaultUpdatedAt()
		eru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eru *ExchangeRateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ExchangeRateUpdate {
	eru.modifiers = append(eru.modifiers, modifiers...)
	return eru
}

func (eru *ExchangeRateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   exchangerate.Table,
			Columns: exchangerate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: exchangerate.FieldID,
			},
		},
	}
	if ps := eru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldCreatedAt,
		})
	}
	if value, ok := eru.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldCreatedAt,
		})
	}
	if value, ok := eru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldUpdatedAt,
		})
	}
	if value, ok := eru.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldUpdatedAt,
		})
	}
	if value, ok := eru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldDeletedAt,
		})
	}
	if value, ok := eru.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldDeletedAt,
		})
	}
	if value, ok := eru.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: exchangerate.FieldEntID,
		})
	}
	if value, ok := eru.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: exchangerate.FieldAppID,
		})
	}
	if eru.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: exchangerate.FieldAppID,
		})
	}
	if value, ok := eru.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: exchangerate.FieldCoinTypeID,
		})
	}
	if eru.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: exchangerate.FieldCoinTypeID,
		})
	}
	if value, ok := eru.mutation.MarketValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: exchangerate.FieldMarketValue,
		})
	}
	if eru.mutation.MarketValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: exchangerate.FieldMarketValue,
		})
	}
	if value, ok := eru.mutation.SettleValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: exchangerate.FieldSettleValue,
		})
	}
	if eru.mutation.SettleValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: exchangerate.FieldSettleValue,
		})
	}
	if value, ok := eru.mutation.SettlePercent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldSettlePercent,
		})
	}
	if value, ok := eru.mutation.AddedSettlePercent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldSettlePercent,
		})
	}
	if eru.mutation.SettlePercentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: exchangerate.FieldSettlePercent,
		})
	}
	if value, ok := eru.mutation.SettleTips(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: exchangerate.FieldSettleTips,
		})
	}
	if eru.mutation.SettleTipsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: exchangerate.FieldSettleTips,
		})
	}
	if value, ok := eru.mutation.Setter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: exchangerate.FieldSetter,
		})
	}
	if eru.mutation.SetterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: exchangerate.FieldSetter,
		})
	}
	_spec.Modifiers = eru.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, eru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exchangerate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ExchangeRateUpdateOne is the builder for updating a single ExchangeRate entity.
type ExchangeRateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ExchangeRateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (eruo *ExchangeRateUpdateOne) SetCreatedAt(u uint32) *ExchangeRateUpdateOne {
	eruo.mutation.ResetCreatedAt()
	eruo.mutation.SetCreatedAt(u)
	return eruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eruo *ExchangeRateUpdateOne) SetNillableCreatedAt(u *uint32) *ExchangeRateUpdateOne {
	if u != nil {
		eruo.SetCreatedAt(*u)
	}
	return eruo
}

// AddCreatedAt adds u to the "created_at" field.
func (eruo *ExchangeRateUpdateOne) AddCreatedAt(u int32) *ExchangeRateUpdateOne {
	eruo.mutation.AddCreatedAt(u)
	return eruo
}

// SetUpdatedAt sets the "updated_at" field.
func (eruo *ExchangeRateUpdateOne) SetUpdatedAt(u uint32) *ExchangeRateUpdateOne {
	eruo.mutation.ResetUpdatedAt()
	eruo.mutation.SetUpdatedAt(u)
	return eruo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (eruo *ExchangeRateUpdateOne) AddUpdatedAt(u int32) *ExchangeRateUpdateOne {
	eruo.mutation.AddUpdatedAt(u)
	return eruo
}

// SetDeletedAt sets the "deleted_at" field.
func (eruo *ExchangeRateUpdateOne) SetDeletedAt(u uint32) *ExchangeRateUpdateOne {
	eruo.mutation.ResetDeletedAt()
	eruo.mutation.SetDeletedAt(u)
	return eruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eruo *ExchangeRateUpdateOne) SetNillableDeletedAt(u *uint32) *ExchangeRateUpdateOne {
	if u != nil {
		eruo.SetDeletedAt(*u)
	}
	return eruo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (eruo *ExchangeRateUpdateOne) AddDeletedAt(u int32) *ExchangeRateUpdateOne {
	eruo.mutation.AddDeletedAt(u)
	return eruo
}

// SetEntID sets the "ent_id" field.
func (eruo *ExchangeRateUpdateOne) SetEntID(u uuid.UUID) *ExchangeRateUpdateOne {
	eruo.mutation.SetEntID(u)
	return eruo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (eruo *ExchangeRateUpdateOne) SetNillableEntID(u *uuid.UUID) *ExchangeRateUpdateOne {
	if u != nil {
		eruo.SetEntID(*u)
	}
	return eruo
}

// SetAppID sets the "app_id" field.
func (eruo *ExchangeRateUpdateOne) SetAppID(u uuid.UUID) *ExchangeRateUpdateOne {
	eruo.mutation.SetAppID(u)
	return eruo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (eruo *ExchangeRateUpdateOne) SetNillableAppID(u *uuid.UUID) *ExchangeRateUpdateOne {
	if u != nil {
		eruo.SetAppID(*u)
	}
	return eruo
}

// ClearAppID clears the value of the "app_id" field.
func (eruo *ExchangeRateUpdateOne) ClearAppID() *ExchangeRateUpdateOne {
	eruo.mutation.ClearAppID()
	return eruo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (eruo *ExchangeRateUpdateOne) SetCoinTypeID(u uuid.UUID) *ExchangeRateUpdateOne {
	eruo.mutation.SetCoinTypeID(u)
	return eruo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (eruo *ExchangeRateUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *ExchangeRateUpdateOne {
	if u != nil {
		eruo.SetCoinTypeID(*u)
	}
	return eruo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (eruo *ExchangeRateUpdateOne) ClearCoinTypeID() *ExchangeRateUpdateOne {
	eruo.mutation.ClearCoinTypeID()
	return eruo
}

// SetMarketValue sets the "market_value" field.
func (eruo *ExchangeRateUpdateOne) SetMarketValue(d decimal.Decimal) *ExchangeRateUpdateOne {
	eruo.mutation.SetMarketValue(d)
	return eruo
}

// SetNillableMarketValue sets the "market_value" field if the given value is not nil.
func (eruo *ExchangeRateUpdateOne) SetNillableMarketValue(d *decimal.Decimal) *ExchangeRateUpdateOne {
	if d != nil {
		eruo.SetMarketValue(*d)
	}
	return eruo
}

// ClearMarketValue clears the value of the "market_value" field.
func (eruo *ExchangeRateUpdateOne) ClearMarketValue() *ExchangeRateUpdateOne {
	eruo.mutation.ClearMarketValue()
	return eruo
}

// SetSettleValue sets the "settle_value" field.
func (eruo *ExchangeRateUpdateOne) SetSettleValue(d decimal.Decimal) *ExchangeRateUpdateOne {
	eruo.mutation.SetSettleValue(d)
	return eruo
}

// SetNillableSettleValue sets the "settle_value" field if the given value is not nil.
func (eruo *ExchangeRateUpdateOne) SetNillableSettleValue(d *decimal.Decimal) *ExchangeRateUpdateOne {
	if d != nil {
		eruo.SetSettleValue(*d)
	}
	return eruo
}

// ClearSettleValue clears the value of the "settle_value" field.
func (eruo *ExchangeRateUpdateOne) ClearSettleValue() *ExchangeRateUpdateOne {
	eruo.mutation.ClearSettleValue()
	return eruo
}

// SetSettlePercent sets the "settle_percent" field.
func (eruo *ExchangeRateUpdateOne) SetSettlePercent(u uint32) *ExchangeRateUpdateOne {
	eruo.mutation.ResetSettlePercent()
	eruo.mutation.SetSettlePercent(u)
	return eruo
}

// SetNillableSettlePercent sets the "settle_percent" field if the given value is not nil.
func (eruo *ExchangeRateUpdateOne) SetNillableSettlePercent(u *uint32) *ExchangeRateUpdateOne {
	if u != nil {
		eruo.SetSettlePercent(*u)
	}
	return eruo
}

// AddSettlePercent adds u to the "settle_percent" field.
func (eruo *ExchangeRateUpdateOne) AddSettlePercent(u int32) *ExchangeRateUpdateOne {
	eruo.mutation.AddSettlePercent(u)
	return eruo
}

// ClearSettlePercent clears the value of the "settle_percent" field.
func (eruo *ExchangeRateUpdateOne) ClearSettlePercent() *ExchangeRateUpdateOne {
	eruo.mutation.ClearSettlePercent()
	return eruo
}

// SetSettleTips sets the "settle_tips" field.
func (eruo *ExchangeRateUpdateOne) SetSettleTips(s []string) *ExchangeRateUpdateOne {
	eruo.mutation.SetSettleTips(s)
	return eruo
}

// ClearSettleTips clears the value of the "settle_tips" field.
func (eruo *ExchangeRateUpdateOne) ClearSettleTips() *ExchangeRateUpdateOne {
	eruo.mutation.ClearSettleTips()
	return eruo
}

// SetSetter sets the "setter" field.
func (eruo *ExchangeRateUpdateOne) SetSetter(u uuid.UUID) *ExchangeRateUpdateOne {
	eruo.mutation.SetSetter(u)
	return eruo
}

// SetNillableSetter sets the "setter" field if the given value is not nil.
func (eruo *ExchangeRateUpdateOne) SetNillableSetter(u *uuid.UUID) *ExchangeRateUpdateOne {
	if u != nil {
		eruo.SetSetter(*u)
	}
	return eruo
}

// ClearSetter clears the value of the "setter" field.
func (eruo *ExchangeRateUpdateOne) ClearSetter() *ExchangeRateUpdateOne {
	eruo.mutation.ClearSetter()
	return eruo
}

// Mutation returns the ExchangeRateMutation object of the builder.
func (eruo *ExchangeRateUpdateOne) Mutation() *ExchangeRateMutation {
	return eruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eruo *ExchangeRateUpdateOne) Select(field string, fields ...string) *ExchangeRateUpdateOne {
	eruo.fields = append([]string{field}, fields...)
	return eruo
}

// Save executes the query and returns the updated ExchangeRate entity.
func (eruo *ExchangeRateUpdateOne) Save(ctx context.Context) (*ExchangeRate, error) {
	var (
		err  error
		node *ExchangeRate
	)
	if err := eruo.defaults(); err != nil {
		return nil, err
	}
	if len(eruo.hooks) == 0 {
		node, err = eruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExchangeRateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eruo.mutation = mutation
			node, err = eruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(eruo.hooks) - 1; i >= 0; i-- {
			if eruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, eruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ExchangeRate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ExchangeRateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (eruo *ExchangeRateUpdateOne) SaveX(ctx context.Context) *ExchangeRate {
	node, err := eruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eruo *ExchangeRateUpdateOne) Exec(ctx context.Context) error {
	_, err := eruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eruo *ExchangeRateUpdateOne) ExecX(ctx context.Context) {
	if err := eruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eruo *ExchangeRateUpdateOne) defaults() error {
	if _, ok := eruo.mutation.UpdatedAt(); !ok {
		if exchangerate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized exchangerate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := exchangerate.UpdateDefaultUpdatedAt()
		eruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eruo *ExchangeRateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ExchangeRateUpdateOne {
	eruo.modifiers = append(eruo.modifiers, modifiers...)
	return eruo
}

func (eruo *ExchangeRateUpdateOne) sqlSave(ctx context.Context) (_node *ExchangeRate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   exchangerate.Table,
			Columns: exchangerate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: exchangerate.FieldID,
			},
		},
	}
	id, ok := eruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExchangeRate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exchangerate.FieldID)
		for _, f := range fields {
			if !exchangerate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exchangerate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldCreatedAt,
		})
	}
	if value, ok := eruo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldCreatedAt,
		})
	}
	if value, ok := eruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldUpdatedAt,
		})
	}
	if value, ok := eruo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldUpdatedAt,
		})
	}
	if value, ok := eruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldDeletedAt,
		})
	}
	if value, ok := eruo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldDeletedAt,
		})
	}
	if value, ok := eruo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: exchangerate.FieldEntID,
		})
	}
	if value, ok := eruo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: exchangerate.FieldAppID,
		})
	}
	if eruo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: exchangerate.FieldAppID,
		})
	}
	if value, ok := eruo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: exchangerate.FieldCoinTypeID,
		})
	}
	if eruo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: exchangerate.FieldCoinTypeID,
		})
	}
	if value, ok := eruo.mutation.MarketValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: exchangerate.FieldMarketValue,
		})
	}
	if eruo.mutation.MarketValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: exchangerate.FieldMarketValue,
		})
	}
	if value, ok := eruo.mutation.SettleValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: exchangerate.FieldSettleValue,
		})
	}
	if eruo.mutation.SettleValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: exchangerate.FieldSettleValue,
		})
	}
	if value, ok := eruo.mutation.SettlePercent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldSettlePercent,
		})
	}
	if value, ok := eruo.mutation.AddedSettlePercent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldSettlePercent,
		})
	}
	if eruo.mutation.SettlePercentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: exchangerate.FieldSettlePercent,
		})
	}
	if value, ok := eruo.mutation.SettleTips(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: exchangerate.FieldSettleTips,
		})
	}
	if eruo.mutation.SettleTipsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: exchangerate.FieldSettleTips,
		})
	}
	if value, ok := eruo.mutation.Setter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: exchangerate.FieldSetter,
		})
	}
	if eruo.mutation.SetterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: exchangerate.FieldSetter,
		})
	}
	_spec.Modifiers = eruo.modifiers
	_node = &ExchangeRate{config: eruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exchangerate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
