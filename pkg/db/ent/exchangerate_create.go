// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/exchangerate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ExchangeRateCreate is the builder for creating a ExchangeRate entity.
type ExchangeRateCreate struct {
	config
	mutation *ExchangeRateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (erc *ExchangeRateCreate) SetCreatedAt(u uint32) *ExchangeRateCreate {
	erc.mutation.SetCreatedAt(u)
	return erc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (erc *ExchangeRateCreate) SetNillableCreatedAt(u *uint32) *ExchangeRateCreate {
	if u != nil {
		erc.SetCreatedAt(*u)
	}
	return erc
}

// SetUpdatedAt sets the "updated_at" field.
func (erc *ExchangeRateCreate) SetUpdatedAt(u uint32) *ExchangeRateCreate {
	erc.mutation.SetUpdatedAt(u)
	return erc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (erc *ExchangeRateCreate) SetNillableUpdatedAt(u *uint32) *ExchangeRateCreate {
	if u != nil {
		erc.SetUpdatedAt(*u)
	}
	return erc
}

// SetDeletedAt sets the "deleted_at" field.
func (erc *ExchangeRateCreate) SetDeletedAt(u uint32) *ExchangeRateCreate {
	erc.mutation.SetDeletedAt(u)
	return erc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (erc *ExchangeRateCreate) SetNillableDeletedAt(u *uint32) *ExchangeRateCreate {
	if u != nil {
		erc.SetDeletedAt(*u)
	}
	return erc
}

// SetEntID sets the "ent_id" field.
func (erc *ExchangeRateCreate) SetEntID(u uuid.UUID) *ExchangeRateCreate {
	erc.mutation.SetEntID(u)
	return erc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (erc *ExchangeRateCreate) SetNillableEntID(u *uuid.UUID) *ExchangeRateCreate {
	if u != nil {
		erc.SetEntID(*u)
	}
	return erc
}

// SetAppID sets the "app_id" field.
func (erc *ExchangeRateCreate) SetAppID(u uuid.UUID) *ExchangeRateCreate {
	erc.mutation.SetAppID(u)
	return erc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (erc *ExchangeRateCreate) SetNillableAppID(u *uuid.UUID) *ExchangeRateCreate {
	if u != nil {
		erc.SetAppID(*u)
	}
	return erc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (erc *ExchangeRateCreate) SetCoinTypeID(u uuid.UUID) *ExchangeRateCreate {
	erc.mutation.SetCoinTypeID(u)
	return erc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (erc *ExchangeRateCreate) SetNillableCoinTypeID(u *uuid.UUID) *ExchangeRateCreate {
	if u != nil {
		erc.SetCoinTypeID(*u)
	}
	return erc
}

// SetMarketValue sets the "market_value" field.
func (erc *ExchangeRateCreate) SetMarketValue(d decimal.Decimal) *ExchangeRateCreate {
	erc.mutation.SetMarketValue(d)
	return erc
}

// SetNillableMarketValue sets the "market_value" field if the given value is not nil.
func (erc *ExchangeRateCreate) SetNillableMarketValue(d *decimal.Decimal) *ExchangeRateCreate {
	if d != nil {
		erc.SetMarketValue(*d)
	}
	return erc
}

// SetSettleValue sets the "settle_value" field.
func (erc *ExchangeRateCreate) SetSettleValue(d decimal.Decimal) *ExchangeRateCreate {
	erc.mutation.SetSettleValue(d)
	return erc
}

// SetNillableSettleValue sets the "settle_value" field if the given value is not nil.
func (erc *ExchangeRateCreate) SetNillableSettleValue(d *decimal.Decimal) *ExchangeRateCreate {
	if d != nil {
		erc.SetSettleValue(*d)
	}
	return erc
}

// SetSettlePercent sets the "settle_percent" field.
func (erc *ExchangeRateCreate) SetSettlePercent(u uint32) *ExchangeRateCreate {
	erc.mutation.SetSettlePercent(u)
	return erc
}

// SetNillableSettlePercent sets the "settle_percent" field if the given value is not nil.
func (erc *ExchangeRateCreate) SetNillableSettlePercent(u *uint32) *ExchangeRateCreate {
	if u != nil {
		erc.SetSettlePercent(*u)
	}
	return erc
}

// SetSettleTips sets the "settle_tips" field.
func (erc *ExchangeRateCreate) SetSettleTips(s []string) *ExchangeRateCreate {
	erc.mutation.SetSettleTips(s)
	return erc
}

// SetSetter sets the "setter" field.
func (erc *ExchangeRateCreate) SetSetter(u uuid.UUID) *ExchangeRateCreate {
	erc.mutation.SetSetter(u)
	return erc
}

// SetNillableSetter sets the "setter" field if the given value is not nil.
func (erc *ExchangeRateCreate) SetNillableSetter(u *uuid.UUID) *ExchangeRateCreate {
	if u != nil {
		erc.SetSetter(*u)
	}
	return erc
}

// SetID sets the "id" field.
func (erc *ExchangeRateCreate) SetID(i int) *ExchangeRateCreate {
	erc.mutation.SetID(i)
	return erc
}

// Mutation returns the ExchangeRateMutation object of the builder.
func (erc *ExchangeRateCreate) Mutation() *ExchangeRateMutation {
	return erc.mutation
}

// Save creates the ExchangeRate in the database.
func (erc *ExchangeRateCreate) Save(ctx context.Context) (*ExchangeRate, error) {
	var (
		err  error
		node *ExchangeRate
	)
	if err := erc.defaults(); err != nil {
		return nil, err
	}
	if len(erc.hooks) == 0 {
		if err = erc.check(); err != nil {
			return nil, err
		}
		node, err = erc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExchangeRateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = erc.check(); err != nil {
				return nil, err
			}
			erc.mutation = mutation
			if node, err = erc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(erc.hooks) - 1; i >= 0; i-- {
			if erc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = erc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, erc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ExchangeRate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ExchangeRateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (erc *ExchangeRateCreate) SaveX(ctx context.Context) *ExchangeRate {
	v, err := erc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (erc *ExchangeRateCreate) Exec(ctx context.Context) error {
	_, err := erc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (erc *ExchangeRateCreate) ExecX(ctx context.Context) {
	if err := erc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (erc *ExchangeRateCreate) defaults() error {
	if _, ok := erc.mutation.CreatedAt(); !ok {
		if exchangerate.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized exchangerate.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := exchangerate.DefaultCreatedAt()
		erc.mutation.SetCreatedAt(v)
	}
	if _, ok := erc.mutation.UpdatedAt(); !ok {
		if exchangerate.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized exchangerate.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := exchangerate.DefaultUpdatedAt()
		erc.mutation.SetUpdatedAt(v)
	}
	if _, ok := erc.mutation.DeletedAt(); !ok {
		if exchangerate.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized exchangerate.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := exchangerate.DefaultDeletedAt()
		erc.mutation.SetDeletedAt(v)
	}
	if _, ok := erc.mutation.EntID(); !ok {
		if exchangerate.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized exchangerate.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := exchangerate.DefaultEntID()
		erc.mutation.SetEntID(v)
	}
	if _, ok := erc.mutation.AppID(); !ok {
		if exchangerate.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized exchangerate.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := exchangerate.DefaultAppID()
		erc.mutation.SetAppID(v)
	}
	if _, ok := erc.mutation.CoinTypeID(); !ok {
		if exchangerate.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized exchangerate.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := exchangerate.DefaultCoinTypeID()
		erc.mutation.SetCoinTypeID(v)
	}
	if _, ok := erc.mutation.MarketValue(); !ok {
		v := exchangerate.DefaultMarketValue
		erc.mutation.SetMarketValue(v)
	}
	if _, ok := erc.mutation.SettleValue(); !ok {
		v := exchangerate.DefaultSettleValue
		erc.mutation.SetSettleValue(v)
	}
	if _, ok := erc.mutation.SettlePercent(); !ok {
		v := exchangerate.DefaultSettlePercent
		erc.mutation.SetSettlePercent(v)
	}
	if _, ok := erc.mutation.SettleTips(); !ok {
		v := exchangerate.DefaultSettleTips
		erc.mutation.SetSettleTips(v)
	}
	if _, ok := erc.mutation.Setter(); !ok {
		if exchangerate.DefaultSetter == nil {
			return fmt.Errorf("ent: uninitialized exchangerate.DefaultSetter (forgotten import ent/runtime?)")
		}
		v := exchangerate.DefaultSetter()
		erc.mutation.SetSetter(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (erc *ExchangeRateCreate) check() error {
	if _, ok := erc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ExchangeRate.created_at"`)}
	}
	if _, ok := erc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ExchangeRate.updated_at"`)}
	}
	if _, ok := erc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "ExchangeRate.deleted_at"`)}
	}
	if _, ok := erc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "ExchangeRate.ent_id"`)}
	}
	return nil
}

func (erc *ExchangeRateCreate) sqlSave(ctx context.Context) (*ExchangeRate, error) {
	_node, _spec := erc.createSpec()
	if err := sqlgraph.CreateNode(ctx, erc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (erc *ExchangeRateCreate) createSpec() (*ExchangeRate, *sqlgraph.CreateSpec) {
	var (
		_node = &ExchangeRate{config: erc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: exchangerate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: exchangerate.FieldID,
			},
		}
	)
	_spec.OnConflict = erc.conflict
	if id, ok := erc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := erc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := erc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := erc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := erc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: exchangerate.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := erc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: exchangerate.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := erc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: exchangerate.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := erc.mutation.MarketValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: exchangerate.FieldMarketValue,
		})
		_node.MarketValue = value
	}
	if value, ok := erc.mutation.SettleValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: exchangerate.FieldSettleValue,
		})
		_node.SettleValue = value
	}
	if value, ok := erc.mutation.SettlePercent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: exchangerate.FieldSettlePercent,
		})
		_node.SettlePercent = value
	}
	if value, ok := erc.mutation.SettleTips(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: exchangerate.FieldSettleTips,
		})
		_node.SettleTips = value
	}
	if value, ok := erc.mutation.Setter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: exchangerate.FieldSetter,
		})
		_node.Setter = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ExchangeRate.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExchangeRateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (erc *ExchangeRateCreate) OnConflict(opts ...sql.ConflictOption) *ExchangeRateUpsertOne {
	erc.conflict = opts
	return &ExchangeRateUpsertOne{
		create: erc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ExchangeRate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (erc *ExchangeRateCreate) OnConflictColumns(columns ...string) *ExchangeRateUpsertOne {
	erc.conflict = append(erc.conflict, sql.ConflictColumns(columns...))
	return &ExchangeRateUpsertOne{
		create: erc,
	}
}

type (
	// ExchangeRateUpsertOne is the builder for "upsert"-ing
	//  one ExchangeRate node.
	ExchangeRateUpsertOne struct {
		create *ExchangeRateCreate
	}

	// ExchangeRateUpsert is the "OnConflict" setter.
	ExchangeRateUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *ExchangeRateUpsert) SetCreatedAt(v uint32) *ExchangeRateUpsert {
	u.Set(exchangerate.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ExchangeRateUpsert) UpdateCreatedAt() *ExchangeRateUpsert {
	u.SetExcluded(exchangerate.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ExchangeRateUpsert) AddCreatedAt(v uint32) *ExchangeRateUpsert {
	u.Add(exchangerate.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExchangeRateUpsert) SetUpdatedAt(v uint32) *ExchangeRateUpsert {
	u.Set(exchangerate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExchangeRateUpsert) UpdateUpdatedAt() *ExchangeRateUpsert {
	u.SetExcluded(exchangerate.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ExchangeRateUpsert) AddUpdatedAt(v uint32) *ExchangeRateUpsert {
	u.Add(exchangerate.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExchangeRateUpsert) SetDeletedAt(v uint32) *ExchangeRateUpsert {
	u.Set(exchangerate.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExchangeRateUpsert) UpdateDeletedAt() *ExchangeRateUpsert {
	u.SetExcluded(exchangerate.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ExchangeRateUpsert) AddDeletedAt(v uint32) *ExchangeRateUpsert {
	u.Add(exchangerate.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *ExchangeRateUpsert) SetEntID(v uuid.UUID) *ExchangeRateUpsert {
	u.Set(exchangerate.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *ExchangeRateUpsert) UpdateEntID() *ExchangeRateUpsert {
	u.SetExcluded(exchangerate.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *ExchangeRateUpsert) SetAppID(v uuid.UUID) *ExchangeRateUpsert {
	u.Set(exchangerate.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ExchangeRateUpsert) UpdateAppID() *ExchangeRateUpsert {
	u.SetExcluded(exchangerate.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *ExchangeRateUpsert) ClearAppID() *ExchangeRateUpsert {
	u.SetNull(exchangerate.FieldAppID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *ExchangeRateUpsert) SetCoinTypeID(v uuid.UUID) *ExchangeRateUpsert {
	u.Set(exchangerate.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *ExchangeRateUpsert) UpdateCoinTypeID() *ExchangeRateUpsert {
	u.SetExcluded(exchangerate.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *ExchangeRateUpsert) ClearCoinTypeID() *ExchangeRateUpsert {
	u.SetNull(exchangerate.FieldCoinTypeID)
	return u
}

// SetMarketValue sets the "market_value" field.
func (u *ExchangeRateUpsert) SetMarketValue(v decimal.Decimal) *ExchangeRateUpsert {
	u.Set(exchangerate.FieldMarketValue, v)
	return u
}

// UpdateMarketValue sets the "market_value" field to the value that was provided on create.
func (u *ExchangeRateUpsert) UpdateMarketValue() *ExchangeRateUpsert {
	u.SetExcluded(exchangerate.FieldMarketValue)
	return u
}

// ClearMarketValue clears the value of the "market_value" field.
func (u *ExchangeRateUpsert) ClearMarketValue() *ExchangeRateUpsert {
	u.SetNull(exchangerate.FieldMarketValue)
	return u
}

// SetSettleValue sets the "settle_value" field.
func (u *ExchangeRateUpsert) SetSettleValue(v decimal.Decimal) *ExchangeRateUpsert {
	u.Set(exchangerate.FieldSettleValue, v)
	return u
}

// UpdateSettleValue sets the "settle_value" field to the value that was provided on create.
func (u *ExchangeRateUpsert) UpdateSettleValue() *ExchangeRateUpsert {
	u.SetExcluded(exchangerate.FieldSettleValue)
	return u
}

// ClearSettleValue clears the value of the "settle_value" field.
func (u *ExchangeRateUpsert) ClearSettleValue() *ExchangeRateUpsert {
	u.SetNull(exchangerate.FieldSettleValue)
	return u
}

// SetSettlePercent sets the "settle_percent" field.
func (u *ExchangeRateUpsert) SetSettlePercent(v uint32) *ExchangeRateUpsert {
	u.Set(exchangerate.FieldSettlePercent, v)
	return u
}

// UpdateSettlePercent sets the "settle_percent" field to the value that was provided on create.
func (u *ExchangeRateUpsert) UpdateSettlePercent() *ExchangeRateUpsert {
	u.SetExcluded(exchangerate.FieldSettlePercent)
	return u
}

// AddSettlePercent adds v to the "settle_percent" field.
func (u *ExchangeRateUpsert) AddSettlePercent(v uint32) *ExchangeRateUpsert {
	u.Add(exchangerate.FieldSettlePercent, v)
	return u
}

// ClearSettlePercent clears the value of the "settle_percent" field.
func (u *ExchangeRateUpsert) ClearSettlePercent() *ExchangeRateUpsert {
	u.SetNull(exchangerate.FieldSettlePercent)
	return u
}

// SetSettleTips sets the "settle_tips" field.
func (u *ExchangeRateUpsert) SetSettleTips(v []string) *ExchangeRateUpsert {
	u.Set(exchangerate.FieldSettleTips, v)
	return u
}

// UpdateSettleTips sets the "settle_tips" field to the value that was provided on create.
func (u *ExchangeRateUpsert) UpdateSettleTips() *ExchangeRateUpsert {
	u.SetExcluded(exchangerate.FieldSettleTips)
	return u
}

// ClearSettleTips clears the value of the "settle_tips" field.
func (u *ExchangeRateUpsert) ClearSettleTips() *ExchangeRateUpsert {
	u.SetNull(exchangerate.FieldSettleTips)
	return u
}

// SetSetter sets the "setter" field.
func (u *ExchangeRateUpsert) SetSetter(v uuid.UUID) *ExchangeRateUpsert {
	u.Set(exchangerate.FieldSetter, v)
	return u
}

// UpdateSetter sets the "setter" field to the value that was provided on create.
func (u *ExchangeRateUpsert) UpdateSetter() *ExchangeRateUpsert {
	u.SetExcluded(exchangerate.FieldSetter)
	return u
}

// ClearSetter clears the value of the "setter" field.
func (u *ExchangeRateUpsert) ClearSetter() *ExchangeRateUpsert {
	u.SetNull(exchangerate.FieldSetter)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ExchangeRate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(exchangerate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ExchangeRateUpsertOne) UpdateNewValues() *ExchangeRateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(exchangerate.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.ExchangeRate.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ExchangeRateUpsertOne) Ignore() *ExchangeRateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExchangeRateUpsertOne) DoNothing() *ExchangeRateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExchangeRateCreate.OnConflict
// documentation for more info.
func (u *ExchangeRateUpsertOne) Update(set func(*ExchangeRateUpsert)) *ExchangeRateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExchangeRateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ExchangeRateUpsertOne) SetCreatedAt(v uint32) *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ExchangeRateUpsertOne) AddCreatedAt(v uint32) *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ExchangeRateUpsertOne) UpdateCreatedAt() *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExchangeRateUpsertOne) SetUpdatedAt(v uint32) *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ExchangeRateUpsertOne) AddUpdatedAt(v uint32) *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExchangeRateUpsertOne) UpdateUpdatedAt() *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExchangeRateUpsertOne) SetDeletedAt(v uint32) *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ExchangeRateUpsertOne) AddDeletedAt(v uint32) *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExchangeRateUpsertOne) UpdateDeletedAt() *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *ExchangeRateUpsertOne) SetEntID(v uuid.UUID) *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *ExchangeRateUpsertOne) UpdateEntID() *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *ExchangeRateUpsertOne) SetAppID(v uuid.UUID) *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ExchangeRateUpsertOne) UpdateAppID() *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *ExchangeRateUpsertOne) ClearAppID() *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.ClearAppID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *ExchangeRateUpsertOne) SetCoinTypeID(v uuid.UUID) *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *ExchangeRateUpsertOne) UpdateCoinTypeID() *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *ExchangeRateUpsertOne) ClearCoinTypeID() *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetMarketValue sets the "market_value" field.
func (u *ExchangeRateUpsertOne) SetMarketValue(v decimal.Decimal) *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetMarketValue(v)
	})
}

// UpdateMarketValue sets the "market_value" field to the value that was provided on create.
func (u *ExchangeRateUpsertOne) UpdateMarketValue() *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateMarketValue()
	})
}

// ClearMarketValue clears the value of the "market_value" field.
func (u *ExchangeRateUpsertOne) ClearMarketValue() *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.ClearMarketValue()
	})
}

// SetSettleValue sets the "settle_value" field.
func (u *ExchangeRateUpsertOne) SetSettleValue(v decimal.Decimal) *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetSettleValue(v)
	})
}

// UpdateSettleValue sets the "settle_value" field to the value that was provided on create.
func (u *ExchangeRateUpsertOne) UpdateSettleValue() *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateSettleValue()
	})
}

// ClearSettleValue clears the value of the "settle_value" field.
func (u *ExchangeRateUpsertOne) ClearSettleValue() *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.ClearSettleValue()
	})
}

// SetSettlePercent sets the "settle_percent" field.
func (u *ExchangeRateUpsertOne) SetSettlePercent(v uint32) *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetSettlePercent(v)
	})
}

// AddSettlePercent adds v to the "settle_percent" field.
func (u *ExchangeRateUpsertOne) AddSettlePercent(v uint32) *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.AddSettlePercent(v)
	})
}

// UpdateSettlePercent sets the "settle_percent" field to the value that was provided on create.
func (u *ExchangeRateUpsertOne) UpdateSettlePercent() *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateSettlePercent()
	})
}

// ClearSettlePercent clears the value of the "settle_percent" field.
func (u *ExchangeRateUpsertOne) ClearSettlePercent() *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.ClearSettlePercent()
	})
}

// SetSettleTips sets the "settle_tips" field.
func (u *ExchangeRateUpsertOne) SetSettleTips(v []string) *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetSettleTips(v)
	})
}

// UpdateSettleTips sets the "settle_tips" field to the value that was provided on create.
func (u *ExchangeRateUpsertOne) UpdateSettleTips() *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateSettleTips()
	})
}

// ClearSettleTips clears the value of the "settle_tips" field.
func (u *ExchangeRateUpsertOne) ClearSettleTips() *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.ClearSettleTips()
	})
}

// SetSetter sets the "setter" field.
func (u *ExchangeRateUpsertOne) SetSetter(v uuid.UUID) *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetSetter(v)
	})
}

// UpdateSetter sets the "setter" field to the value that was provided on create.
func (u *ExchangeRateUpsertOne) UpdateSetter() *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateSetter()
	})
}

// ClearSetter clears the value of the "setter" field.
func (u *ExchangeRateUpsertOne) ClearSetter() *ExchangeRateUpsertOne {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.ClearSetter()
	})
}

// Exec executes the query.
func (u *ExchangeRateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExchangeRateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExchangeRateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ExchangeRateUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ExchangeRateUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ExchangeRateCreateBulk is the builder for creating many ExchangeRate entities in bulk.
type ExchangeRateCreateBulk struct {
	config
	builders []*ExchangeRateCreate
	conflict []sql.ConflictOption
}

// Save creates the ExchangeRate entities in the database.
func (ercb *ExchangeRateCreateBulk) Save(ctx context.Context) ([]*ExchangeRate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ercb.builders))
	nodes := make([]*ExchangeRate, len(ercb.builders))
	mutators := make([]Mutator, len(ercb.builders))
	for i := range ercb.builders {
		func(i int, root context.Context) {
			builder := ercb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExchangeRateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ercb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ercb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ercb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ercb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ercb *ExchangeRateCreateBulk) SaveX(ctx context.Context) []*ExchangeRate {
	v, err := ercb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ercb *ExchangeRateCreateBulk) Exec(ctx context.Context) error {
	_, err := ercb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ercb *ExchangeRateCreateBulk) ExecX(ctx context.Context) {
	if err := ercb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ExchangeRate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExchangeRateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ercb *ExchangeRateCreateBulk) OnConflict(opts ...sql.ConflictOption) *ExchangeRateUpsertBulk {
	ercb.conflict = opts
	return &ExchangeRateUpsertBulk{
		create: ercb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ExchangeRate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ercb *ExchangeRateCreateBulk) OnConflictColumns(columns ...string) *ExchangeRateUpsertBulk {
	ercb.conflict = append(ercb.conflict, sql.ConflictColumns(columns...))
	return &ExchangeRateUpsertBulk{
		create: ercb,
	}
}

// ExchangeRateUpsertBulk is the builder for "upsert"-ing
// a bulk of ExchangeRate nodes.
type ExchangeRateUpsertBulk struct {
	create *ExchangeRateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ExchangeRate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(exchangerate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ExchangeRateUpsertBulk) UpdateNewValues() *ExchangeRateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(exchangerate.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ExchangeRate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ExchangeRateUpsertBulk) Ignore() *ExchangeRateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExchangeRateUpsertBulk) DoNothing() *ExchangeRateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExchangeRateCreateBulk.OnConflict
// documentation for more info.
func (u *ExchangeRateUpsertBulk) Update(set func(*ExchangeRateUpsert)) *ExchangeRateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExchangeRateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ExchangeRateUpsertBulk) SetCreatedAt(v uint32) *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ExchangeRateUpsertBulk) AddCreatedAt(v uint32) *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ExchangeRateUpsertBulk) UpdateCreatedAt() *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExchangeRateUpsertBulk) SetUpdatedAt(v uint32) *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ExchangeRateUpsertBulk) AddUpdatedAt(v uint32) *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExchangeRateUpsertBulk) UpdateUpdatedAt() *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExchangeRateUpsertBulk) SetDeletedAt(v uint32) *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ExchangeRateUpsertBulk) AddDeletedAt(v uint32) *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExchangeRateUpsertBulk) UpdateDeletedAt() *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *ExchangeRateUpsertBulk) SetEntID(v uuid.UUID) *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *ExchangeRateUpsertBulk) UpdateEntID() *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *ExchangeRateUpsertBulk) SetAppID(v uuid.UUID) *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ExchangeRateUpsertBulk) UpdateAppID() *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *ExchangeRateUpsertBulk) ClearAppID() *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.ClearAppID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *ExchangeRateUpsertBulk) SetCoinTypeID(v uuid.UUID) *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *ExchangeRateUpsertBulk) UpdateCoinTypeID() *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *ExchangeRateUpsertBulk) ClearCoinTypeID() *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetMarketValue sets the "market_value" field.
func (u *ExchangeRateUpsertBulk) SetMarketValue(v decimal.Decimal) *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetMarketValue(v)
	})
}

// UpdateMarketValue sets the "market_value" field to the value that was provided on create.
func (u *ExchangeRateUpsertBulk) UpdateMarketValue() *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateMarketValue()
	})
}

// ClearMarketValue clears the value of the "market_value" field.
func (u *ExchangeRateUpsertBulk) ClearMarketValue() *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.ClearMarketValue()
	})
}

// SetSettleValue sets the "settle_value" field.
func (u *ExchangeRateUpsertBulk) SetSettleValue(v decimal.Decimal) *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetSettleValue(v)
	})
}

// UpdateSettleValue sets the "settle_value" field to the value that was provided on create.
func (u *ExchangeRateUpsertBulk) UpdateSettleValue() *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateSettleValue()
	})
}

// ClearSettleValue clears the value of the "settle_value" field.
func (u *ExchangeRateUpsertBulk) ClearSettleValue() *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.ClearSettleValue()
	})
}

// SetSettlePercent sets the "settle_percent" field.
func (u *ExchangeRateUpsertBulk) SetSettlePercent(v uint32) *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetSettlePercent(v)
	})
}

// AddSettlePercent adds v to the "settle_percent" field.
func (u *ExchangeRateUpsertBulk) AddSettlePercent(v uint32) *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.AddSettlePercent(v)
	})
}

// UpdateSettlePercent sets the "settle_percent" field to the value that was provided on create.
func (u *ExchangeRateUpsertBulk) UpdateSettlePercent() *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateSettlePercent()
	})
}

// ClearSettlePercent clears the value of the "settle_percent" field.
func (u *ExchangeRateUpsertBulk) ClearSettlePercent() *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.ClearSettlePercent()
	})
}

// SetSettleTips sets the "settle_tips" field.
func (u *ExchangeRateUpsertBulk) SetSettleTips(v []string) *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetSettleTips(v)
	})
}

// UpdateSettleTips sets the "settle_tips" field to the value that was provided on create.
func (u *ExchangeRateUpsertBulk) UpdateSettleTips() *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateSettleTips()
	})
}

// ClearSettleTips clears the value of the "settle_tips" field.
func (u *ExchangeRateUpsertBulk) ClearSettleTips() *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.ClearSettleTips()
	})
}

// SetSetter sets the "setter" field.
func (u *ExchangeRateUpsertBulk) SetSetter(v uuid.UUID) *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.SetSetter(v)
	})
}

// UpdateSetter sets the "setter" field to the value that was provided on create.
func (u *ExchangeRateUpsertBulk) UpdateSetter() *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.UpdateSetter()
	})
}

// ClearSetter clears the value of the "setter" field.
func (u *ExchangeRateUpsertBulk) ClearSetter() *ExchangeRateUpsertBulk {
	return u.Update(func(s *ExchangeRateUpsert) {
		s.ClearSetter()
	})
}

// Exec executes the query.
func (u *ExchangeRateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ExchangeRateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExchangeRateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExchangeRateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
