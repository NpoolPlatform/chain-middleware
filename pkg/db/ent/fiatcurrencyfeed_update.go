// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/fiatcurrencyfeed"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// FiatCurrencyFeedUpdate is the builder for updating FiatCurrencyFeed entities.
type FiatCurrencyFeedUpdate struct {
	config
	hooks     []Hook
	mutation  *FiatCurrencyFeedMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FiatCurrencyFeedUpdate builder.
func (fcfu *FiatCurrencyFeedUpdate) Where(ps ...predicate.FiatCurrencyFeed) *FiatCurrencyFeedUpdate {
	fcfu.mutation.Where(ps...)
	return fcfu
}

// SetCreatedAt sets the "created_at" field.
func (fcfu *FiatCurrencyFeedUpdate) SetCreatedAt(u uint32) *FiatCurrencyFeedUpdate {
	fcfu.mutation.ResetCreatedAt()
	fcfu.mutation.SetCreatedAt(u)
	return fcfu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fcfu *FiatCurrencyFeedUpdate) SetNillableCreatedAt(u *uint32) *FiatCurrencyFeedUpdate {
	if u != nil {
		fcfu.SetCreatedAt(*u)
	}
	return fcfu
}

// AddCreatedAt adds u to the "created_at" field.
func (fcfu *FiatCurrencyFeedUpdate) AddCreatedAt(u int32) *FiatCurrencyFeedUpdate {
	fcfu.mutation.AddCreatedAt(u)
	return fcfu
}

// SetUpdatedAt sets the "updated_at" field.
func (fcfu *FiatCurrencyFeedUpdate) SetUpdatedAt(u uint32) *FiatCurrencyFeedUpdate {
	fcfu.mutation.ResetUpdatedAt()
	fcfu.mutation.SetUpdatedAt(u)
	return fcfu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (fcfu *FiatCurrencyFeedUpdate) AddUpdatedAt(u int32) *FiatCurrencyFeedUpdate {
	fcfu.mutation.AddUpdatedAt(u)
	return fcfu
}

// SetDeletedAt sets the "deleted_at" field.
func (fcfu *FiatCurrencyFeedUpdate) SetDeletedAt(u uint32) *FiatCurrencyFeedUpdate {
	fcfu.mutation.ResetDeletedAt()
	fcfu.mutation.SetDeletedAt(u)
	return fcfu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fcfu *FiatCurrencyFeedUpdate) SetNillableDeletedAt(u *uint32) *FiatCurrencyFeedUpdate {
	if u != nil {
		fcfu.SetDeletedAt(*u)
	}
	return fcfu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (fcfu *FiatCurrencyFeedUpdate) AddDeletedAt(u int32) *FiatCurrencyFeedUpdate {
	fcfu.mutation.AddDeletedAt(u)
	return fcfu
}

// SetEntID sets the "ent_id" field.
func (fcfu *FiatCurrencyFeedUpdate) SetEntID(u uuid.UUID) *FiatCurrencyFeedUpdate {
	fcfu.mutation.SetEntID(u)
	return fcfu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fcfu *FiatCurrencyFeedUpdate) SetNillableEntID(u *uuid.UUID) *FiatCurrencyFeedUpdate {
	if u != nil {
		fcfu.SetEntID(*u)
	}
	return fcfu
}

// SetFiatID sets the "fiat_id" field.
func (fcfu *FiatCurrencyFeedUpdate) SetFiatID(u uuid.UUID) *FiatCurrencyFeedUpdate {
	fcfu.mutation.SetFiatID(u)
	return fcfu
}

// SetNillableFiatID sets the "fiat_id" field if the given value is not nil.
func (fcfu *FiatCurrencyFeedUpdate) SetNillableFiatID(u *uuid.UUID) *FiatCurrencyFeedUpdate {
	if u != nil {
		fcfu.SetFiatID(*u)
	}
	return fcfu
}

// ClearFiatID clears the value of the "fiat_id" field.
func (fcfu *FiatCurrencyFeedUpdate) ClearFiatID() *FiatCurrencyFeedUpdate {
	fcfu.mutation.ClearFiatID()
	return fcfu
}

// SetFeedType sets the "feed_type" field.
func (fcfu *FiatCurrencyFeedUpdate) SetFeedType(s string) *FiatCurrencyFeedUpdate {
	fcfu.mutation.SetFeedType(s)
	return fcfu
}

// SetNillableFeedType sets the "feed_type" field if the given value is not nil.
func (fcfu *FiatCurrencyFeedUpdate) SetNillableFeedType(s *string) *FiatCurrencyFeedUpdate {
	if s != nil {
		fcfu.SetFeedType(*s)
	}
	return fcfu
}

// ClearFeedType clears the value of the "feed_type" field.
func (fcfu *FiatCurrencyFeedUpdate) ClearFeedType() *FiatCurrencyFeedUpdate {
	fcfu.mutation.ClearFeedType()
	return fcfu
}

// SetFeedFiatName sets the "feed_fiat_name" field.
func (fcfu *FiatCurrencyFeedUpdate) SetFeedFiatName(s string) *FiatCurrencyFeedUpdate {
	fcfu.mutation.SetFeedFiatName(s)
	return fcfu
}

// SetNillableFeedFiatName sets the "feed_fiat_name" field if the given value is not nil.
func (fcfu *FiatCurrencyFeedUpdate) SetNillableFeedFiatName(s *string) *FiatCurrencyFeedUpdate {
	if s != nil {
		fcfu.SetFeedFiatName(*s)
	}
	return fcfu
}

// ClearFeedFiatName clears the value of the "feed_fiat_name" field.
func (fcfu *FiatCurrencyFeedUpdate) ClearFeedFiatName() *FiatCurrencyFeedUpdate {
	fcfu.mutation.ClearFeedFiatName()
	return fcfu
}

// SetDisabled sets the "disabled" field.
func (fcfu *FiatCurrencyFeedUpdate) SetDisabled(b bool) *FiatCurrencyFeedUpdate {
	fcfu.mutation.SetDisabled(b)
	return fcfu
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (fcfu *FiatCurrencyFeedUpdate) SetNillableDisabled(b *bool) *FiatCurrencyFeedUpdate {
	if b != nil {
		fcfu.SetDisabled(*b)
	}
	return fcfu
}

// ClearDisabled clears the value of the "disabled" field.
func (fcfu *FiatCurrencyFeedUpdate) ClearDisabled() *FiatCurrencyFeedUpdate {
	fcfu.mutation.ClearDisabled()
	return fcfu
}

// Mutation returns the FiatCurrencyFeedMutation object of the builder.
func (fcfu *FiatCurrencyFeedUpdate) Mutation() *FiatCurrencyFeedMutation {
	return fcfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fcfu *FiatCurrencyFeedUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := fcfu.defaults(); err != nil {
		return 0, err
	}
	if len(fcfu.hooks) == 0 {
		affected, err = fcfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FiatCurrencyFeedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fcfu.mutation = mutation
			affected, err = fcfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fcfu.hooks) - 1; i >= 0; i-- {
			if fcfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fcfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fcfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fcfu *FiatCurrencyFeedUpdate) SaveX(ctx context.Context) int {
	affected, err := fcfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fcfu *FiatCurrencyFeedUpdate) Exec(ctx context.Context) error {
	_, err := fcfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcfu *FiatCurrencyFeedUpdate) ExecX(ctx context.Context) {
	if err := fcfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fcfu *FiatCurrencyFeedUpdate) defaults() error {
	if _, ok := fcfu.mutation.UpdatedAt(); !ok {
		if fiatcurrencyfeed.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fiatcurrencyfeed.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fiatcurrencyfeed.UpdateDefaultUpdatedAt()
		fcfu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fcfu *FiatCurrencyFeedUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FiatCurrencyFeedUpdate {
	fcfu.modifiers = append(fcfu.modifiers, modifiers...)
	return fcfu
}

func (fcfu *FiatCurrencyFeedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fiatcurrencyfeed.Table,
			Columns: fiatcurrencyfeed.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: fiatcurrencyfeed.FieldID,
			},
		},
	}
	if ps := fcfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fcfu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencyfeed.FieldCreatedAt,
		})
	}
	if value, ok := fcfu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencyfeed.FieldCreatedAt,
		})
	}
	if value, ok := fcfu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencyfeed.FieldUpdatedAt,
		})
	}
	if value, ok := fcfu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencyfeed.FieldUpdatedAt,
		})
	}
	if value, ok := fcfu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencyfeed.FieldDeletedAt,
		})
	}
	if value, ok := fcfu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencyfeed.FieldDeletedAt,
		})
	}
	if value, ok := fcfu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fiatcurrencyfeed.FieldEntID,
		})
	}
	if value, ok := fcfu.mutation.FiatID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fiatcurrencyfeed.FieldFiatID,
		})
	}
	if fcfu.mutation.FiatIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: fiatcurrencyfeed.FieldFiatID,
		})
	}
	if value, ok := fcfu.mutation.FeedType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fiatcurrencyfeed.FieldFeedType,
		})
	}
	if fcfu.mutation.FeedTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fiatcurrencyfeed.FieldFeedType,
		})
	}
	if value, ok := fcfu.mutation.FeedFiatName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fiatcurrencyfeed.FieldFeedFiatName,
		})
	}
	if fcfu.mutation.FeedFiatNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fiatcurrencyfeed.FieldFeedFiatName,
		})
	}
	if value, ok := fcfu.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: fiatcurrencyfeed.FieldDisabled,
		})
	}
	if fcfu.mutation.DisabledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: fiatcurrencyfeed.FieldDisabled,
		})
	}
	_spec.Modifiers = fcfu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, fcfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fiatcurrencyfeed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FiatCurrencyFeedUpdateOne is the builder for updating a single FiatCurrencyFeed entity.
type FiatCurrencyFeedUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FiatCurrencyFeedMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (fcfuo *FiatCurrencyFeedUpdateOne) SetCreatedAt(u uint32) *FiatCurrencyFeedUpdateOne {
	fcfuo.mutation.ResetCreatedAt()
	fcfuo.mutation.SetCreatedAt(u)
	return fcfuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fcfuo *FiatCurrencyFeedUpdateOne) SetNillableCreatedAt(u *uint32) *FiatCurrencyFeedUpdateOne {
	if u != nil {
		fcfuo.SetCreatedAt(*u)
	}
	return fcfuo
}

// AddCreatedAt adds u to the "created_at" field.
func (fcfuo *FiatCurrencyFeedUpdateOne) AddCreatedAt(u int32) *FiatCurrencyFeedUpdateOne {
	fcfuo.mutation.AddCreatedAt(u)
	return fcfuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fcfuo *FiatCurrencyFeedUpdateOne) SetUpdatedAt(u uint32) *FiatCurrencyFeedUpdateOne {
	fcfuo.mutation.ResetUpdatedAt()
	fcfuo.mutation.SetUpdatedAt(u)
	return fcfuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (fcfuo *FiatCurrencyFeedUpdateOne) AddUpdatedAt(u int32) *FiatCurrencyFeedUpdateOne {
	fcfuo.mutation.AddUpdatedAt(u)
	return fcfuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fcfuo *FiatCurrencyFeedUpdateOne) SetDeletedAt(u uint32) *FiatCurrencyFeedUpdateOne {
	fcfuo.mutation.ResetDeletedAt()
	fcfuo.mutation.SetDeletedAt(u)
	return fcfuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fcfuo *FiatCurrencyFeedUpdateOne) SetNillableDeletedAt(u *uint32) *FiatCurrencyFeedUpdateOne {
	if u != nil {
		fcfuo.SetDeletedAt(*u)
	}
	return fcfuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (fcfuo *FiatCurrencyFeedUpdateOne) AddDeletedAt(u int32) *FiatCurrencyFeedUpdateOne {
	fcfuo.mutation.AddDeletedAt(u)
	return fcfuo
}

// SetEntID sets the "ent_id" field.
func (fcfuo *FiatCurrencyFeedUpdateOne) SetEntID(u uuid.UUID) *FiatCurrencyFeedUpdateOne {
	fcfuo.mutation.SetEntID(u)
	return fcfuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fcfuo *FiatCurrencyFeedUpdateOne) SetNillableEntID(u *uuid.UUID) *FiatCurrencyFeedUpdateOne {
	if u != nil {
		fcfuo.SetEntID(*u)
	}
	return fcfuo
}

// SetFiatID sets the "fiat_id" field.
func (fcfuo *FiatCurrencyFeedUpdateOne) SetFiatID(u uuid.UUID) *FiatCurrencyFeedUpdateOne {
	fcfuo.mutation.SetFiatID(u)
	return fcfuo
}

// SetNillableFiatID sets the "fiat_id" field if the given value is not nil.
func (fcfuo *FiatCurrencyFeedUpdateOne) SetNillableFiatID(u *uuid.UUID) *FiatCurrencyFeedUpdateOne {
	if u != nil {
		fcfuo.SetFiatID(*u)
	}
	return fcfuo
}

// ClearFiatID clears the value of the "fiat_id" field.
func (fcfuo *FiatCurrencyFeedUpdateOne) ClearFiatID() *FiatCurrencyFeedUpdateOne {
	fcfuo.mutation.ClearFiatID()
	return fcfuo
}

// SetFeedType sets the "feed_type" field.
func (fcfuo *FiatCurrencyFeedUpdateOne) SetFeedType(s string) *FiatCurrencyFeedUpdateOne {
	fcfuo.mutation.SetFeedType(s)
	return fcfuo
}

// SetNillableFeedType sets the "feed_type" field if the given value is not nil.
func (fcfuo *FiatCurrencyFeedUpdateOne) SetNillableFeedType(s *string) *FiatCurrencyFeedUpdateOne {
	if s != nil {
		fcfuo.SetFeedType(*s)
	}
	return fcfuo
}

// ClearFeedType clears the value of the "feed_type" field.
func (fcfuo *FiatCurrencyFeedUpdateOne) ClearFeedType() *FiatCurrencyFeedUpdateOne {
	fcfuo.mutation.ClearFeedType()
	return fcfuo
}

// SetFeedFiatName sets the "feed_fiat_name" field.
func (fcfuo *FiatCurrencyFeedUpdateOne) SetFeedFiatName(s string) *FiatCurrencyFeedUpdateOne {
	fcfuo.mutation.SetFeedFiatName(s)
	return fcfuo
}

// SetNillableFeedFiatName sets the "feed_fiat_name" field if the given value is not nil.
func (fcfuo *FiatCurrencyFeedUpdateOne) SetNillableFeedFiatName(s *string) *FiatCurrencyFeedUpdateOne {
	if s != nil {
		fcfuo.SetFeedFiatName(*s)
	}
	return fcfuo
}

// ClearFeedFiatName clears the value of the "feed_fiat_name" field.
func (fcfuo *FiatCurrencyFeedUpdateOne) ClearFeedFiatName() *FiatCurrencyFeedUpdateOne {
	fcfuo.mutation.ClearFeedFiatName()
	return fcfuo
}

// SetDisabled sets the "disabled" field.
func (fcfuo *FiatCurrencyFeedUpdateOne) SetDisabled(b bool) *FiatCurrencyFeedUpdateOne {
	fcfuo.mutation.SetDisabled(b)
	return fcfuo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (fcfuo *FiatCurrencyFeedUpdateOne) SetNillableDisabled(b *bool) *FiatCurrencyFeedUpdateOne {
	if b != nil {
		fcfuo.SetDisabled(*b)
	}
	return fcfuo
}

// ClearDisabled clears the value of the "disabled" field.
func (fcfuo *FiatCurrencyFeedUpdateOne) ClearDisabled() *FiatCurrencyFeedUpdateOne {
	fcfuo.mutation.ClearDisabled()
	return fcfuo
}

// Mutation returns the FiatCurrencyFeedMutation object of the builder.
func (fcfuo *FiatCurrencyFeedUpdateOne) Mutation() *FiatCurrencyFeedMutation {
	return fcfuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fcfuo *FiatCurrencyFeedUpdateOne) Select(field string, fields ...string) *FiatCurrencyFeedUpdateOne {
	fcfuo.fields = append([]string{field}, fields...)
	return fcfuo
}

// Save executes the query and returns the updated FiatCurrencyFeed entity.
func (fcfuo *FiatCurrencyFeedUpdateOne) Save(ctx context.Context) (*FiatCurrencyFeed, error) {
	var (
		err  error
		node *FiatCurrencyFeed
	)
	if err := fcfuo.defaults(); err != nil {
		return nil, err
	}
	if len(fcfuo.hooks) == 0 {
		node, err = fcfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FiatCurrencyFeedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fcfuo.mutation = mutation
			node, err = fcfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fcfuo.hooks) - 1; i >= 0; i-- {
			if fcfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fcfuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fcfuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FiatCurrencyFeed)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FiatCurrencyFeedMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fcfuo *FiatCurrencyFeedUpdateOne) SaveX(ctx context.Context) *FiatCurrencyFeed {
	node, err := fcfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fcfuo *FiatCurrencyFeedUpdateOne) Exec(ctx context.Context) error {
	_, err := fcfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcfuo *FiatCurrencyFeedUpdateOne) ExecX(ctx context.Context) {
	if err := fcfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fcfuo *FiatCurrencyFeedUpdateOne) defaults() error {
	if _, ok := fcfuo.mutation.UpdatedAt(); !ok {
		if fiatcurrencyfeed.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fiatcurrencyfeed.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fiatcurrencyfeed.UpdateDefaultUpdatedAt()
		fcfuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fcfuo *FiatCurrencyFeedUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FiatCurrencyFeedUpdateOne {
	fcfuo.modifiers = append(fcfuo.modifiers, modifiers...)
	return fcfuo
}

func (fcfuo *FiatCurrencyFeedUpdateOne) sqlSave(ctx context.Context) (_node *FiatCurrencyFeed, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fiatcurrencyfeed.Table,
			Columns: fiatcurrencyfeed.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: fiatcurrencyfeed.FieldID,
			},
		},
	}
	id, ok := fcfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FiatCurrencyFeed.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fcfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fiatcurrencyfeed.FieldID)
		for _, f := range fields {
			if !fiatcurrencyfeed.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fiatcurrencyfeed.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fcfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fcfuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencyfeed.FieldCreatedAt,
		})
	}
	if value, ok := fcfuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencyfeed.FieldCreatedAt,
		})
	}
	if value, ok := fcfuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencyfeed.FieldUpdatedAt,
		})
	}
	if value, ok := fcfuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencyfeed.FieldUpdatedAt,
		})
	}
	if value, ok := fcfuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencyfeed.FieldDeletedAt,
		})
	}
	if value, ok := fcfuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencyfeed.FieldDeletedAt,
		})
	}
	if value, ok := fcfuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fiatcurrencyfeed.FieldEntID,
		})
	}
	if value, ok := fcfuo.mutation.FiatID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fiatcurrencyfeed.FieldFiatID,
		})
	}
	if fcfuo.mutation.FiatIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: fiatcurrencyfeed.FieldFiatID,
		})
	}
	if value, ok := fcfuo.mutation.FeedType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fiatcurrencyfeed.FieldFeedType,
		})
	}
	if fcfuo.mutation.FeedTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fiatcurrencyfeed.FieldFeedType,
		})
	}
	if value, ok := fcfuo.mutation.FeedFiatName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fiatcurrencyfeed.FieldFeedFiatName,
		})
	}
	if fcfuo.mutation.FeedFiatNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fiatcurrencyfeed.FieldFeedFiatName,
		})
	}
	if value, ok := fcfuo.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: fiatcurrencyfeed.FieldDisabled,
		})
	}
	if fcfuo.mutation.DisabledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: fiatcurrencyfeed.FieldDisabled,
		})
	}
	_spec.Modifiers = fcfuo.modifiers
	_node = &FiatCurrencyFeed{config: fcfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fcfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fiatcurrencyfeed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
