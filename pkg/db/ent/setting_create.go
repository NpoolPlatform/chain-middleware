// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/setting"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// SettingCreate is the builder for creating a Setting entity.
type SettingCreate struct {
	config
	mutation *SettingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *SettingCreate) SetCreatedAt(u uint32) *SettingCreate {
	sc.mutation.SetCreatedAt(u)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SettingCreate) SetNillableCreatedAt(u *uint32) *SettingCreate {
	if u != nil {
		sc.SetCreatedAt(*u)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SettingCreate) SetUpdatedAt(u uint32) *SettingCreate {
	sc.mutation.SetUpdatedAt(u)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SettingCreate) SetNillableUpdatedAt(u *uint32) *SettingCreate {
	if u != nil {
		sc.SetUpdatedAt(*u)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SettingCreate) SetDeletedAt(u uint32) *SettingCreate {
	sc.mutation.SetDeletedAt(u)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SettingCreate) SetNillableDeletedAt(u *uint32) *SettingCreate {
	if u != nil {
		sc.SetDeletedAt(*u)
	}
	return sc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (sc *SettingCreate) SetCoinTypeID(u uuid.UUID) *SettingCreate {
	sc.mutation.SetCoinTypeID(u)
	return sc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (sc *SettingCreate) SetNillableCoinTypeID(u *uuid.UUID) *SettingCreate {
	if u != nil {
		sc.SetCoinTypeID(*u)
	}
	return sc
}

// SetFeeCoinTypeID sets the "fee_coin_type_id" field.
func (sc *SettingCreate) SetFeeCoinTypeID(u uuid.UUID) *SettingCreate {
	sc.mutation.SetFeeCoinTypeID(u)
	return sc
}

// SetNillableFeeCoinTypeID sets the "fee_coin_type_id" field if the given value is not nil.
func (sc *SettingCreate) SetNillableFeeCoinTypeID(u *uuid.UUID) *SettingCreate {
	if u != nil {
		sc.SetFeeCoinTypeID(*u)
	}
	return sc
}

// SetWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field.
func (sc *SettingCreate) SetWithdrawFeeByStableUsd(b bool) *SettingCreate {
	sc.mutation.SetWithdrawFeeByStableUsd(b)
	return sc
}

// SetNillableWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field if the given value is not nil.
func (sc *SettingCreate) SetNillableWithdrawFeeByStableUsd(b *bool) *SettingCreate {
	if b != nil {
		sc.SetWithdrawFeeByStableUsd(*b)
	}
	return sc
}

// SetWithdrawFeeAmount sets the "withdraw_fee_amount" field.
func (sc *SettingCreate) SetWithdrawFeeAmount(d decimal.Decimal) *SettingCreate {
	sc.mutation.SetWithdrawFeeAmount(d)
	return sc
}

// SetNillableWithdrawFeeAmount sets the "withdraw_fee_amount" field if the given value is not nil.
func (sc *SettingCreate) SetNillableWithdrawFeeAmount(d *decimal.Decimal) *SettingCreate {
	if d != nil {
		sc.SetWithdrawFeeAmount(*d)
	}
	return sc
}

// SetCollectFeeAmount sets the "collect_fee_amount" field.
func (sc *SettingCreate) SetCollectFeeAmount(d decimal.Decimal) *SettingCreate {
	sc.mutation.SetCollectFeeAmount(d)
	return sc
}

// SetNillableCollectFeeAmount sets the "collect_fee_amount" field if the given value is not nil.
func (sc *SettingCreate) SetNillableCollectFeeAmount(d *decimal.Decimal) *SettingCreate {
	if d != nil {
		sc.SetCollectFeeAmount(*d)
	}
	return sc
}

// SetHotWalletFeeAmount sets the "hot_wallet_fee_amount" field.
func (sc *SettingCreate) SetHotWalletFeeAmount(d decimal.Decimal) *SettingCreate {
	sc.mutation.SetHotWalletFeeAmount(d)
	return sc
}

// SetNillableHotWalletFeeAmount sets the "hot_wallet_fee_amount" field if the given value is not nil.
func (sc *SettingCreate) SetNillableHotWalletFeeAmount(d *decimal.Decimal) *SettingCreate {
	if d != nil {
		sc.SetHotWalletFeeAmount(*d)
	}
	return sc
}

// SetLowFeeAmount sets the "low_fee_amount" field.
func (sc *SettingCreate) SetLowFeeAmount(d decimal.Decimal) *SettingCreate {
	sc.mutation.SetLowFeeAmount(d)
	return sc
}

// SetNillableLowFeeAmount sets the "low_fee_amount" field if the given value is not nil.
func (sc *SettingCreate) SetNillableLowFeeAmount(d *decimal.Decimal) *SettingCreate {
	if d != nil {
		sc.SetLowFeeAmount(*d)
	}
	return sc
}

// SetHotLowFeeAmount sets the "hot_low_fee_amount" field.
func (sc *SettingCreate) SetHotLowFeeAmount(d decimal.Decimal) *SettingCreate {
	sc.mutation.SetHotLowFeeAmount(d)
	return sc
}

// SetNillableHotLowFeeAmount sets the "hot_low_fee_amount" field if the given value is not nil.
func (sc *SettingCreate) SetNillableHotLowFeeAmount(d *decimal.Decimal) *SettingCreate {
	if d != nil {
		sc.SetHotLowFeeAmount(*d)
	}
	return sc
}

// SetHotWalletAccountAmount sets the "hot_wallet_account_amount" field.
func (sc *SettingCreate) SetHotWalletAccountAmount(d decimal.Decimal) *SettingCreate {
	sc.mutation.SetHotWalletAccountAmount(d)
	return sc
}

// SetNillableHotWalletAccountAmount sets the "hot_wallet_account_amount" field if the given value is not nil.
func (sc *SettingCreate) SetNillableHotWalletAccountAmount(d *decimal.Decimal) *SettingCreate {
	if d != nil {
		sc.SetHotWalletAccountAmount(*d)
	}
	return sc
}

// SetPaymentAccountCollectAmount sets the "payment_account_collect_amount" field.
func (sc *SettingCreate) SetPaymentAccountCollectAmount(d decimal.Decimal) *SettingCreate {
	sc.mutation.SetPaymentAccountCollectAmount(d)
	return sc
}

// SetNillablePaymentAccountCollectAmount sets the "payment_account_collect_amount" field if the given value is not nil.
func (sc *SettingCreate) SetNillablePaymentAccountCollectAmount(d *decimal.Decimal) *SettingCreate {
	if d != nil {
		sc.SetPaymentAccountCollectAmount(*d)
	}
	return sc
}

// SetLeastTransferAmount sets the "least_transfer_amount" field.
func (sc *SettingCreate) SetLeastTransferAmount(d decimal.Decimal) *SettingCreate {
	sc.mutation.SetLeastTransferAmount(d)
	return sc
}

// SetNillableLeastTransferAmount sets the "least_transfer_amount" field if the given value is not nil.
func (sc *SettingCreate) SetNillableLeastTransferAmount(d *decimal.Decimal) *SettingCreate {
	if d != nil {
		sc.SetLeastTransferAmount(*d)
	}
	return sc
}

// SetNeedMemo sets the "need_memo" field.
func (sc *SettingCreate) SetNeedMemo(b bool) *SettingCreate {
	sc.mutation.SetNeedMemo(b)
	return sc
}

// SetNillableNeedMemo sets the "need_memo" field if the given value is not nil.
func (sc *SettingCreate) SetNillableNeedMemo(b *bool) *SettingCreate {
	if b != nil {
		sc.SetNeedMemo(*b)
	}
	return sc
}

// SetRefreshCurrency sets the "refresh_currency" field.
func (sc *SettingCreate) SetRefreshCurrency(b bool) *SettingCreate {
	sc.mutation.SetRefreshCurrency(b)
	return sc
}

// SetNillableRefreshCurrency sets the "refresh_currency" field if the given value is not nil.
func (sc *SettingCreate) SetNillableRefreshCurrency(b *bool) *SettingCreate {
	if b != nil {
		sc.SetRefreshCurrency(*b)
	}
	return sc
}

// SetCheckNewAddressBalance sets the "check_new_address_balance" field.
func (sc *SettingCreate) SetCheckNewAddressBalance(b bool) *SettingCreate {
	sc.mutation.SetCheckNewAddressBalance(b)
	return sc
}

// SetNillableCheckNewAddressBalance sets the "check_new_address_balance" field if the given value is not nil.
func (sc *SettingCreate) SetNillableCheckNewAddressBalance(b *bool) *SettingCreate {
	if b != nil {
		sc.SetCheckNewAddressBalance(*b)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SettingCreate) SetID(u uuid.UUID) *SettingCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SettingCreate) SetNillableID(u *uuid.UUID) *SettingCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// Mutation returns the SettingMutation object of the builder.
func (sc *SettingCreate) Mutation() *SettingMutation {
	return sc.mutation
}

// Save creates the Setting in the database.
func (sc *SettingCreate) Save(ctx context.Context) (*Setting, error) {
	var (
		err  error
		node *Setting
	)
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Setting)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SettingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SettingCreate) SaveX(ctx context.Context) *Setting {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SettingCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SettingCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SettingCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if setting.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized setting.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := setting.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if setting.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized setting.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := setting.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		if setting.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized setting.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := setting.DefaultDeletedAt()
		sc.mutation.SetDeletedAt(v)
	}
	if _, ok := sc.mutation.CoinTypeID(); !ok {
		if setting.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized setting.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := setting.DefaultCoinTypeID()
		sc.mutation.SetCoinTypeID(v)
	}
	if _, ok := sc.mutation.FeeCoinTypeID(); !ok {
		if setting.DefaultFeeCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized setting.DefaultFeeCoinTypeID (forgotten import ent/runtime?)")
		}
		v := setting.DefaultFeeCoinTypeID()
		sc.mutation.SetFeeCoinTypeID(v)
	}
	if _, ok := sc.mutation.WithdrawFeeByStableUsd(); !ok {
		v := setting.DefaultWithdrawFeeByStableUsd
		sc.mutation.SetWithdrawFeeByStableUsd(v)
	}
	if _, ok := sc.mutation.WithdrawFeeAmount(); !ok {
		v := setting.DefaultWithdrawFeeAmount
		sc.mutation.SetWithdrawFeeAmount(v)
	}
	if _, ok := sc.mutation.CollectFeeAmount(); !ok {
		v := setting.DefaultCollectFeeAmount
		sc.mutation.SetCollectFeeAmount(v)
	}
	if _, ok := sc.mutation.HotWalletFeeAmount(); !ok {
		v := setting.DefaultHotWalletFeeAmount
		sc.mutation.SetHotWalletFeeAmount(v)
	}
	if _, ok := sc.mutation.LowFeeAmount(); !ok {
		v := setting.DefaultLowFeeAmount
		sc.mutation.SetLowFeeAmount(v)
	}
	if _, ok := sc.mutation.HotLowFeeAmount(); !ok {
		v := setting.DefaultHotLowFeeAmount
		sc.mutation.SetHotLowFeeAmount(v)
	}
	if _, ok := sc.mutation.HotWalletAccountAmount(); !ok {
		v := setting.DefaultHotWalletAccountAmount
		sc.mutation.SetHotWalletAccountAmount(v)
	}
	if _, ok := sc.mutation.PaymentAccountCollectAmount(); !ok {
		v := setting.DefaultPaymentAccountCollectAmount
		sc.mutation.SetPaymentAccountCollectAmount(v)
	}
	if _, ok := sc.mutation.LeastTransferAmount(); !ok {
		v := setting.DefaultLeastTransferAmount
		sc.mutation.SetLeastTransferAmount(v)
	}
	if _, ok := sc.mutation.NeedMemo(); !ok {
		v := setting.DefaultNeedMemo
		sc.mutation.SetNeedMemo(v)
	}
	if _, ok := sc.mutation.RefreshCurrency(); !ok {
		v := setting.DefaultRefreshCurrency
		sc.mutation.SetRefreshCurrency(v)
	}
	if _, ok := sc.mutation.CheckNewAddressBalance(); !ok {
		v := setting.DefaultCheckNewAddressBalance
		sc.mutation.SetCheckNewAddressBalance(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		if setting.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized setting.DefaultID (forgotten import ent/runtime?)")
		}
		v := setting.DefaultID()
		sc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *SettingCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Setting.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Setting.updated_at"`)}
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Setting.deleted_at"`)}
	}
	return nil
}

func (sc *SettingCreate) sqlSave(ctx context.Context) (*Setting, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (sc *SettingCreate) createSpec() (*Setting, *sqlgraph.CreateSpec) {
	var (
		_node = &Setting{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: setting.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: setting.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: setting.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: setting.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: setting.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: setting.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := sc.mutation.FeeCoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: setting.FieldFeeCoinTypeID,
		})
		_node.FeeCoinTypeID = value
	}
	if value, ok := sc.mutation.WithdrawFeeByStableUsd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: setting.FieldWithdrawFeeByStableUsd,
		})
		_node.WithdrawFeeByStableUsd = value
	}
	if value, ok := sc.mutation.WithdrawFeeAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: setting.FieldWithdrawFeeAmount,
		})
		_node.WithdrawFeeAmount = value
	}
	if value, ok := sc.mutation.CollectFeeAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: setting.FieldCollectFeeAmount,
		})
		_node.CollectFeeAmount = value
	}
	if value, ok := sc.mutation.HotWalletFeeAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: setting.FieldHotWalletFeeAmount,
		})
		_node.HotWalletFeeAmount = value
	}
	if value, ok := sc.mutation.LowFeeAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: setting.FieldLowFeeAmount,
		})
		_node.LowFeeAmount = value
	}
	if value, ok := sc.mutation.HotLowFeeAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: setting.FieldHotLowFeeAmount,
		})
		_node.HotLowFeeAmount = value
	}
	if value, ok := sc.mutation.HotWalletAccountAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: setting.FieldHotWalletAccountAmount,
		})
		_node.HotWalletAccountAmount = value
	}
	if value, ok := sc.mutation.PaymentAccountCollectAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: setting.FieldPaymentAccountCollectAmount,
		})
		_node.PaymentAccountCollectAmount = value
	}
	if value, ok := sc.mutation.LeastTransferAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: setting.FieldLeastTransferAmount,
		})
		_node.LeastTransferAmount = value
	}
	if value, ok := sc.mutation.NeedMemo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: setting.FieldNeedMemo,
		})
		_node.NeedMemo = value
	}
	if value, ok := sc.mutation.RefreshCurrency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: setting.FieldRefreshCurrency,
		})
		_node.RefreshCurrency = value
	}
	if value, ok := sc.mutation.CheckNewAddressBalance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: setting.FieldCheckNewAddressBalance,
		})
		_node.CheckNewAddressBalance = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Setting.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SettingUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sc *SettingCreate) OnConflict(opts ...sql.ConflictOption) *SettingUpsertOne {
	sc.conflict = opts
	return &SettingUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Setting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *SettingCreate) OnConflictColumns(columns ...string) *SettingUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SettingUpsertOne{
		create: sc,
	}
}

type (
	// SettingUpsertOne is the builder for "upsert"-ing
	//  one Setting node.
	SettingUpsertOne struct {
		create *SettingCreate
	}

	// SettingUpsert is the "OnConflict" setter.
	SettingUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SettingUpsert) SetCreatedAt(v uint32) *SettingUpsert {
	u.Set(setting.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SettingUpsert) UpdateCreatedAt() *SettingUpsert {
	u.SetExcluded(setting.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SettingUpsert) AddCreatedAt(v uint32) *SettingUpsert {
	u.Add(setting.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SettingUpsert) SetUpdatedAt(v uint32) *SettingUpsert {
	u.Set(setting.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SettingUpsert) UpdateUpdatedAt() *SettingUpsert {
	u.SetExcluded(setting.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SettingUpsert) AddUpdatedAt(v uint32) *SettingUpsert {
	u.Add(setting.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SettingUpsert) SetDeletedAt(v uint32) *SettingUpsert {
	u.Set(setting.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SettingUpsert) UpdateDeletedAt() *SettingUpsert {
	u.SetExcluded(setting.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SettingUpsert) AddDeletedAt(v uint32) *SettingUpsert {
	u.Add(setting.FieldDeletedAt, v)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *SettingUpsert) SetCoinTypeID(v uuid.UUID) *SettingUpsert {
	u.Set(setting.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *SettingUpsert) UpdateCoinTypeID() *SettingUpsert {
	u.SetExcluded(setting.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *SettingUpsert) ClearCoinTypeID() *SettingUpsert {
	u.SetNull(setting.FieldCoinTypeID)
	return u
}

// SetFeeCoinTypeID sets the "fee_coin_type_id" field.
func (u *SettingUpsert) SetFeeCoinTypeID(v uuid.UUID) *SettingUpsert {
	u.Set(setting.FieldFeeCoinTypeID, v)
	return u
}

// UpdateFeeCoinTypeID sets the "fee_coin_type_id" field to the value that was provided on create.
func (u *SettingUpsert) UpdateFeeCoinTypeID() *SettingUpsert {
	u.SetExcluded(setting.FieldFeeCoinTypeID)
	return u
}

// ClearFeeCoinTypeID clears the value of the "fee_coin_type_id" field.
func (u *SettingUpsert) ClearFeeCoinTypeID() *SettingUpsert {
	u.SetNull(setting.FieldFeeCoinTypeID)
	return u
}

// SetWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field.
func (u *SettingUpsert) SetWithdrawFeeByStableUsd(v bool) *SettingUpsert {
	u.Set(setting.FieldWithdrawFeeByStableUsd, v)
	return u
}

// UpdateWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field to the value that was provided on create.
func (u *SettingUpsert) UpdateWithdrawFeeByStableUsd() *SettingUpsert {
	u.SetExcluded(setting.FieldWithdrawFeeByStableUsd)
	return u
}

// ClearWithdrawFeeByStableUsd clears the value of the "withdraw_fee_by_stable_usd" field.
func (u *SettingUpsert) ClearWithdrawFeeByStableUsd() *SettingUpsert {
	u.SetNull(setting.FieldWithdrawFeeByStableUsd)
	return u
}

// SetWithdrawFeeAmount sets the "withdraw_fee_amount" field.
func (u *SettingUpsert) SetWithdrawFeeAmount(v decimal.Decimal) *SettingUpsert {
	u.Set(setting.FieldWithdrawFeeAmount, v)
	return u
}

// UpdateWithdrawFeeAmount sets the "withdraw_fee_amount" field to the value that was provided on create.
func (u *SettingUpsert) UpdateWithdrawFeeAmount() *SettingUpsert {
	u.SetExcluded(setting.FieldWithdrawFeeAmount)
	return u
}

// ClearWithdrawFeeAmount clears the value of the "withdraw_fee_amount" field.
func (u *SettingUpsert) ClearWithdrawFeeAmount() *SettingUpsert {
	u.SetNull(setting.FieldWithdrawFeeAmount)
	return u
}

// SetCollectFeeAmount sets the "collect_fee_amount" field.
func (u *SettingUpsert) SetCollectFeeAmount(v decimal.Decimal) *SettingUpsert {
	u.Set(setting.FieldCollectFeeAmount, v)
	return u
}

// UpdateCollectFeeAmount sets the "collect_fee_amount" field to the value that was provided on create.
func (u *SettingUpsert) UpdateCollectFeeAmount() *SettingUpsert {
	u.SetExcluded(setting.FieldCollectFeeAmount)
	return u
}

// ClearCollectFeeAmount clears the value of the "collect_fee_amount" field.
func (u *SettingUpsert) ClearCollectFeeAmount() *SettingUpsert {
	u.SetNull(setting.FieldCollectFeeAmount)
	return u
}

// SetHotWalletFeeAmount sets the "hot_wallet_fee_amount" field.
func (u *SettingUpsert) SetHotWalletFeeAmount(v decimal.Decimal) *SettingUpsert {
	u.Set(setting.FieldHotWalletFeeAmount, v)
	return u
}

// UpdateHotWalletFeeAmount sets the "hot_wallet_fee_amount" field to the value that was provided on create.
func (u *SettingUpsert) UpdateHotWalletFeeAmount() *SettingUpsert {
	u.SetExcluded(setting.FieldHotWalletFeeAmount)
	return u
}

// ClearHotWalletFeeAmount clears the value of the "hot_wallet_fee_amount" field.
func (u *SettingUpsert) ClearHotWalletFeeAmount() *SettingUpsert {
	u.SetNull(setting.FieldHotWalletFeeAmount)
	return u
}

// SetLowFeeAmount sets the "low_fee_amount" field.
func (u *SettingUpsert) SetLowFeeAmount(v decimal.Decimal) *SettingUpsert {
	u.Set(setting.FieldLowFeeAmount, v)
	return u
}

// UpdateLowFeeAmount sets the "low_fee_amount" field to the value that was provided on create.
func (u *SettingUpsert) UpdateLowFeeAmount() *SettingUpsert {
	u.SetExcluded(setting.FieldLowFeeAmount)
	return u
}

// ClearLowFeeAmount clears the value of the "low_fee_amount" field.
func (u *SettingUpsert) ClearLowFeeAmount() *SettingUpsert {
	u.SetNull(setting.FieldLowFeeAmount)
	return u
}

// SetHotLowFeeAmount sets the "hot_low_fee_amount" field.
func (u *SettingUpsert) SetHotLowFeeAmount(v decimal.Decimal) *SettingUpsert {
	u.Set(setting.FieldHotLowFeeAmount, v)
	return u
}

// UpdateHotLowFeeAmount sets the "hot_low_fee_amount" field to the value that was provided on create.
func (u *SettingUpsert) UpdateHotLowFeeAmount() *SettingUpsert {
	u.SetExcluded(setting.FieldHotLowFeeAmount)
	return u
}

// ClearHotLowFeeAmount clears the value of the "hot_low_fee_amount" field.
func (u *SettingUpsert) ClearHotLowFeeAmount() *SettingUpsert {
	u.SetNull(setting.FieldHotLowFeeAmount)
	return u
}

// SetHotWalletAccountAmount sets the "hot_wallet_account_amount" field.
func (u *SettingUpsert) SetHotWalletAccountAmount(v decimal.Decimal) *SettingUpsert {
	u.Set(setting.FieldHotWalletAccountAmount, v)
	return u
}

// UpdateHotWalletAccountAmount sets the "hot_wallet_account_amount" field to the value that was provided on create.
func (u *SettingUpsert) UpdateHotWalletAccountAmount() *SettingUpsert {
	u.SetExcluded(setting.FieldHotWalletAccountAmount)
	return u
}

// ClearHotWalletAccountAmount clears the value of the "hot_wallet_account_amount" field.
func (u *SettingUpsert) ClearHotWalletAccountAmount() *SettingUpsert {
	u.SetNull(setting.FieldHotWalletAccountAmount)
	return u
}

// SetPaymentAccountCollectAmount sets the "payment_account_collect_amount" field.
func (u *SettingUpsert) SetPaymentAccountCollectAmount(v decimal.Decimal) *SettingUpsert {
	u.Set(setting.FieldPaymentAccountCollectAmount, v)
	return u
}

// UpdatePaymentAccountCollectAmount sets the "payment_account_collect_amount" field to the value that was provided on create.
func (u *SettingUpsert) UpdatePaymentAccountCollectAmount() *SettingUpsert {
	u.SetExcluded(setting.FieldPaymentAccountCollectAmount)
	return u
}

// ClearPaymentAccountCollectAmount clears the value of the "payment_account_collect_amount" field.
func (u *SettingUpsert) ClearPaymentAccountCollectAmount() *SettingUpsert {
	u.SetNull(setting.FieldPaymentAccountCollectAmount)
	return u
}

// SetLeastTransferAmount sets the "least_transfer_amount" field.
func (u *SettingUpsert) SetLeastTransferAmount(v decimal.Decimal) *SettingUpsert {
	u.Set(setting.FieldLeastTransferAmount, v)
	return u
}

// UpdateLeastTransferAmount sets the "least_transfer_amount" field to the value that was provided on create.
func (u *SettingUpsert) UpdateLeastTransferAmount() *SettingUpsert {
	u.SetExcluded(setting.FieldLeastTransferAmount)
	return u
}

// ClearLeastTransferAmount clears the value of the "least_transfer_amount" field.
func (u *SettingUpsert) ClearLeastTransferAmount() *SettingUpsert {
	u.SetNull(setting.FieldLeastTransferAmount)
	return u
}

// SetNeedMemo sets the "need_memo" field.
func (u *SettingUpsert) SetNeedMemo(v bool) *SettingUpsert {
	u.Set(setting.FieldNeedMemo, v)
	return u
}

// UpdateNeedMemo sets the "need_memo" field to the value that was provided on create.
func (u *SettingUpsert) UpdateNeedMemo() *SettingUpsert {
	u.SetExcluded(setting.FieldNeedMemo)
	return u
}

// ClearNeedMemo clears the value of the "need_memo" field.
func (u *SettingUpsert) ClearNeedMemo() *SettingUpsert {
	u.SetNull(setting.FieldNeedMemo)
	return u
}

// SetRefreshCurrency sets the "refresh_currency" field.
func (u *SettingUpsert) SetRefreshCurrency(v bool) *SettingUpsert {
	u.Set(setting.FieldRefreshCurrency, v)
	return u
}

// UpdateRefreshCurrency sets the "refresh_currency" field to the value that was provided on create.
func (u *SettingUpsert) UpdateRefreshCurrency() *SettingUpsert {
	u.SetExcluded(setting.FieldRefreshCurrency)
	return u
}

// ClearRefreshCurrency clears the value of the "refresh_currency" field.
func (u *SettingUpsert) ClearRefreshCurrency() *SettingUpsert {
	u.SetNull(setting.FieldRefreshCurrency)
	return u
}

// SetCheckNewAddressBalance sets the "check_new_address_balance" field.
func (u *SettingUpsert) SetCheckNewAddressBalance(v bool) *SettingUpsert {
	u.Set(setting.FieldCheckNewAddressBalance, v)
	return u
}

// UpdateCheckNewAddressBalance sets the "check_new_address_balance" field to the value that was provided on create.
func (u *SettingUpsert) UpdateCheckNewAddressBalance() *SettingUpsert {
	u.SetExcluded(setting.FieldCheckNewAddressBalance)
	return u
}

// ClearCheckNewAddressBalance clears the value of the "check_new_address_balance" field.
func (u *SettingUpsert) ClearCheckNewAddressBalance() *SettingUpsert {
	u.SetNull(setting.FieldCheckNewAddressBalance)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Setting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(setting.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SettingUpsertOne) UpdateNewValues() *SettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(setting.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Setting.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SettingUpsertOne) Ignore() *SettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SettingUpsertOne) DoNothing() *SettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SettingCreate.OnConflict
// documentation for more info.
func (u *SettingUpsertOne) Update(set func(*SettingUpsert)) *SettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SettingUpsertOne) SetCreatedAt(v uint32) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SettingUpsertOne) AddCreatedAt(v uint32) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateCreatedAt() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SettingUpsertOne) SetUpdatedAt(v uint32) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SettingUpsertOne) AddUpdatedAt(v uint32) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateUpdatedAt() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SettingUpsertOne) SetDeletedAt(v uint32) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SettingUpsertOne) AddDeletedAt(v uint32) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateDeletedAt() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *SettingUpsertOne) SetCoinTypeID(v uuid.UUID) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateCoinTypeID() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *SettingUpsertOne) ClearCoinTypeID() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetFeeCoinTypeID sets the "fee_coin_type_id" field.
func (u *SettingUpsertOne) SetFeeCoinTypeID(v uuid.UUID) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetFeeCoinTypeID(v)
	})
}

// UpdateFeeCoinTypeID sets the "fee_coin_type_id" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateFeeCoinTypeID() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateFeeCoinTypeID()
	})
}

// ClearFeeCoinTypeID clears the value of the "fee_coin_type_id" field.
func (u *SettingUpsertOne) ClearFeeCoinTypeID() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearFeeCoinTypeID()
	})
}

// SetWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field.
func (u *SettingUpsertOne) SetWithdrawFeeByStableUsd(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetWithdrawFeeByStableUsd(v)
	})
}

// UpdateWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateWithdrawFeeByStableUsd() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateWithdrawFeeByStableUsd()
	})
}

// ClearWithdrawFeeByStableUsd clears the value of the "withdraw_fee_by_stable_usd" field.
func (u *SettingUpsertOne) ClearWithdrawFeeByStableUsd() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearWithdrawFeeByStableUsd()
	})
}

// SetWithdrawFeeAmount sets the "withdraw_fee_amount" field.
func (u *SettingUpsertOne) SetWithdrawFeeAmount(v decimal.Decimal) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetWithdrawFeeAmount(v)
	})
}

// UpdateWithdrawFeeAmount sets the "withdraw_fee_amount" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateWithdrawFeeAmount() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateWithdrawFeeAmount()
	})
}

// ClearWithdrawFeeAmount clears the value of the "withdraw_fee_amount" field.
func (u *SettingUpsertOne) ClearWithdrawFeeAmount() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearWithdrawFeeAmount()
	})
}

// SetCollectFeeAmount sets the "collect_fee_amount" field.
func (u *SettingUpsertOne) SetCollectFeeAmount(v decimal.Decimal) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetCollectFeeAmount(v)
	})
}

// UpdateCollectFeeAmount sets the "collect_fee_amount" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateCollectFeeAmount() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateCollectFeeAmount()
	})
}

// ClearCollectFeeAmount clears the value of the "collect_fee_amount" field.
func (u *SettingUpsertOne) ClearCollectFeeAmount() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearCollectFeeAmount()
	})
}

// SetHotWalletFeeAmount sets the "hot_wallet_fee_amount" field.
func (u *SettingUpsertOne) SetHotWalletFeeAmount(v decimal.Decimal) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetHotWalletFeeAmount(v)
	})
}

// UpdateHotWalletFeeAmount sets the "hot_wallet_fee_amount" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateHotWalletFeeAmount() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateHotWalletFeeAmount()
	})
}

// ClearHotWalletFeeAmount clears the value of the "hot_wallet_fee_amount" field.
func (u *SettingUpsertOne) ClearHotWalletFeeAmount() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearHotWalletFeeAmount()
	})
}

// SetLowFeeAmount sets the "low_fee_amount" field.
func (u *SettingUpsertOne) SetLowFeeAmount(v decimal.Decimal) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetLowFeeAmount(v)
	})
}

// UpdateLowFeeAmount sets the "low_fee_amount" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateLowFeeAmount() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateLowFeeAmount()
	})
}

// ClearLowFeeAmount clears the value of the "low_fee_amount" field.
func (u *SettingUpsertOne) ClearLowFeeAmount() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearLowFeeAmount()
	})
}

// SetHotLowFeeAmount sets the "hot_low_fee_amount" field.
func (u *SettingUpsertOne) SetHotLowFeeAmount(v decimal.Decimal) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetHotLowFeeAmount(v)
	})
}

// UpdateHotLowFeeAmount sets the "hot_low_fee_amount" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateHotLowFeeAmount() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateHotLowFeeAmount()
	})
}

// ClearHotLowFeeAmount clears the value of the "hot_low_fee_amount" field.
func (u *SettingUpsertOne) ClearHotLowFeeAmount() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearHotLowFeeAmount()
	})
}

// SetHotWalletAccountAmount sets the "hot_wallet_account_amount" field.
func (u *SettingUpsertOne) SetHotWalletAccountAmount(v decimal.Decimal) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetHotWalletAccountAmount(v)
	})
}

// UpdateHotWalletAccountAmount sets the "hot_wallet_account_amount" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateHotWalletAccountAmount() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateHotWalletAccountAmount()
	})
}

// ClearHotWalletAccountAmount clears the value of the "hot_wallet_account_amount" field.
func (u *SettingUpsertOne) ClearHotWalletAccountAmount() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearHotWalletAccountAmount()
	})
}

// SetPaymentAccountCollectAmount sets the "payment_account_collect_amount" field.
func (u *SettingUpsertOne) SetPaymentAccountCollectAmount(v decimal.Decimal) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetPaymentAccountCollectAmount(v)
	})
}

// UpdatePaymentAccountCollectAmount sets the "payment_account_collect_amount" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdatePaymentAccountCollectAmount() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdatePaymentAccountCollectAmount()
	})
}

// ClearPaymentAccountCollectAmount clears the value of the "payment_account_collect_amount" field.
func (u *SettingUpsertOne) ClearPaymentAccountCollectAmount() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearPaymentAccountCollectAmount()
	})
}

// SetLeastTransferAmount sets the "least_transfer_amount" field.
func (u *SettingUpsertOne) SetLeastTransferAmount(v decimal.Decimal) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetLeastTransferAmount(v)
	})
}

// UpdateLeastTransferAmount sets the "least_transfer_amount" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateLeastTransferAmount() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateLeastTransferAmount()
	})
}

// ClearLeastTransferAmount clears the value of the "least_transfer_amount" field.
func (u *SettingUpsertOne) ClearLeastTransferAmount() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearLeastTransferAmount()
	})
}

// SetNeedMemo sets the "need_memo" field.
func (u *SettingUpsertOne) SetNeedMemo(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetNeedMemo(v)
	})
}

// UpdateNeedMemo sets the "need_memo" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateNeedMemo() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateNeedMemo()
	})
}

// ClearNeedMemo clears the value of the "need_memo" field.
func (u *SettingUpsertOne) ClearNeedMemo() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearNeedMemo()
	})
}

// SetRefreshCurrency sets the "refresh_currency" field.
func (u *SettingUpsertOne) SetRefreshCurrency(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetRefreshCurrency(v)
	})
}

// UpdateRefreshCurrency sets the "refresh_currency" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateRefreshCurrency() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateRefreshCurrency()
	})
}

// ClearRefreshCurrency clears the value of the "refresh_currency" field.
func (u *SettingUpsertOne) ClearRefreshCurrency() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearRefreshCurrency()
	})
}

// SetCheckNewAddressBalance sets the "check_new_address_balance" field.
func (u *SettingUpsertOne) SetCheckNewAddressBalance(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetCheckNewAddressBalance(v)
	})
}

// UpdateCheckNewAddressBalance sets the "check_new_address_balance" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateCheckNewAddressBalance() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateCheckNewAddressBalance()
	})
}

// ClearCheckNewAddressBalance clears the value of the "check_new_address_balance" field.
func (u *SettingUpsertOne) ClearCheckNewAddressBalance() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearCheckNewAddressBalance()
	})
}

// Exec executes the query.
func (u *SettingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SettingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SettingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SettingUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SettingUpsertOne.ID is not supported by MySQL driver. Use SettingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SettingUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SettingCreateBulk is the builder for creating many Setting entities in bulk.
type SettingCreateBulk struct {
	config
	builders []*SettingCreate
	conflict []sql.ConflictOption
}

// Save creates the Setting entities in the database.
func (scb *SettingCreateBulk) Save(ctx context.Context) ([]*Setting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Setting, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SettingCreateBulk) SaveX(ctx context.Context) []*Setting {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SettingCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SettingCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Setting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SettingUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (scb *SettingCreateBulk) OnConflict(opts ...sql.ConflictOption) *SettingUpsertBulk {
	scb.conflict = opts
	return &SettingUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Setting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *SettingCreateBulk) OnConflictColumns(columns ...string) *SettingUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SettingUpsertBulk{
		create: scb,
	}
}

// SettingUpsertBulk is the builder for "upsert"-ing
// a bulk of Setting nodes.
type SettingUpsertBulk struct {
	create *SettingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Setting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(setting.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SettingUpsertBulk) UpdateNewValues() *SettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(setting.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Setting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SettingUpsertBulk) Ignore() *SettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SettingUpsertBulk) DoNothing() *SettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SettingCreateBulk.OnConflict
// documentation for more info.
func (u *SettingUpsertBulk) Update(set func(*SettingUpsert)) *SettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SettingUpsertBulk) SetCreatedAt(v uint32) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SettingUpsertBulk) AddCreatedAt(v uint32) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateCreatedAt() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SettingUpsertBulk) SetUpdatedAt(v uint32) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SettingUpsertBulk) AddUpdatedAt(v uint32) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateUpdatedAt() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SettingUpsertBulk) SetDeletedAt(v uint32) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SettingUpsertBulk) AddDeletedAt(v uint32) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateDeletedAt() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *SettingUpsertBulk) SetCoinTypeID(v uuid.UUID) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateCoinTypeID() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *SettingUpsertBulk) ClearCoinTypeID() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetFeeCoinTypeID sets the "fee_coin_type_id" field.
func (u *SettingUpsertBulk) SetFeeCoinTypeID(v uuid.UUID) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetFeeCoinTypeID(v)
	})
}

// UpdateFeeCoinTypeID sets the "fee_coin_type_id" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateFeeCoinTypeID() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateFeeCoinTypeID()
	})
}

// ClearFeeCoinTypeID clears the value of the "fee_coin_type_id" field.
func (u *SettingUpsertBulk) ClearFeeCoinTypeID() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearFeeCoinTypeID()
	})
}

// SetWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field.
func (u *SettingUpsertBulk) SetWithdrawFeeByStableUsd(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetWithdrawFeeByStableUsd(v)
	})
}

// UpdateWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateWithdrawFeeByStableUsd() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateWithdrawFeeByStableUsd()
	})
}

// ClearWithdrawFeeByStableUsd clears the value of the "withdraw_fee_by_stable_usd" field.
func (u *SettingUpsertBulk) ClearWithdrawFeeByStableUsd() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearWithdrawFeeByStableUsd()
	})
}

// SetWithdrawFeeAmount sets the "withdraw_fee_amount" field.
func (u *SettingUpsertBulk) SetWithdrawFeeAmount(v decimal.Decimal) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetWithdrawFeeAmount(v)
	})
}

// UpdateWithdrawFeeAmount sets the "withdraw_fee_amount" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateWithdrawFeeAmount() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateWithdrawFeeAmount()
	})
}

// ClearWithdrawFeeAmount clears the value of the "withdraw_fee_amount" field.
func (u *SettingUpsertBulk) ClearWithdrawFeeAmount() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearWithdrawFeeAmount()
	})
}

// SetCollectFeeAmount sets the "collect_fee_amount" field.
func (u *SettingUpsertBulk) SetCollectFeeAmount(v decimal.Decimal) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetCollectFeeAmount(v)
	})
}

// UpdateCollectFeeAmount sets the "collect_fee_amount" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateCollectFeeAmount() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateCollectFeeAmount()
	})
}

// ClearCollectFeeAmount clears the value of the "collect_fee_amount" field.
func (u *SettingUpsertBulk) ClearCollectFeeAmount() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearCollectFeeAmount()
	})
}

// SetHotWalletFeeAmount sets the "hot_wallet_fee_amount" field.
func (u *SettingUpsertBulk) SetHotWalletFeeAmount(v decimal.Decimal) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetHotWalletFeeAmount(v)
	})
}

// UpdateHotWalletFeeAmount sets the "hot_wallet_fee_amount" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateHotWalletFeeAmount() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateHotWalletFeeAmount()
	})
}

// ClearHotWalletFeeAmount clears the value of the "hot_wallet_fee_amount" field.
func (u *SettingUpsertBulk) ClearHotWalletFeeAmount() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearHotWalletFeeAmount()
	})
}

// SetLowFeeAmount sets the "low_fee_amount" field.
func (u *SettingUpsertBulk) SetLowFeeAmount(v decimal.Decimal) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetLowFeeAmount(v)
	})
}

// UpdateLowFeeAmount sets the "low_fee_amount" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateLowFeeAmount() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateLowFeeAmount()
	})
}

// ClearLowFeeAmount clears the value of the "low_fee_amount" field.
func (u *SettingUpsertBulk) ClearLowFeeAmount() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearLowFeeAmount()
	})
}

// SetHotLowFeeAmount sets the "hot_low_fee_amount" field.
func (u *SettingUpsertBulk) SetHotLowFeeAmount(v decimal.Decimal) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetHotLowFeeAmount(v)
	})
}

// UpdateHotLowFeeAmount sets the "hot_low_fee_amount" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateHotLowFeeAmount() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateHotLowFeeAmount()
	})
}

// ClearHotLowFeeAmount clears the value of the "hot_low_fee_amount" field.
func (u *SettingUpsertBulk) ClearHotLowFeeAmount() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearHotLowFeeAmount()
	})
}

// SetHotWalletAccountAmount sets the "hot_wallet_account_amount" field.
func (u *SettingUpsertBulk) SetHotWalletAccountAmount(v decimal.Decimal) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetHotWalletAccountAmount(v)
	})
}

// UpdateHotWalletAccountAmount sets the "hot_wallet_account_amount" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateHotWalletAccountAmount() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateHotWalletAccountAmount()
	})
}

// ClearHotWalletAccountAmount clears the value of the "hot_wallet_account_amount" field.
func (u *SettingUpsertBulk) ClearHotWalletAccountAmount() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearHotWalletAccountAmount()
	})
}

// SetPaymentAccountCollectAmount sets the "payment_account_collect_amount" field.
func (u *SettingUpsertBulk) SetPaymentAccountCollectAmount(v decimal.Decimal) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetPaymentAccountCollectAmount(v)
	})
}

// UpdatePaymentAccountCollectAmount sets the "payment_account_collect_amount" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdatePaymentAccountCollectAmount() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdatePaymentAccountCollectAmount()
	})
}

// ClearPaymentAccountCollectAmount clears the value of the "payment_account_collect_amount" field.
func (u *SettingUpsertBulk) ClearPaymentAccountCollectAmount() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearPaymentAccountCollectAmount()
	})
}

// SetLeastTransferAmount sets the "least_transfer_amount" field.
func (u *SettingUpsertBulk) SetLeastTransferAmount(v decimal.Decimal) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetLeastTransferAmount(v)
	})
}

// UpdateLeastTransferAmount sets the "least_transfer_amount" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateLeastTransferAmount() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateLeastTransferAmount()
	})
}

// ClearLeastTransferAmount clears the value of the "least_transfer_amount" field.
func (u *SettingUpsertBulk) ClearLeastTransferAmount() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearLeastTransferAmount()
	})
}

// SetNeedMemo sets the "need_memo" field.
func (u *SettingUpsertBulk) SetNeedMemo(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetNeedMemo(v)
	})
}

// UpdateNeedMemo sets the "need_memo" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateNeedMemo() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateNeedMemo()
	})
}

// ClearNeedMemo clears the value of the "need_memo" field.
func (u *SettingUpsertBulk) ClearNeedMemo() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearNeedMemo()
	})
}

// SetRefreshCurrency sets the "refresh_currency" field.
func (u *SettingUpsertBulk) SetRefreshCurrency(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetRefreshCurrency(v)
	})
}

// UpdateRefreshCurrency sets the "refresh_currency" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateRefreshCurrency() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateRefreshCurrency()
	})
}

// ClearRefreshCurrency clears the value of the "refresh_currency" field.
func (u *SettingUpsertBulk) ClearRefreshCurrency() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearRefreshCurrency()
	})
}

// SetCheckNewAddressBalance sets the "check_new_address_balance" field.
func (u *SettingUpsertBulk) SetCheckNewAddressBalance(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetCheckNewAddressBalance(v)
	})
}

// UpdateCheckNewAddressBalance sets the "check_new_address_balance" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateCheckNewAddressBalance() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateCheckNewAddressBalance()
	})
}

// ClearCheckNewAddressBalance clears the value of the "check_new_address_balance" field.
func (u *SettingUpsertBulk) ClearCheckNewAddressBalance() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearCheckNewAddressBalance()
	})
}

// Exec executes the query.
func (u *SettingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SettingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SettingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SettingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
