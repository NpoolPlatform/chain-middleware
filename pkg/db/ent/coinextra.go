// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/coinextra"
	"github.com/google/uuid"
)

// CoinExtra is the model entity for the CoinExtra schema.
type CoinExtra struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// HomePage holds the value of the "home_page" field.
	HomePage string `json:"home_page,omitempty"`
	// Specs holds the value of the "specs" field.
	Specs string `json:"specs,omitempty"`
	// StableUsd holds the value of the "stable_usd" field.
	StableUsd bool `json:"stable_usd,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CoinExtra) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case coinextra.FieldStableUsd:
			values[i] = new(sql.NullBool)
		case coinextra.FieldID, coinextra.FieldCreatedAt, coinextra.FieldUpdatedAt, coinextra.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case coinextra.FieldHomePage, coinextra.FieldSpecs:
			values[i] = new(sql.NullString)
		case coinextra.FieldEntID, coinextra.FieldCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CoinExtra", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CoinExtra fields.
func (ce *CoinExtra) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coinextra.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ce.ID = int(value.Int64)
		case coinextra.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ce.CreatedAt = uint32(value.Int64)
			}
		case coinextra.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ce.UpdatedAt = uint32(value.Int64)
			}
		case coinextra.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ce.DeletedAt = uint32(value.Int64)
			}
		case coinextra.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				ce.EntID = *value
			}
		case coinextra.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				ce.CoinTypeID = *value
			}
		case coinextra.FieldHomePage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field home_page", values[i])
			} else if value.Valid {
				ce.HomePage = value.String
			}
		case coinextra.FieldSpecs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field specs", values[i])
			} else if value.Valid {
				ce.Specs = value.String
			}
		case coinextra.FieldStableUsd:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field stable_usd", values[i])
			} else if value.Valid {
				ce.StableUsd = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CoinExtra.
// Note that you need to call CoinExtra.Unwrap() before calling this method if this CoinExtra
// was returned from a transaction, and the transaction was committed or rolled back.
func (ce *CoinExtra) Update() *CoinExtraUpdateOne {
	return (&CoinExtraClient{config: ce.config}).UpdateOne(ce)
}

// Unwrap unwraps the CoinExtra entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ce *CoinExtra) Unwrap() *CoinExtra {
	_tx, ok := ce.config.driver.(*txDriver)
	if !ok {
		panic("ent: CoinExtra is not a transactional entity")
	}
	ce.config.driver = _tx.drv
	return ce
}

// String implements the fmt.Stringer.
func (ce *CoinExtra) String() string {
	var builder strings.Builder
	builder.WriteString("CoinExtra(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ce.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ce.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ce.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ce.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", ce.EntID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", ce.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("home_page=")
	builder.WriteString(ce.HomePage)
	builder.WriteString(", ")
	builder.WriteString("specs=")
	builder.WriteString(ce.Specs)
	builder.WriteString(", ")
	builder.WriteString("stable_usd=")
	builder.WriteString(fmt.Sprintf("%v", ce.StableUsd))
	builder.WriteByte(')')
	return builder.String()
}

// CoinExtras is a parsable slice of CoinExtra.
type CoinExtras []*CoinExtra

func (ce CoinExtras) config(cfg config) {
	for _i := range ce {
		ce[_i].config = cfg
	}
}
