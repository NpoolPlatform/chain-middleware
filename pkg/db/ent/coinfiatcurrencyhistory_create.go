// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/coinfiatcurrencyhistory"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// CoinFiatCurrencyHistoryCreate is the builder for creating a CoinFiatCurrencyHistory entity.
type CoinFiatCurrencyHistoryCreate struct {
	config
	mutation *CoinFiatCurrencyHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cfchc *CoinFiatCurrencyHistoryCreate) SetCreatedAt(u uint32) *CoinFiatCurrencyHistoryCreate {
	cfchc.mutation.SetCreatedAt(u)
	return cfchc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cfchc *CoinFiatCurrencyHistoryCreate) SetNillableCreatedAt(u *uint32) *CoinFiatCurrencyHistoryCreate {
	if u != nil {
		cfchc.SetCreatedAt(*u)
	}
	return cfchc
}

// SetUpdatedAt sets the "updated_at" field.
func (cfchc *CoinFiatCurrencyHistoryCreate) SetUpdatedAt(u uint32) *CoinFiatCurrencyHistoryCreate {
	cfchc.mutation.SetUpdatedAt(u)
	return cfchc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cfchc *CoinFiatCurrencyHistoryCreate) SetNillableUpdatedAt(u *uint32) *CoinFiatCurrencyHistoryCreate {
	if u != nil {
		cfchc.SetUpdatedAt(*u)
	}
	return cfchc
}

// SetDeletedAt sets the "deleted_at" field.
func (cfchc *CoinFiatCurrencyHistoryCreate) SetDeletedAt(u uint32) *CoinFiatCurrencyHistoryCreate {
	cfchc.mutation.SetDeletedAt(u)
	return cfchc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cfchc *CoinFiatCurrencyHistoryCreate) SetNillableDeletedAt(u *uint32) *CoinFiatCurrencyHistoryCreate {
	if u != nil {
		cfchc.SetDeletedAt(*u)
	}
	return cfchc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cfchc *CoinFiatCurrencyHistoryCreate) SetCoinTypeID(u uuid.UUID) *CoinFiatCurrencyHistoryCreate {
	cfchc.mutation.SetCoinTypeID(u)
	return cfchc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (cfchc *CoinFiatCurrencyHistoryCreate) SetNillableCoinTypeID(u *uuid.UUID) *CoinFiatCurrencyHistoryCreate {
	if u != nil {
		cfchc.SetCoinTypeID(*u)
	}
	return cfchc
}

// SetFiatID sets the "fiat_id" field.
func (cfchc *CoinFiatCurrencyHistoryCreate) SetFiatID(u uuid.UUID) *CoinFiatCurrencyHistoryCreate {
	cfchc.mutation.SetFiatID(u)
	return cfchc
}

// SetNillableFiatID sets the "fiat_id" field if the given value is not nil.
func (cfchc *CoinFiatCurrencyHistoryCreate) SetNillableFiatID(u *uuid.UUID) *CoinFiatCurrencyHistoryCreate {
	if u != nil {
		cfchc.SetFiatID(*u)
	}
	return cfchc
}

// SetFeedType sets the "feed_type" field.
func (cfchc *CoinFiatCurrencyHistoryCreate) SetFeedType(s string) *CoinFiatCurrencyHistoryCreate {
	cfchc.mutation.SetFeedType(s)
	return cfchc
}

// SetNillableFeedType sets the "feed_type" field if the given value is not nil.
func (cfchc *CoinFiatCurrencyHistoryCreate) SetNillableFeedType(s *string) *CoinFiatCurrencyHistoryCreate {
	if s != nil {
		cfchc.SetFeedType(*s)
	}
	return cfchc
}

// SetMarketValueLow sets the "market_value_low" field.
func (cfchc *CoinFiatCurrencyHistoryCreate) SetMarketValueLow(d decimal.Decimal) *CoinFiatCurrencyHistoryCreate {
	cfchc.mutation.SetMarketValueLow(d)
	return cfchc
}

// SetNillableMarketValueLow sets the "market_value_low" field if the given value is not nil.
func (cfchc *CoinFiatCurrencyHistoryCreate) SetNillableMarketValueLow(d *decimal.Decimal) *CoinFiatCurrencyHistoryCreate {
	if d != nil {
		cfchc.SetMarketValueLow(*d)
	}
	return cfchc
}

// SetMarketValueHigh sets the "market_value_high" field.
func (cfchc *CoinFiatCurrencyHistoryCreate) SetMarketValueHigh(d decimal.Decimal) *CoinFiatCurrencyHistoryCreate {
	cfchc.mutation.SetMarketValueHigh(d)
	return cfchc
}

// SetNillableMarketValueHigh sets the "market_value_high" field if the given value is not nil.
func (cfchc *CoinFiatCurrencyHistoryCreate) SetNillableMarketValueHigh(d *decimal.Decimal) *CoinFiatCurrencyHistoryCreate {
	if d != nil {
		cfchc.SetMarketValueHigh(*d)
	}
	return cfchc
}

// SetID sets the "id" field.
func (cfchc *CoinFiatCurrencyHistoryCreate) SetID(u uint32) *CoinFiatCurrencyHistoryCreate {
	cfchc.mutation.SetID(u)
	return cfchc
}

// Mutation returns the CoinFiatCurrencyHistoryMutation object of the builder.
func (cfchc *CoinFiatCurrencyHistoryCreate) Mutation() *CoinFiatCurrencyHistoryMutation {
	return cfchc.mutation
}

// Save creates the CoinFiatCurrencyHistory in the database.
func (cfchc *CoinFiatCurrencyHistoryCreate) Save(ctx context.Context) (*CoinFiatCurrencyHistory, error) {
	var (
		err  error
		node *CoinFiatCurrencyHistory
	)
	if err := cfchc.defaults(); err != nil {
		return nil, err
	}
	if len(cfchc.hooks) == 0 {
		if err = cfchc.check(); err != nil {
			return nil, err
		}
		node, err = cfchc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinFiatCurrencyHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cfchc.check(); err != nil {
				return nil, err
			}
			cfchc.mutation = mutation
			if node, err = cfchc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cfchc.hooks) - 1; i >= 0; i-- {
			if cfchc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cfchc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cfchc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CoinFiatCurrencyHistory)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CoinFiatCurrencyHistoryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cfchc *CoinFiatCurrencyHistoryCreate) SaveX(ctx context.Context) *CoinFiatCurrencyHistory {
	v, err := cfchc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfchc *CoinFiatCurrencyHistoryCreate) Exec(ctx context.Context) error {
	_, err := cfchc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfchc *CoinFiatCurrencyHistoryCreate) ExecX(ctx context.Context) {
	if err := cfchc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfchc *CoinFiatCurrencyHistoryCreate) defaults() error {
	if _, ok := cfchc.mutation.CreatedAt(); !ok {
		if coinfiatcurrencyhistory.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized coinfiatcurrencyhistory.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := coinfiatcurrencyhistory.DefaultCreatedAt()
		cfchc.mutation.SetCreatedAt(v)
	}
	if _, ok := cfchc.mutation.UpdatedAt(); !ok {
		if coinfiatcurrencyhistory.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coinfiatcurrencyhistory.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coinfiatcurrencyhistory.DefaultUpdatedAt()
		cfchc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cfchc.mutation.DeletedAt(); !ok {
		if coinfiatcurrencyhistory.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized coinfiatcurrencyhistory.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := coinfiatcurrencyhistory.DefaultDeletedAt()
		cfchc.mutation.SetDeletedAt(v)
	}
	if _, ok := cfchc.mutation.CoinTypeID(); !ok {
		if coinfiatcurrencyhistory.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized coinfiatcurrencyhistory.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := coinfiatcurrencyhistory.DefaultCoinTypeID()
		cfchc.mutation.SetCoinTypeID(v)
	}
	if _, ok := cfchc.mutation.FiatID(); !ok {
		if coinfiatcurrencyhistory.DefaultFiatID == nil {
			return fmt.Errorf("ent: uninitialized coinfiatcurrencyhistory.DefaultFiatID (forgotten import ent/runtime?)")
		}
		v := coinfiatcurrencyhistory.DefaultFiatID()
		cfchc.mutation.SetFiatID(v)
	}
	if _, ok := cfchc.mutation.FeedType(); !ok {
		v := coinfiatcurrencyhistory.DefaultFeedType
		cfchc.mutation.SetFeedType(v)
	}
	if _, ok := cfchc.mutation.MarketValueLow(); !ok {
		v := coinfiatcurrencyhistory.DefaultMarketValueLow
		cfchc.mutation.SetMarketValueLow(v)
	}
	if _, ok := cfchc.mutation.MarketValueHigh(); !ok {
		v := coinfiatcurrencyhistory.DefaultMarketValueHigh
		cfchc.mutation.SetMarketValueHigh(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cfchc *CoinFiatCurrencyHistoryCreate) check() error {
	if _, ok := cfchc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CoinFiatCurrencyHistory.created_at"`)}
	}
	if _, ok := cfchc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CoinFiatCurrencyHistory.updated_at"`)}
	}
	if _, ok := cfchc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "CoinFiatCurrencyHistory.deleted_at"`)}
	}
	return nil
}

func (cfchc *CoinFiatCurrencyHistoryCreate) sqlSave(ctx context.Context) (*CoinFiatCurrencyHistory, error) {
	_node, _spec := cfchc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cfchc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (cfchc *CoinFiatCurrencyHistoryCreate) createSpec() (*CoinFiatCurrencyHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &CoinFiatCurrencyHistory{config: cfchc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: coinfiatcurrencyhistory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: coinfiatcurrencyhistory.FieldID,
			},
		}
	)
	_spec.OnConflict = cfchc.conflict
	if id, ok := cfchc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cfchc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiatcurrencyhistory.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cfchc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiatcurrencyhistory.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cfchc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiatcurrencyhistory.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := cfchc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinfiatcurrencyhistory.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := cfchc.mutation.FiatID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinfiatcurrencyhistory.FieldFiatID,
		})
		_node.FiatID = value
	}
	if value, ok := cfchc.mutation.FeedType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coinfiatcurrencyhistory.FieldFeedType,
		})
		_node.FeedType = value
	}
	if value, ok := cfchc.mutation.MarketValueLow(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: coinfiatcurrencyhistory.FieldMarketValueLow,
		})
		_node.MarketValueLow = value
	}
	if value, ok := cfchc.mutation.MarketValueHigh(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: coinfiatcurrencyhistory.FieldMarketValueHigh,
		})
		_node.MarketValueHigh = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinFiatCurrencyHistory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinFiatCurrencyHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cfchc *CoinFiatCurrencyHistoryCreate) OnConflict(opts ...sql.ConflictOption) *CoinFiatCurrencyHistoryUpsertOne {
	cfchc.conflict = opts
	return &CoinFiatCurrencyHistoryUpsertOne{
		create: cfchc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinFiatCurrencyHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cfchc *CoinFiatCurrencyHistoryCreate) OnConflictColumns(columns ...string) *CoinFiatCurrencyHistoryUpsertOne {
	cfchc.conflict = append(cfchc.conflict, sql.ConflictColumns(columns...))
	return &CoinFiatCurrencyHistoryUpsertOne{
		create: cfchc,
	}
}

type (
	// CoinFiatCurrencyHistoryUpsertOne is the builder for "upsert"-ing
	//  one CoinFiatCurrencyHistory node.
	CoinFiatCurrencyHistoryUpsertOne struct {
		create *CoinFiatCurrencyHistoryCreate
	}

	// CoinFiatCurrencyHistoryUpsert is the "OnConflict" setter.
	CoinFiatCurrencyHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CoinFiatCurrencyHistoryUpsert) SetCreatedAt(v uint32) *CoinFiatCurrencyHistoryUpsert {
	u.Set(coinfiatcurrencyhistory.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsert) UpdateCreatedAt() *CoinFiatCurrencyHistoryUpsert {
	u.SetExcluded(coinfiatcurrencyhistory.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CoinFiatCurrencyHistoryUpsert) AddCreatedAt(v uint32) *CoinFiatCurrencyHistoryUpsert {
	u.Add(coinfiatcurrencyhistory.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CoinFiatCurrencyHistoryUpsert) SetUpdatedAt(v uint32) *CoinFiatCurrencyHistoryUpsert {
	u.Set(coinfiatcurrencyhistory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsert) UpdateUpdatedAt() *CoinFiatCurrencyHistoryUpsert {
	u.SetExcluded(coinfiatcurrencyhistory.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CoinFiatCurrencyHistoryUpsert) AddUpdatedAt(v uint32) *CoinFiatCurrencyHistoryUpsert {
	u.Add(coinfiatcurrencyhistory.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CoinFiatCurrencyHistoryUpsert) SetDeletedAt(v uint32) *CoinFiatCurrencyHistoryUpsert {
	u.Set(coinfiatcurrencyhistory.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsert) UpdateDeletedAt() *CoinFiatCurrencyHistoryUpsert {
	u.SetExcluded(coinfiatcurrencyhistory.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CoinFiatCurrencyHistoryUpsert) AddDeletedAt(v uint32) *CoinFiatCurrencyHistoryUpsert {
	u.Add(coinfiatcurrencyhistory.FieldDeletedAt, v)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinFiatCurrencyHistoryUpsert) SetCoinTypeID(v uuid.UUID) *CoinFiatCurrencyHistoryUpsert {
	u.Set(coinfiatcurrencyhistory.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsert) UpdateCoinTypeID() *CoinFiatCurrencyHistoryUpsert {
	u.SetExcluded(coinfiatcurrencyhistory.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *CoinFiatCurrencyHistoryUpsert) ClearCoinTypeID() *CoinFiatCurrencyHistoryUpsert {
	u.SetNull(coinfiatcurrencyhistory.FieldCoinTypeID)
	return u
}

// SetFiatID sets the "fiat_id" field.
func (u *CoinFiatCurrencyHistoryUpsert) SetFiatID(v uuid.UUID) *CoinFiatCurrencyHistoryUpsert {
	u.Set(coinfiatcurrencyhistory.FieldFiatID, v)
	return u
}

// UpdateFiatID sets the "fiat_id" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsert) UpdateFiatID() *CoinFiatCurrencyHistoryUpsert {
	u.SetExcluded(coinfiatcurrencyhistory.FieldFiatID)
	return u
}

// ClearFiatID clears the value of the "fiat_id" field.
func (u *CoinFiatCurrencyHistoryUpsert) ClearFiatID() *CoinFiatCurrencyHistoryUpsert {
	u.SetNull(coinfiatcurrencyhistory.FieldFiatID)
	return u
}

// SetFeedType sets the "feed_type" field.
func (u *CoinFiatCurrencyHistoryUpsert) SetFeedType(v string) *CoinFiatCurrencyHistoryUpsert {
	u.Set(coinfiatcurrencyhistory.FieldFeedType, v)
	return u
}

// UpdateFeedType sets the "feed_type" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsert) UpdateFeedType() *CoinFiatCurrencyHistoryUpsert {
	u.SetExcluded(coinfiatcurrencyhistory.FieldFeedType)
	return u
}

// ClearFeedType clears the value of the "feed_type" field.
func (u *CoinFiatCurrencyHistoryUpsert) ClearFeedType() *CoinFiatCurrencyHistoryUpsert {
	u.SetNull(coinfiatcurrencyhistory.FieldFeedType)
	return u
}

// SetMarketValueLow sets the "market_value_low" field.
func (u *CoinFiatCurrencyHistoryUpsert) SetMarketValueLow(v decimal.Decimal) *CoinFiatCurrencyHistoryUpsert {
	u.Set(coinfiatcurrencyhistory.FieldMarketValueLow, v)
	return u
}

// UpdateMarketValueLow sets the "market_value_low" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsert) UpdateMarketValueLow() *CoinFiatCurrencyHistoryUpsert {
	u.SetExcluded(coinfiatcurrencyhistory.FieldMarketValueLow)
	return u
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (u *CoinFiatCurrencyHistoryUpsert) ClearMarketValueLow() *CoinFiatCurrencyHistoryUpsert {
	u.SetNull(coinfiatcurrencyhistory.FieldMarketValueLow)
	return u
}

// SetMarketValueHigh sets the "market_value_high" field.
func (u *CoinFiatCurrencyHistoryUpsert) SetMarketValueHigh(v decimal.Decimal) *CoinFiatCurrencyHistoryUpsert {
	u.Set(coinfiatcurrencyhistory.FieldMarketValueHigh, v)
	return u
}

// UpdateMarketValueHigh sets the "market_value_high" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsert) UpdateMarketValueHigh() *CoinFiatCurrencyHistoryUpsert {
	u.SetExcluded(coinfiatcurrencyhistory.FieldMarketValueHigh)
	return u
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (u *CoinFiatCurrencyHistoryUpsert) ClearMarketValueHigh() *CoinFiatCurrencyHistoryUpsert {
	u.SetNull(coinfiatcurrencyhistory.FieldMarketValueHigh)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CoinFiatCurrencyHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coinfiatcurrencyhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CoinFiatCurrencyHistoryUpsertOne) UpdateNewValues() *CoinFiatCurrencyHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(coinfiatcurrencyhistory.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CoinFiatCurrencyHistory.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CoinFiatCurrencyHistoryUpsertOne) Ignore() *CoinFiatCurrencyHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinFiatCurrencyHistoryUpsertOne) DoNothing() *CoinFiatCurrencyHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinFiatCurrencyHistoryCreate.OnConflict
// documentation for more info.
func (u *CoinFiatCurrencyHistoryUpsertOne) Update(set func(*CoinFiatCurrencyHistoryUpsert)) *CoinFiatCurrencyHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinFiatCurrencyHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CoinFiatCurrencyHistoryUpsertOne) SetCreatedAt(v uint32) *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CoinFiatCurrencyHistoryUpsertOne) AddCreatedAt(v uint32) *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsertOne) UpdateCreatedAt() *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CoinFiatCurrencyHistoryUpsertOne) SetUpdatedAt(v uint32) *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CoinFiatCurrencyHistoryUpsertOne) AddUpdatedAt(v uint32) *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsertOne) UpdateUpdatedAt() *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CoinFiatCurrencyHistoryUpsertOne) SetDeletedAt(v uint32) *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CoinFiatCurrencyHistoryUpsertOne) AddDeletedAt(v uint32) *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsertOne) UpdateDeletedAt() *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinFiatCurrencyHistoryUpsertOne) SetCoinTypeID(v uuid.UUID) *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsertOne) UpdateCoinTypeID() *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *CoinFiatCurrencyHistoryUpsertOne) ClearCoinTypeID() *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetFiatID sets the "fiat_id" field.
func (u *CoinFiatCurrencyHistoryUpsertOne) SetFiatID(v uuid.UUID) *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.SetFiatID(v)
	})
}

// UpdateFiatID sets the "fiat_id" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsertOne) UpdateFiatID() *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.UpdateFiatID()
	})
}

// ClearFiatID clears the value of the "fiat_id" field.
func (u *CoinFiatCurrencyHistoryUpsertOne) ClearFiatID() *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.ClearFiatID()
	})
}

// SetFeedType sets the "feed_type" field.
func (u *CoinFiatCurrencyHistoryUpsertOne) SetFeedType(v string) *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.SetFeedType(v)
	})
}

// UpdateFeedType sets the "feed_type" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsertOne) UpdateFeedType() *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.UpdateFeedType()
	})
}

// ClearFeedType clears the value of the "feed_type" field.
func (u *CoinFiatCurrencyHistoryUpsertOne) ClearFeedType() *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.ClearFeedType()
	})
}

// SetMarketValueLow sets the "market_value_low" field.
func (u *CoinFiatCurrencyHistoryUpsertOne) SetMarketValueLow(v decimal.Decimal) *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.SetMarketValueLow(v)
	})
}

// UpdateMarketValueLow sets the "market_value_low" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsertOne) UpdateMarketValueLow() *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.UpdateMarketValueLow()
	})
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (u *CoinFiatCurrencyHistoryUpsertOne) ClearMarketValueLow() *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.ClearMarketValueLow()
	})
}

// SetMarketValueHigh sets the "market_value_high" field.
func (u *CoinFiatCurrencyHistoryUpsertOne) SetMarketValueHigh(v decimal.Decimal) *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.SetMarketValueHigh(v)
	})
}

// UpdateMarketValueHigh sets the "market_value_high" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsertOne) UpdateMarketValueHigh() *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.UpdateMarketValueHigh()
	})
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (u *CoinFiatCurrencyHistoryUpsertOne) ClearMarketValueHigh() *CoinFiatCurrencyHistoryUpsertOne {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.ClearMarketValueHigh()
	})
}

// Exec executes the query.
func (u *CoinFiatCurrencyHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CoinFiatCurrencyHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinFiatCurrencyHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CoinFiatCurrencyHistoryUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CoinFiatCurrencyHistoryUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CoinFiatCurrencyHistoryCreateBulk is the builder for creating many CoinFiatCurrencyHistory entities in bulk.
type CoinFiatCurrencyHistoryCreateBulk struct {
	config
	builders []*CoinFiatCurrencyHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the CoinFiatCurrencyHistory entities in the database.
func (cfchcb *CoinFiatCurrencyHistoryCreateBulk) Save(ctx context.Context) ([]*CoinFiatCurrencyHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cfchcb.builders))
	nodes := make([]*CoinFiatCurrencyHistory, len(cfchcb.builders))
	mutators := make([]Mutator, len(cfchcb.builders))
	for i := range cfchcb.builders {
		func(i int, root context.Context) {
			builder := cfchcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CoinFiatCurrencyHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cfchcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cfchcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cfchcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cfchcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cfchcb *CoinFiatCurrencyHistoryCreateBulk) SaveX(ctx context.Context) []*CoinFiatCurrencyHistory {
	v, err := cfchcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfchcb *CoinFiatCurrencyHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := cfchcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfchcb *CoinFiatCurrencyHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := cfchcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinFiatCurrencyHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinFiatCurrencyHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cfchcb *CoinFiatCurrencyHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *CoinFiatCurrencyHistoryUpsertBulk {
	cfchcb.conflict = opts
	return &CoinFiatCurrencyHistoryUpsertBulk{
		create: cfchcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinFiatCurrencyHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cfchcb *CoinFiatCurrencyHistoryCreateBulk) OnConflictColumns(columns ...string) *CoinFiatCurrencyHistoryUpsertBulk {
	cfchcb.conflict = append(cfchcb.conflict, sql.ConflictColumns(columns...))
	return &CoinFiatCurrencyHistoryUpsertBulk{
		create: cfchcb,
	}
}

// CoinFiatCurrencyHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of CoinFiatCurrencyHistory nodes.
type CoinFiatCurrencyHistoryUpsertBulk struct {
	create *CoinFiatCurrencyHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CoinFiatCurrencyHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coinfiatcurrencyhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CoinFiatCurrencyHistoryUpsertBulk) UpdateNewValues() *CoinFiatCurrencyHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(coinfiatcurrencyhistory.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CoinFiatCurrencyHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CoinFiatCurrencyHistoryUpsertBulk) Ignore() *CoinFiatCurrencyHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinFiatCurrencyHistoryUpsertBulk) DoNothing() *CoinFiatCurrencyHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinFiatCurrencyHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *CoinFiatCurrencyHistoryUpsertBulk) Update(set func(*CoinFiatCurrencyHistoryUpsert)) *CoinFiatCurrencyHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinFiatCurrencyHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CoinFiatCurrencyHistoryUpsertBulk) SetCreatedAt(v uint32) *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CoinFiatCurrencyHistoryUpsertBulk) AddCreatedAt(v uint32) *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsertBulk) UpdateCreatedAt() *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CoinFiatCurrencyHistoryUpsertBulk) SetUpdatedAt(v uint32) *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CoinFiatCurrencyHistoryUpsertBulk) AddUpdatedAt(v uint32) *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsertBulk) UpdateUpdatedAt() *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CoinFiatCurrencyHistoryUpsertBulk) SetDeletedAt(v uint32) *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CoinFiatCurrencyHistoryUpsertBulk) AddDeletedAt(v uint32) *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsertBulk) UpdateDeletedAt() *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinFiatCurrencyHistoryUpsertBulk) SetCoinTypeID(v uuid.UUID) *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsertBulk) UpdateCoinTypeID() *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *CoinFiatCurrencyHistoryUpsertBulk) ClearCoinTypeID() *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetFiatID sets the "fiat_id" field.
func (u *CoinFiatCurrencyHistoryUpsertBulk) SetFiatID(v uuid.UUID) *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.SetFiatID(v)
	})
}

// UpdateFiatID sets the "fiat_id" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsertBulk) UpdateFiatID() *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.UpdateFiatID()
	})
}

// ClearFiatID clears the value of the "fiat_id" field.
func (u *CoinFiatCurrencyHistoryUpsertBulk) ClearFiatID() *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.ClearFiatID()
	})
}

// SetFeedType sets the "feed_type" field.
func (u *CoinFiatCurrencyHistoryUpsertBulk) SetFeedType(v string) *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.SetFeedType(v)
	})
}

// UpdateFeedType sets the "feed_type" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsertBulk) UpdateFeedType() *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.UpdateFeedType()
	})
}

// ClearFeedType clears the value of the "feed_type" field.
func (u *CoinFiatCurrencyHistoryUpsertBulk) ClearFeedType() *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.ClearFeedType()
	})
}

// SetMarketValueLow sets the "market_value_low" field.
func (u *CoinFiatCurrencyHistoryUpsertBulk) SetMarketValueLow(v decimal.Decimal) *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.SetMarketValueLow(v)
	})
}

// UpdateMarketValueLow sets the "market_value_low" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsertBulk) UpdateMarketValueLow() *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.UpdateMarketValueLow()
	})
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (u *CoinFiatCurrencyHistoryUpsertBulk) ClearMarketValueLow() *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.ClearMarketValueLow()
	})
}

// SetMarketValueHigh sets the "market_value_high" field.
func (u *CoinFiatCurrencyHistoryUpsertBulk) SetMarketValueHigh(v decimal.Decimal) *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.SetMarketValueHigh(v)
	})
}

// UpdateMarketValueHigh sets the "market_value_high" field to the value that was provided on create.
func (u *CoinFiatCurrencyHistoryUpsertBulk) UpdateMarketValueHigh() *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.UpdateMarketValueHigh()
	})
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (u *CoinFiatCurrencyHistoryUpsertBulk) ClearMarketValueHigh() *CoinFiatCurrencyHistoryUpsertBulk {
	return u.Update(func(s *CoinFiatCurrencyHistoryUpsert) {
		s.ClearMarketValueHigh()
	})
}

// Exec executes the query.
func (u *CoinFiatCurrencyHistoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CoinFiatCurrencyHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CoinFiatCurrencyHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinFiatCurrencyHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
