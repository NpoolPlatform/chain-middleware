// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/fiatcurrencytype"
	"github.com/google/uuid"
)

// FiatCurrencyTypeCreate is the builder for creating a FiatCurrencyType entity.
type FiatCurrencyTypeCreate struct {
	config
	mutation *FiatCurrencyTypeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fctc *FiatCurrencyTypeCreate) SetCreatedAt(u uint32) *FiatCurrencyTypeCreate {
	fctc.mutation.SetCreatedAt(u)
	return fctc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fctc *FiatCurrencyTypeCreate) SetNillableCreatedAt(u *uint32) *FiatCurrencyTypeCreate {
	if u != nil {
		fctc.SetCreatedAt(*u)
	}
	return fctc
}

// SetUpdatedAt sets the "updated_at" field.
func (fctc *FiatCurrencyTypeCreate) SetUpdatedAt(u uint32) *FiatCurrencyTypeCreate {
	fctc.mutation.SetUpdatedAt(u)
	return fctc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fctc *FiatCurrencyTypeCreate) SetNillableUpdatedAt(u *uint32) *FiatCurrencyTypeCreate {
	if u != nil {
		fctc.SetUpdatedAt(*u)
	}
	return fctc
}

// SetDeletedAt sets the "deleted_at" field.
func (fctc *FiatCurrencyTypeCreate) SetDeletedAt(u uint32) *FiatCurrencyTypeCreate {
	fctc.mutation.SetDeletedAt(u)
	return fctc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fctc *FiatCurrencyTypeCreate) SetNillableDeletedAt(u *uint32) *FiatCurrencyTypeCreate {
	if u != nil {
		fctc.SetDeletedAt(*u)
	}
	return fctc
}

// SetName sets the "name" field.
func (fctc *FiatCurrencyTypeCreate) SetName(s string) *FiatCurrencyTypeCreate {
	fctc.mutation.SetName(s)
	return fctc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fctc *FiatCurrencyTypeCreate) SetNillableName(s *string) *FiatCurrencyTypeCreate {
	if s != nil {
		fctc.SetName(*s)
	}
	return fctc
}

// SetLogo sets the "logo" field.
func (fctc *FiatCurrencyTypeCreate) SetLogo(s string) *FiatCurrencyTypeCreate {
	fctc.mutation.SetLogo(s)
	return fctc
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (fctc *FiatCurrencyTypeCreate) SetNillableLogo(s *string) *FiatCurrencyTypeCreate {
	if s != nil {
		fctc.SetLogo(*s)
	}
	return fctc
}

// SetID sets the "id" field.
func (fctc *FiatCurrencyTypeCreate) SetID(u uuid.UUID) *FiatCurrencyTypeCreate {
	fctc.mutation.SetID(u)
	return fctc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fctc *FiatCurrencyTypeCreate) SetNillableID(u *uuid.UUID) *FiatCurrencyTypeCreate {
	if u != nil {
		fctc.SetID(*u)
	}
	return fctc
}

// Mutation returns the FiatCurrencyTypeMutation object of the builder.
func (fctc *FiatCurrencyTypeCreate) Mutation() *FiatCurrencyTypeMutation {
	return fctc.mutation
}

// Save creates the FiatCurrencyType in the database.
func (fctc *FiatCurrencyTypeCreate) Save(ctx context.Context) (*FiatCurrencyType, error) {
	var (
		err  error
		node *FiatCurrencyType
	)
	if err := fctc.defaults(); err != nil {
		return nil, err
	}
	if len(fctc.hooks) == 0 {
		if err = fctc.check(); err != nil {
			return nil, err
		}
		node, err = fctc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FiatCurrencyTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fctc.check(); err != nil {
				return nil, err
			}
			fctc.mutation = mutation
			if node, err = fctc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fctc.hooks) - 1; i >= 0; i-- {
			if fctc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fctc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fctc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FiatCurrencyType)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FiatCurrencyTypeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fctc *FiatCurrencyTypeCreate) SaveX(ctx context.Context) *FiatCurrencyType {
	v, err := fctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fctc *FiatCurrencyTypeCreate) Exec(ctx context.Context) error {
	_, err := fctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fctc *FiatCurrencyTypeCreate) ExecX(ctx context.Context) {
	if err := fctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fctc *FiatCurrencyTypeCreate) defaults() error {
	if _, ok := fctc.mutation.CreatedAt(); !ok {
		if fiatcurrencytype.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized fiatcurrencytype.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := fiatcurrencytype.DefaultCreatedAt()
		fctc.mutation.SetCreatedAt(v)
	}
	if _, ok := fctc.mutation.UpdatedAt(); !ok {
		if fiatcurrencytype.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fiatcurrencytype.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fiatcurrencytype.DefaultUpdatedAt()
		fctc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fctc.mutation.DeletedAt(); !ok {
		if fiatcurrencytype.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized fiatcurrencytype.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := fiatcurrencytype.DefaultDeletedAt()
		fctc.mutation.SetDeletedAt(v)
	}
	if _, ok := fctc.mutation.Name(); !ok {
		v := fiatcurrencytype.DefaultName
		fctc.mutation.SetName(v)
	}
	if _, ok := fctc.mutation.Logo(); !ok {
		v := fiatcurrencytype.DefaultLogo
		fctc.mutation.SetLogo(v)
	}
	if _, ok := fctc.mutation.ID(); !ok {
		if fiatcurrencytype.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized fiatcurrencytype.DefaultID (forgotten import ent/runtime?)")
		}
		v := fiatcurrencytype.DefaultID()
		fctc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fctc *FiatCurrencyTypeCreate) check() error {
	if _, ok := fctc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FiatCurrencyType.created_at"`)}
	}
	if _, ok := fctc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FiatCurrencyType.updated_at"`)}
	}
	if _, ok := fctc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "FiatCurrencyType.deleted_at"`)}
	}
	return nil
}

func (fctc *FiatCurrencyTypeCreate) sqlSave(ctx context.Context) (*FiatCurrencyType, error) {
	_node, _spec := fctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (fctc *FiatCurrencyTypeCreate) createSpec() (*FiatCurrencyType, *sqlgraph.CreateSpec) {
	var (
		_node = &FiatCurrencyType{config: fctc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: fiatcurrencytype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: fiatcurrencytype.FieldID,
			},
		}
	)
	_spec.OnConflict = fctc.conflict
	if id, ok := fctc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fctc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencytype.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fctc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencytype.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := fctc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiatcurrencytype.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := fctc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fiatcurrencytype.FieldName,
		})
		_node.Name = value
	}
	if value, ok := fctc.mutation.Logo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fiatcurrencytype.FieldLogo,
		})
		_node.Logo = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FiatCurrencyType.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FiatCurrencyTypeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (fctc *FiatCurrencyTypeCreate) OnConflict(opts ...sql.ConflictOption) *FiatCurrencyTypeUpsertOne {
	fctc.conflict = opts
	return &FiatCurrencyTypeUpsertOne{
		create: fctc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FiatCurrencyType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fctc *FiatCurrencyTypeCreate) OnConflictColumns(columns ...string) *FiatCurrencyTypeUpsertOne {
	fctc.conflict = append(fctc.conflict, sql.ConflictColumns(columns...))
	return &FiatCurrencyTypeUpsertOne{
		create: fctc,
	}
}

type (
	// FiatCurrencyTypeUpsertOne is the builder for "upsert"-ing
	//  one FiatCurrencyType node.
	FiatCurrencyTypeUpsertOne struct {
		create *FiatCurrencyTypeCreate
	}

	// FiatCurrencyTypeUpsert is the "OnConflict" setter.
	FiatCurrencyTypeUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *FiatCurrencyTypeUpsert) SetCreatedAt(v uint32) *FiatCurrencyTypeUpsert {
	u.Set(fiatcurrencytype.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FiatCurrencyTypeUpsert) UpdateCreatedAt() *FiatCurrencyTypeUpsert {
	u.SetExcluded(fiatcurrencytype.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FiatCurrencyTypeUpsert) AddCreatedAt(v uint32) *FiatCurrencyTypeUpsert {
	u.Add(fiatcurrencytype.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FiatCurrencyTypeUpsert) SetUpdatedAt(v uint32) *FiatCurrencyTypeUpsert {
	u.Set(fiatcurrencytype.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FiatCurrencyTypeUpsert) UpdateUpdatedAt() *FiatCurrencyTypeUpsert {
	u.SetExcluded(fiatcurrencytype.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FiatCurrencyTypeUpsert) AddUpdatedAt(v uint32) *FiatCurrencyTypeUpsert {
	u.Add(fiatcurrencytype.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FiatCurrencyTypeUpsert) SetDeletedAt(v uint32) *FiatCurrencyTypeUpsert {
	u.Set(fiatcurrencytype.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FiatCurrencyTypeUpsert) UpdateDeletedAt() *FiatCurrencyTypeUpsert {
	u.SetExcluded(fiatcurrencytype.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FiatCurrencyTypeUpsert) AddDeletedAt(v uint32) *FiatCurrencyTypeUpsert {
	u.Add(fiatcurrencytype.FieldDeletedAt, v)
	return u
}

// SetName sets the "name" field.
func (u *FiatCurrencyTypeUpsert) SetName(v string) *FiatCurrencyTypeUpsert {
	u.Set(fiatcurrencytype.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FiatCurrencyTypeUpsert) UpdateName() *FiatCurrencyTypeUpsert {
	u.SetExcluded(fiatcurrencytype.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *FiatCurrencyTypeUpsert) ClearName() *FiatCurrencyTypeUpsert {
	u.SetNull(fiatcurrencytype.FieldName)
	return u
}

// SetLogo sets the "logo" field.
func (u *FiatCurrencyTypeUpsert) SetLogo(v string) *FiatCurrencyTypeUpsert {
	u.Set(fiatcurrencytype.FieldLogo, v)
	return u
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *FiatCurrencyTypeUpsert) UpdateLogo() *FiatCurrencyTypeUpsert {
	u.SetExcluded(fiatcurrencytype.FieldLogo)
	return u
}

// ClearLogo clears the value of the "logo" field.
func (u *FiatCurrencyTypeUpsert) ClearLogo() *FiatCurrencyTypeUpsert {
	u.SetNull(fiatcurrencytype.FieldLogo)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FiatCurrencyType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fiatcurrencytype.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FiatCurrencyTypeUpsertOne) UpdateNewValues() *FiatCurrencyTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(fiatcurrencytype.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.FiatCurrencyType.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *FiatCurrencyTypeUpsertOne) Ignore() *FiatCurrencyTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FiatCurrencyTypeUpsertOne) DoNothing() *FiatCurrencyTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FiatCurrencyTypeCreate.OnConflict
// documentation for more info.
func (u *FiatCurrencyTypeUpsertOne) Update(set func(*FiatCurrencyTypeUpsert)) *FiatCurrencyTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FiatCurrencyTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FiatCurrencyTypeUpsertOne) SetCreatedAt(v uint32) *FiatCurrencyTypeUpsertOne {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FiatCurrencyTypeUpsertOne) AddCreatedAt(v uint32) *FiatCurrencyTypeUpsertOne {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FiatCurrencyTypeUpsertOne) UpdateCreatedAt() *FiatCurrencyTypeUpsertOne {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FiatCurrencyTypeUpsertOne) SetUpdatedAt(v uint32) *FiatCurrencyTypeUpsertOne {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FiatCurrencyTypeUpsertOne) AddUpdatedAt(v uint32) *FiatCurrencyTypeUpsertOne {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FiatCurrencyTypeUpsertOne) UpdateUpdatedAt() *FiatCurrencyTypeUpsertOne {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FiatCurrencyTypeUpsertOne) SetDeletedAt(v uint32) *FiatCurrencyTypeUpsertOne {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FiatCurrencyTypeUpsertOne) AddDeletedAt(v uint32) *FiatCurrencyTypeUpsertOne {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FiatCurrencyTypeUpsertOne) UpdateDeletedAt() *FiatCurrencyTypeUpsertOne {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *FiatCurrencyTypeUpsertOne) SetName(v string) *FiatCurrencyTypeUpsertOne {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FiatCurrencyTypeUpsertOne) UpdateName() *FiatCurrencyTypeUpsertOne {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *FiatCurrencyTypeUpsertOne) ClearName() *FiatCurrencyTypeUpsertOne {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.ClearName()
	})
}

// SetLogo sets the "logo" field.
func (u *FiatCurrencyTypeUpsertOne) SetLogo(v string) *FiatCurrencyTypeUpsertOne {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *FiatCurrencyTypeUpsertOne) UpdateLogo() *FiatCurrencyTypeUpsertOne {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *FiatCurrencyTypeUpsertOne) ClearLogo() *FiatCurrencyTypeUpsertOne {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.ClearLogo()
	})
}

// Exec executes the query.
func (u *FiatCurrencyTypeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FiatCurrencyTypeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FiatCurrencyTypeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FiatCurrencyTypeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FiatCurrencyTypeUpsertOne.ID is not supported by MySQL driver. Use FiatCurrencyTypeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FiatCurrencyTypeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FiatCurrencyTypeCreateBulk is the builder for creating many FiatCurrencyType entities in bulk.
type FiatCurrencyTypeCreateBulk struct {
	config
	builders []*FiatCurrencyTypeCreate
	conflict []sql.ConflictOption
}

// Save creates the FiatCurrencyType entities in the database.
func (fctcb *FiatCurrencyTypeCreateBulk) Save(ctx context.Context) ([]*FiatCurrencyType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fctcb.builders))
	nodes := make([]*FiatCurrencyType, len(fctcb.builders))
	mutators := make([]Mutator, len(fctcb.builders))
	for i := range fctcb.builders {
		func(i int, root context.Context) {
			builder := fctcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FiatCurrencyTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fctcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fctcb *FiatCurrencyTypeCreateBulk) SaveX(ctx context.Context) []*FiatCurrencyType {
	v, err := fctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fctcb *FiatCurrencyTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := fctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fctcb *FiatCurrencyTypeCreateBulk) ExecX(ctx context.Context) {
	if err := fctcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FiatCurrencyType.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FiatCurrencyTypeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (fctcb *FiatCurrencyTypeCreateBulk) OnConflict(opts ...sql.ConflictOption) *FiatCurrencyTypeUpsertBulk {
	fctcb.conflict = opts
	return &FiatCurrencyTypeUpsertBulk{
		create: fctcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FiatCurrencyType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fctcb *FiatCurrencyTypeCreateBulk) OnConflictColumns(columns ...string) *FiatCurrencyTypeUpsertBulk {
	fctcb.conflict = append(fctcb.conflict, sql.ConflictColumns(columns...))
	return &FiatCurrencyTypeUpsertBulk{
		create: fctcb,
	}
}

// FiatCurrencyTypeUpsertBulk is the builder for "upsert"-ing
// a bulk of FiatCurrencyType nodes.
type FiatCurrencyTypeUpsertBulk struct {
	create *FiatCurrencyTypeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FiatCurrencyType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fiatcurrencytype.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FiatCurrencyTypeUpsertBulk) UpdateNewValues() *FiatCurrencyTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(fiatcurrencytype.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FiatCurrencyType.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *FiatCurrencyTypeUpsertBulk) Ignore() *FiatCurrencyTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FiatCurrencyTypeUpsertBulk) DoNothing() *FiatCurrencyTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FiatCurrencyTypeCreateBulk.OnConflict
// documentation for more info.
func (u *FiatCurrencyTypeUpsertBulk) Update(set func(*FiatCurrencyTypeUpsert)) *FiatCurrencyTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FiatCurrencyTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FiatCurrencyTypeUpsertBulk) SetCreatedAt(v uint32) *FiatCurrencyTypeUpsertBulk {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FiatCurrencyTypeUpsertBulk) AddCreatedAt(v uint32) *FiatCurrencyTypeUpsertBulk {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FiatCurrencyTypeUpsertBulk) UpdateCreatedAt() *FiatCurrencyTypeUpsertBulk {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FiatCurrencyTypeUpsertBulk) SetUpdatedAt(v uint32) *FiatCurrencyTypeUpsertBulk {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FiatCurrencyTypeUpsertBulk) AddUpdatedAt(v uint32) *FiatCurrencyTypeUpsertBulk {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FiatCurrencyTypeUpsertBulk) UpdateUpdatedAt() *FiatCurrencyTypeUpsertBulk {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FiatCurrencyTypeUpsertBulk) SetDeletedAt(v uint32) *FiatCurrencyTypeUpsertBulk {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FiatCurrencyTypeUpsertBulk) AddDeletedAt(v uint32) *FiatCurrencyTypeUpsertBulk {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FiatCurrencyTypeUpsertBulk) UpdateDeletedAt() *FiatCurrencyTypeUpsertBulk {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *FiatCurrencyTypeUpsertBulk) SetName(v string) *FiatCurrencyTypeUpsertBulk {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FiatCurrencyTypeUpsertBulk) UpdateName() *FiatCurrencyTypeUpsertBulk {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *FiatCurrencyTypeUpsertBulk) ClearName() *FiatCurrencyTypeUpsertBulk {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.ClearName()
	})
}

// SetLogo sets the "logo" field.
func (u *FiatCurrencyTypeUpsertBulk) SetLogo(v string) *FiatCurrencyTypeUpsertBulk {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *FiatCurrencyTypeUpsertBulk) UpdateLogo() *FiatCurrencyTypeUpsertBulk {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *FiatCurrencyTypeUpsertBulk) ClearLogo() *FiatCurrencyTypeUpsertBulk {
	return u.Update(func(s *FiatCurrencyTypeUpsert) {
		s.ClearLogo()
	})
}

// Exec executes the query.
func (u *FiatCurrencyTypeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FiatCurrencyTypeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FiatCurrencyTypeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FiatCurrencyTypeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
