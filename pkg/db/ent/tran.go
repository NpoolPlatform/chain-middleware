// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/tran"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// Tran is the model entity for the Tran schema.
type Tran struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// FromAccountID holds the value of the "from_account_id" field.
	FromAccountID uuid.UUID `json:"from_account_id,omitempty"`
	// ToAccountID holds the value of the "to_account_id" field.
	ToAccountID uuid.UUID `json:"to_account_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount decimal.Decimal `json:"amount,omitempty"`
	// FeeAmount holds the value of the "fee_amount" field.
	FeeAmount decimal.Decimal `json:"fee_amount,omitempty"`
	// ChainTxID holds the value of the "chain_tx_id" field.
	ChainTxID string `json:"chain_tx_id,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Extra holds the value of the "extra" field.
	Extra string `json:"extra,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tran) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tran.FieldAmount, tran.FieldFeeAmount:
			values[i] = new(decimal.Decimal)
		case tran.FieldID, tran.FieldCreatedAt, tran.FieldUpdatedAt, tran.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case tran.FieldChainTxID, tran.FieldState, tran.FieldExtra, tran.FieldType:
			values[i] = new(sql.NullString)
		case tran.FieldEntID, tran.FieldCoinTypeID, tran.FieldFromAccountID, tran.FieldToAccountID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Tran", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tran fields.
func (t *Tran) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tran.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = uint32(value.Int64)
		case tran.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = uint32(value.Int64)
			}
		case tran.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = uint32(value.Int64)
			}
		case tran.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				t.DeletedAt = uint32(value.Int64)
			}
		case tran.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				t.EntID = *value
			}
		case tran.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				t.CoinTypeID = *value
			}
		case tran.FieldFromAccountID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field from_account_id", values[i])
			} else if value != nil {
				t.FromAccountID = *value
			}
		case tran.FieldToAccountID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field to_account_id", values[i])
			} else if value != nil {
				t.ToAccountID = *value
			}
		case tran.FieldAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				t.Amount = *value
			}
		case tran.FieldFeeAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field fee_amount", values[i])
			} else if value != nil {
				t.FeeAmount = *value
			}
		case tran.FieldChainTxID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chain_tx_id", values[i])
			} else if value.Valid {
				t.ChainTxID = value.String
			}
		case tran.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				t.State = value.String
			}
		case tran.FieldExtra:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extra", values[i])
			} else if value.Valid {
				t.Extra = value.String
			}
		case tran.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				t.Type = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Tran.
// Note that you need to call Tran.Unwrap() before calling this method if this Tran
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tran) Update() *TranUpdateOne {
	return (&TranClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Tran entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tran) Unwrap() *Tran {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tran is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tran) String() string {
	var builder strings.Builder
	builder.WriteString("Tran(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", t.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", t.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", t.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", t.EntID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", t.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("from_account_id=")
	builder.WriteString(fmt.Sprintf("%v", t.FromAccountID))
	builder.WriteString(", ")
	builder.WriteString("to_account_id=")
	builder.WriteString(fmt.Sprintf("%v", t.ToAccountID))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", t.Amount))
	builder.WriteString(", ")
	builder.WriteString("fee_amount=")
	builder.WriteString(fmt.Sprintf("%v", t.FeeAmount))
	builder.WriteString(", ")
	builder.WriteString("chain_tx_id=")
	builder.WriteString(t.ChainTxID)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(t.State)
	builder.WriteString(", ")
	builder.WriteString("extra=")
	builder.WriteString(t.Extra)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(t.Type)
	builder.WriteByte(')')
	return builder.String()
}

// Trans is a parsable slice of Tran.
type Trans []*Tran

func (t Trans) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
