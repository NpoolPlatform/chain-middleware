// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/appcoin"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/coinbase"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/coindescription"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/coinextra"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/currency"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/currencyhistory"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/exchangerate"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/fiatcurrency"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/fiatcurrencytype"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/setting"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/tran"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAppCoin          = "AppCoin"
	TypeCoinBase         = "CoinBase"
	TypeCoinDescription  = "CoinDescription"
	TypeCoinExtra        = "CoinExtra"
	TypeCurrency         = "Currency"
	TypeCurrencyHistory  = "CurrencyHistory"
	TypeExchangeRate     = "ExchangeRate"
	TypeFiatCurrency     = "FiatCurrency"
	TypeFiatCurrencyType = "FiatCurrencyType"
	TypeSetting          = "Setting"
	TypeTran             = "Tran"
)

// AppCoinMutation represents an operation that mutates the AppCoin nodes in the graph.
type AppCoinMutation struct {
	config
	op                          Op
	typ                         string
	id                          *uuid.UUID
	created_at                  *uint32
	addcreated_at               *int32
	updated_at                  *uint32
	addupdated_at               *int32
	deleted_at                  *uint32
	adddeleted_at               *int32
	app_id                      *uuid.UUID
	coin_type_id                *uuid.UUID
	name                        *string
	display_names               *[]string
	logo                        *string
	for_pay                     *bool
	withdraw_auto_review_amount *decimal.Decimal
	product_page                *string
	disabled                    *bool
	daily_reward_amount         *decimal.Decimal
	display                     *bool
	display_index               *uint32
	adddisplay_index            *int32
	max_amount_per_withdraw     *decimal.Decimal
	clearedFields               map[string]struct{}
	done                        bool
	oldValue                    func(context.Context) (*AppCoin, error)
	predicates                  []predicate.AppCoin
}

var _ ent.Mutation = (*AppCoinMutation)(nil)

// appcoinOption allows management of the mutation configuration using functional options.
type appcoinOption func(*AppCoinMutation)

// newAppCoinMutation creates new mutation for the AppCoin entity.
func newAppCoinMutation(c config, op Op, opts ...appcoinOption) *AppCoinMutation {
	m := &AppCoinMutation{
		config:        c,
		op:            op,
		typ:           TypeAppCoin,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppCoinID sets the ID field of the mutation.
func withAppCoinID(id uuid.UUID) appcoinOption {
	return func(m *AppCoinMutation) {
		var (
			err   error
			once  sync.Once
			value *AppCoin
		)
		m.oldValue = func(ctx context.Context) (*AppCoin, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppCoin.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppCoin sets the old AppCoin of the mutation.
func withAppCoin(node *AppCoin) appcoinOption {
	return func(m *AppCoinMutation) {
		m.oldValue = func(context.Context) (*AppCoin, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppCoinMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppCoinMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppCoin entities.
func (m *AppCoinMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppCoinMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppCoinMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AppCoin.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AppCoinMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AppCoinMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *AppCoinMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *AppCoinMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AppCoinMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AppCoinMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AppCoinMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *AppCoinMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *AppCoinMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AppCoinMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AppCoinMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AppCoinMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *AppCoinMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *AppCoinMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AppCoinMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *AppCoinMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AppCoinMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *AppCoinMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[appcoin.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *AppCoinMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AppCoinMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, appcoin.FieldAppID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *AppCoinMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *AppCoinMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *AppCoinMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[appcoin.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *AppCoinMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *AppCoinMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, appcoin.FieldCoinTypeID)
}

// SetName sets the "name" field.
func (m *AppCoinMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AppCoinMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *AppCoinMutation) ClearName() {
	m.name = nil
	m.clearedFields[appcoin.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *AppCoinMutation) NameCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *AppCoinMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, appcoin.FieldName)
}

// SetDisplayNames sets the "display_names" field.
func (m *AppCoinMutation) SetDisplayNames(s []string) {
	m.display_names = &s
}

// DisplayNames returns the value of the "display_names" field in the mutation.
func (m *AppCoinMutation) DisplayNames() (r []string, exists bool) {
	v := m.display_names
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayNames returns the old "display_names" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldDisplayNames(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayNames is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayNames requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayNames: %w", err)
	}
	return oldValue.DisplayNames, nil
}

// ClearDisplayNames clears the value of the "display_names" field.
func (m *AppCoinMutation) ClearDisplayNames() {
	m.display_names = nil
	m.clearedFields[appcoin.FieldDisplayNames] = struct{}{}
}

// DisplayNamesCleared returns if the "display_names" field was cleared in this mutation.
func (m *AppCoinMutation) DisplayNamesCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldDisplayNames]
	return ok
}

// ResetDisplayNames resets all changes to the "display_names" field.
func (m *AppCoinMutation) ResetDisplayNames() {
	m.display_names = nil
	delete(m.clearedFields, appcoin.FieldDisplayNames)
}

// SetLogo sets the "logo" field.
func (m *AppCoinMutation) SetLogo(s string) {
	m.logo = &s
}

// Logo returns the value of the "logo" field in the mutation.
func (m *AppCoinMutation) Logo() (r string, exists bool) {
	v := m.logo
	if v == nil {
		return
	}
	return *v, true
}

// OldLogo returns the old "logo" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldLogo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogo: %w", err)
	}
	return oldValue.Logo, nil
}

// ClearLogo clears the value of the "logo" field.
func (m *AppCoinMutation) ClearLogo() {
	m.logo = nil
	m.clearedFields[appcoin.FieldLogo] = struct{}{}
}

// LogoCleared returns if the "logo" field was cleared in this mutation.
func (m *AppCoinMutation) LogoCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldLogo]
	return ok
}

// ResetLogo resets all changes to the "logo" field.
func (m *AppCoinMutation) ResetLogo() {
	m.logo = nil
	delete(m.clearedFields, appcoin.FieldLogo)
}

// SetForPay sets the "for_pay" field.
func (m *AppCoinMutation) SetForPay(b bool) {
	m.for_pay = &b
}

// ForPay returns the value of the "for_pay" field in the mutation.
func (m *AppCoinMutation) ForPay() (r bool, exists bool) {
	v := m.for_pay
	if v == nil {
		return
	}
	return *v, true
}

// OldForPay returns the old "for_pay" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldForPay(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldForPay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldForPay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldForPay: %w", err)
	}
	return oldValue.ForPay, nil
}

// ClearForPay clears the value of the "for_pay" field.
func (m *AppCoinMutation) ClearForPay() {
	m.for_pay = nil
	m.clearedFields[appcoin.FieldForPay] = struct{}{}
}

// ForPayCleared returns if the "for_pay" field was cleared in this mutation.
func (m *AppCoinMutation) ForPayCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldForPay]
	return ok
}

// ResetForPay resets all changes to the "for_pay" field.
func (m *AppCoinMutation) ResetForPay() {
	m.for_pay = nil
	delete(m.clearedFields, appcoin.FieldForPay)
}

// SetWithdrawAutoReviewAmount sets the "withdraw_auto_review_amount" field.
func (m *AppCoinMutation) SetWithdrawAutoReviewAmount(d decimal.Decimal) {
	m.withdraw_auto_review_amount = &d
}

// WithdrawAutoReviewAmount returns the value of the "withdraw_auto_review_amount" field in the mutation.
func (m *AppCoinMutation) WithdrawAutoReviewAmount() (r decimal.Decimal, exists bool) {
	v := m.withdraw_auto_review_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldWithdrawAutoReviewAmount returns the old "withdraw_auto_review_amount" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldWithdrawAutoReviewAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWithdrawAutoReviewAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWithdrawAutoReviewAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWithdrawAutoReviewAmount: %w", err)
	}
	return oldValue.WithdrawAutoReviewAmount, nil
}

// ClearWithdrawAutoReviewAmount clears the value of the "withdraw_auto_review_amount" field.
func (m *AppCoinMutation) ClearWithdrawAutoReviewAmount() {
	m.withdraw_auto_review_amount = nil
	m.clearedFields[appcoin.FieldWithdrawAutoReviewAmount] = struct{}{}
}

// WithdrawAutoReviewAmountCleared returns if the "withdraw_auto_review_amount" field was cleared in this mutation.
func (m *AppCoinMutation) WithdrawAutoReviewAmountCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldWithdrawAutoReviewAmount]
	return ok
}

// ResetWithdrawAutoReviewAmount resets all changes to the "withdraw_auto_review_amount" field.
func (m *AppCoinMutation) ResetWithdrawAutoReviewAmount() {
	m.withdraw_auto_review_amount = nil
	delete(m.clearedFields, appcoin.FieldWithdrawAutoReviewAmount)
}

// SetProductPage sets the "product_page" field.
func (m *AppCoinMutation) SetProductPage(s string) {
	m.product_page = &s
}

// ProductPage returns the value of the "product_page" field in the mutation.
func (m *AppCoinMutation) ProductPage() (r string, exists bool) {
	v := m.product_page
	if v == nil {
		return
	}
	return *v, true
}

// OldProductPage returns the old "product_page" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldProductPage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductPage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductPage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductPage: %w", err)
	}
	return oldValue.ProductPage, nil
}

// ClearProductPage clears the value of the "product_page" field.
func (m *AppCoinMutation) ClearProductPage() {
	m.product_page = nil
	m.clearedFields[appcoin.FieldProductPage] = struct{}{}
}

// ProductPageCleared returns if the "product_page" field was cleared in this mutation.
func (m *AppCoinMutation) ProductPageCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldProductPage]
	return ok
}

// ResetProductPage resets all changes to the "product_page" field.
func (m *AppCoinMutation) ResetProductPage() {
	m.product_page = nil
	delete(m.clearedFields, appcoin.FieldProductPage)
}

// SetDisabled sets the "disabled" field.
func (m *AppCoinMutation) SetDisabled(b bool) {
	m.disabled = &b
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *AppCoinMutation) Disabled() (r bool, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldDisabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// ClearDisabled clears the value of the "disabled" field.
func (m *AppCoinMutation) ClearDisabled() {
	m.disabled = nil
	m.clearedFields[appcoin.FieldDisabled] = struct{}{}
}

// DisabledCleared returns if the "disabled" field was cleared in this mutation.
func (m *AppCoinMutation) DisabledCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldDisabled]
	return ok
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *AppCoinMutation) ResetDisabled() {
	m.disabled = nil
	delete(m.clearedFields, appcoin.FieldDisabled)
}

// SetDailyRewardAmount sets the "daily_reward_amount" field.
func (m *AppCoinMutation) SetDailyRewardAmount(d decimal.Decimal) {
	m.daily_reward_amount = &d
}

// DailyRewardAmount returns the value of the "daily_reward_amount" field in the mutation.
func (m *AppCoinMutation) DailyRewardAmount() (r decimal.Decimal, exists bool) {
	v := m.daily_reward_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldDailyRewardAmount returns the old "daily_reward_amount" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldDailyRewardAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDailyRewardAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDailyRewardAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDailyRewardAmount: %w", err)
	}
	return oldValue.DailyRewardAmount, nil
}

// ClearDailyRewardAmount clears the value of the "daily_reward_amount" field.
func (m *AppCoinMutation) ClearDailyRewardAmount() {
	m.daily_reward_amount = nil
	m.clearedFields[appcoin.FieldDailyRewardAmount] = struct{}{}
}

// DailyRewardAmountCleared returns if the "daily_reward_amount" field was cleared in this mutation.
func (m *AppCoinMutation) DailyRewardAmountCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldDailyRewardAmount]
	return ok
}

// ResetDailyRewardAmount resets all changes to the "daily_reward_amount" field.
func (m *AppCoinMutation) ResetDailyRewardAmount() {
	m.daily_reward_amount = nil
	delete(m.clearedFields, appcoin.FieldDailyRewardAmount)
}

// SetDisplay sets the "display" field.
func (m *AppCoinMutation) SetDisplay(b bool) {
	m.display = &b
}

// Display returns the value of the "display" field in the mutation.
func (m *AppCoinMutation) Display() (r bool, exists bool) {
	v := m.display
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplay returns the old "display" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldDisplay(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplay: %w", err)
	}
	return oldValue.Display, nil
}

// ClearDisplay clears the value of the "display" field.
func (m *AppCoinMutation) ClearDisplay() {
	m.display = nil
	m.clearedFields[appcoin.FieldDisplay] = struct{}{}
}

// DisplayCleared returns if the "display" field was cleared in this mutation.
func (m *AppCoinMutation) DisplayCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldDisplay]
	return ok
}

// ResetDisplay resets all changes to the "display" field.
func (m *AppCoinMutation) ResetDisplay() {
	m.display = nil
	delete(m.clearedFields, appcoin.FieldDisplay)
}

// SetDisplayIndex sets the "display_index" field.
func (m *AppCoinMutation) SetDisplayIndex(u uint32) {
	m.display_index = &u
	m.adddisplay_index = nil
}

// DisplayIndex returns the value of the "display_index" field in the mutation.
func (m *AppCoinMutation) DisplayIndex() (r uint32, exists bool) {
	v := m.display_index
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayIndex returns the old "display_index" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldDisplayIndex(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayIndex: %w", err)
	}
	return oldValue.DisplayIndex, nil
}

// AddDisplayIndex adds u to the "display_index" field.
func (m *AppCoinMutation) AddDisplayIndex(u int32) {
	if m.adddisplay_index != nil {
		*m.adddisplay_index += u
	} else {
		m.adddisplay_index = &u
	}
}

// AddedDisplayIndex returns the value that was added to the "display_index" field in this mutation.
func (m *AppCoinMutation) AddedDisplayIndex() (r int32, exists bool) {
	v := m.adddisplay_index
	if v == nil {
		return
	}
	return *v, true
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (m *AppCoinMutation) ClearDisplayIndex() {
	m.display_index = nil
	m.adddisplay_index = nil
	m.clearedFields[appcoin.FieldDisplayIndex] = struct{}{}
}

// DisplayIndexCleared returns if the "display_index" field was cleared in this mutation.
func (m *AppCoinMutation) DisplayIndexCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldDisplayIndex]
	return ok
}

// ResetDisplayIndex resets all changes to the "display_index" field.
func (m *AppCoinMutation) ResetDisplayIndex() {
	m.display_index = nil
	m.adddisplay_index = nil
	delete(m.clearedFields, appcoin.FieldDisplayIndex)
}

// SetMaxAmountPerWithdraw sets the "max_amount_per_withdraw" field.
func (m *AppCoinMutation) SetMaxAmountPerWithdraw(d decimal.Decimal) {
	m.max_amount_per_withdraw = &d
}

// MaxAmountPerWithdraw returns the value of the "max_amount_per_withdraw" field in the mutation.
func (m *AppCoinMutation) MaxAmountPerWithdraw() (r decimal.Decimal, exists bool) {
	v := m.max_amount_per_withdraw
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxAmountPerWithdraw returns the old "max_amount_per_withdraw" field's value of the AppCoin entity.
// If the AppCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCoinMutation) OldMaxAmountPerWithdraw(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxAmountPerWithdraw is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxAmountPerWithdraw requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxAmountPerWithdraw: %w", err)
	}
	return oldValue.MaxAmountPerWithdraw, nil
}

// ClearMaxAmountPerWithdraw clears the value of the "max_amount_per_withdraw" field.
func (m *AppCoinMutation) ClearMaxAmountPerWithdraw() {
	m.max_amount_per_withdraw = nil
	m.clearedFields[appcoin.FieldMaxAmountPerWithdraw] = struct{}{}
}

// MaxAmountPerWithdrawCleared returns if the "max_amount_per_withdraw" field was cleared in this mutation.
func (m *AppCoinMutation) MaxAmountPerWithdrawCleared() bool {
	_, ok := m.clearedFields[appcoin.FieldMaxAmountPerWithdraw]
	return ok
}

// ResetMaxAmountPerWithdraw resets all changes to the "max_amount_per_withdraw" field.
func (m *AppCoinMutation) ResetMaxAmountPerWithdraw() {
	m.max_amount_per_withdraw = nil
	delete(m.clearedFields, appcoin.FieldMaxAmountPerWithdraw)
}

// Where appends a list predicates to the AppCoinMutation builder.
func (m *AppCoinMutation) Where(ps ...predicate.AppCoin) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppCoinMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppCoin).
func (m *AppCoinMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppCoinMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.created_at != nil {
		fields = append(fields, appcoin.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, appcoin.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, appcoin.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, appcoin.FieldAppID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, appcoin.FieldCoinTypeID)
	}
	if m.name != nil {
		fields = append(fields, appcoin.FieldName)
	}
	if m.display_names != nil {
		fields = append(fields, appcoin.FieldDisplayNames)
	}
	if m.logo != nil {
		fields = append(fields, appcoin.FieldLogo)
	}
	if m.for_pay != nil {
		fields = append(fields, appcoin.FieldForPay)
	}
	if m.withdraw_auto_review_amount != nil {
		fields = append(fields, appcoin.FieldWithdrawAutoReviewAmount)
	}
	if m.product_page != nil {
		fields = append(fields, appcoin.FieldProductPage)
	}
	if m.disabled != nil {
		fields = append(fields, appcoin.FieldDisabled)
	}
	if m.daily_reward_amount != nil {
		fields = append(fields, appcoin.FieldDailyRewardAmount)
	}
	if m.display != nil {
		fields = append(fields, appcoin.FieldDisplay)
	}
	if m.display_index != nil {
		fields = append(fields, appcoin.FieldDisplayIndex)
	}
	if m.max_amount_per_withdraw != nil {
		fields = append(fields, appcoin.FieldMaxAmountPerWithdraw)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppCoinMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appcoin.FieldCreatedAt:
		return m.CreatedAt()
	case appcoin.FieldUpdatedAt:
		return m.UpdatedAt()
	case appcoin.FieldDeletedAt:
		return m.DeletedAt()
	case appcoin.FieldAppID:
		return m.AppID()
	case appcoin.FieldCoinTypeID:
		return m.CoinTypeID()
	case appcoin.FieldName:
		return m.Name()
	case appcoin.FieldDisplayNames:
		return m.DisplayNames()
	case appcoin.FieldLogo:
		return m.Logo()
	case appcoin.FieldForPay:
		return m.ForPay()
	case appcoin.FieldWithdrawAutoReviewAmount:
		return m.WithdrawAutoReviewAmount()
	case appcoin.FieldProductPage:
		return m.ProductPage()
	case appcoin.FieldDisabled:
		return m.Disabled()
	case appcoin.FieldDailyRewardAmount:
		return m.DailyRewardAmount()
	case appcoin.FieldDisplay:
		return m.Display()
	case appcoin.FieldDisplayIndex:
		return m.DisplayIndex()
	case appcoin.FieldMaxAmountPerWithdraw:
		return m.MaxAmountPerWithdraw()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppCoinMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appcoin.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case appcoin.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case appcoin.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case appcoin.FieldAppID:
		return m.OldAppID(ctx)
	case appcoin.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case appcoin.FieldName:
		return m.OldName(ctx)
	case appcoin.FieldDisplayNames:
		return m.OldDisplayNames(ctx)
	case appcoin.FieldLogo:
		return m.OldLogo(ctx)
	case appcoin.FieldForPay:
		return m.OldForPay(ctx)
	case appcoin.FieldWithdrawAutoReviewAmount:
		return m.OldWithdrawAutoReviewAmount(ctx)
	case appcoin.FieldProductPage:
		return m.OldProductPage(ctx)
	case appcoin.FieldDisabled:
		return m.OldDisabled(ctx)
	case appcoin.FieldDailyRewardAmount:
		return m.OldDailyRewardAmount(ctx)
	case appcoin.FieldDisplay:
		return m.OldDisplay(ctx)
	case appcoin.FieldDisplayIndex:
		return m.OldDisplayIndex(ctx)
	case appcoin.FieldMaxAmountPerWithdraw:
		return m.OldMaxAmountPerWithdraw(ctx)
	}
	return nil, fmt.Errorf("unknown AppCoin field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppCoinMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appcoin.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case appcoin.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case appcoin.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case appcoin.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case appcoin.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case appcoin.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case appcoin.FieldDisplayNames:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayNames(v)
		return nil
	case appcoin.FieldLogo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogo(v)
		return nil
	case appcoin.FieldForPay:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetForPay(v)
		return nil
	case appcoin.FieldWithdrawAutoReviewAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWithdrawAutoReviewAmount(v)
		return nil
	case appcoin.FieldProductPage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductPage(v)
		return nil
	case appcoin.FieldDisabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	case appcoin.FieldDailyRewardAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDailyRewardAmount(v)
		return nil
	case appcoin.FieldDisplay:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplay(v)
		return nil
	case appcoin.FieldDisplayIndex:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayIndex(v)
		return nil
	case appcoin.FieldMaxAmountPerWithdraw:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxAmountPerWithdraw(v)
		return nil
	}
	return fmt.Errorf("unknown AppCoin field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppCoinMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, appcoin.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, appcoin.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, appcoin.FieldDeletedAt)
	}
	if m.adddisplay_index != nil {
		fields = append(fields, appcoin.FieldDisplayIndex)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppCoinMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case appcoin.FieldCreatedAt:
		return m.AddedCreatedAt()
	case appcoin.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case appcoin.FieldDeletedAt:
		return m.AddedDeletedAt()
	case appcoin.FieldDisplayIndex:
		return m.AddedDisplayIndex()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppCoinMutation) AddField(name string, value ent.Value) error {
	switch name {
	case appcoin.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case appcoin.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case appcoin.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case appcoin.FieldDisplayIndex:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDisplayIndex(v)
		return nil
	}
	return fmt.Errorf("unknown AppCoin numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppCoinMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(appcoin.FieldAppID) {
		fields = append(fields, appcoin.FieldAppID)
	}
	if m.FieldCleared(appcoin.FieldCoinTypeID) {
		fields = append(fields, appcoin.FieldCoinTypeID)
	}
	if m.FieldCleared(appcoin.FieldName) {
		fields = append(fields, appcoin.FieldName)
	}
	if m.FieldCleared(appcoin.FieldDisplayNames) {
		fields = append(fields, appcoin.FieldDisplayNames)
	}
	if m.FieldCleared(appcoin.FieldLogo) {
		fields = append(fields, appcoin.FieldLogo)
	}
	if m.FieldCleared(appcoin.FieldForPay) {
		fields = append(fields, appcoin.FieldForPay)
	}
	if m.FieldCleared(appcoin.FieldWithdrawAutoReviewAmount) {
		fields = append(fields, appcoin.FieldWithdrawAutoReviewAmount)
	}
	if m.FieldCleared(appcoin.FieldProductPage) {
		fields = append(fields, appcoin.FieldProductPage)
	}
	if m.FieldCleared(appcoin.FieldDisabled) {
		fields = append(fields, appcoin.FieldDisabled)
	}
	if m.FieldCleared(appcoin.FieldDailyRewardAmount) {
		fields = append(fields, appcoin.FieldDailyRewardAmount)
	}
	if m.FieldCleared(appcoin.FieldDisplay) {
		fields = append(fields, appcoin.FieldDisplay)
	}
	if m.FieldCleared(appcoin.FieldDisplayIndex) {
		fields = append(fields, appcoin.FieldDisplayIndex)
	}
	if m.FieldCleared(appcoin.FieldMaxAmountPerWithdraw) {
		fields = append(fields, appcoin.FieldMaxAmountPerWithdraw)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppCoinMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppCoinMutation) ClearField(name string) error {
	switch name {
	case appcoin.FieldAppID:
		m.ClearAppID()
		return nil
	case appcoin.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case appcoin.FieldName:
		m.ClearName()
		return nil
	case appcoin.FieldDisplayNames:
		m.ClearDisplayNames()
		return nil
	case appcoin.FieldLogo:
		m.ClearLogo()
		return nil
	case appcoin.FieldForPay:
		m.ClearForPay()
		return nil
	case appcoin.FieldWithdrawAutoReviewAmount:
		m.ClearWithdrawAutoReviewAmount()
		return nil
	case appcoin.FieldProductPage:
		m.ClearProductPage()
		return nil
	case appcoin.FieldDisabled:
		m.ClearDisabled()
		return nil
	case appcoin.FieldDailyRewardAmount:
		m.ClearDailyRewardAmount()
		return nil
	case appcoin.FieldDisplay:
		m.ClearDisplay()
		return nil
	case appcoin.FieldDisplayIndex:
		m.ClearDisplayIndex()
		return nil
	case appcoin.FieldMaxAmountPerWithdraw:
		m.ClearMaxAmountPerWithdraw()
		return nil
	}
	return fmt.Errorf("unknown AppCoin nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppCoinMutation) ResetField(name string) error {
	switch name {
	case appcoin.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case appcoin.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case appcoin.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case appcoin.FieldAppID:
		m.ResetAppID()
		return nil
	case appcoin.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case appcoin.FieldName:
		m.ResetName()
		return nil
	case appcoin.FieldDisplayNames:
		m.ResetDisplayNames()
		return nil
	case appcoin.FieldLogo:
		m.ResetLogo()
		return nil
	case appcoin.FieldForPay:
		m.ResetForPay()
		return nil
	case appcoin.FieldWithdrawAutoReviewAmount:
		m.ResetWithdrawAutoReviewAmount()
		return nil
	case appcoin.FieldProductPage:
		m.ResetProductPage()
		return nil
	case appcoin.FieldDisabled:
		m.ResetDisabled()
		return nil
	case appcoin.FieldDailyRewardAmount:
		m.ResetDailyRewardAmount()
		return nil
	case appcoin.FieldDisplay:
		m.ResetDisplay()
		return nil
	case appcoin.FieldDisplayIndex:
		m.ResetDisplayIndex()
		return nil
	case appcoin.FieldMaxAmountPerWithdraw:
		m.ResetMaxAmountPerWithdraw()
		return nil
	}
	return fmt.Errorf("unknown AppCoin field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppCoinMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppCoinMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppCoinMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppCoinMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppCoinMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppCoinMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppCoinMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AppCoin unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppCoinMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AppCoin edge %s", name)
}

// CoinBaseMutation represents an operation that mutates the CoinBase nodes in the graph.
type CoinBaseMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	name            *string
	logo            *string
	presale         *bool
	unit            *string
	env             *string
	reserved_amount *decimal.Decimal
	for_pay         *bool
	disabled        *bool
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*CoinBase, error)
	predicates      []predicate.CoinBase
}

var _ ent.Mutation = (*CoinBaseMutation)(nil)

// coinbaseOption allows management of the mutation configuration using functional options.
type coinbaseOption func(*CoinBaseMutation)

// newCoinBaseMutation creates new mutation for the CoinBase entity.
func newCoinBaseMutation(c config, op Op, opts ...coinbaseOption) *CoinBaseMutation {
	m := &CoinBaseMutation{
		config:        c,
		op:            op,
		typ:           TypeCoinBase,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoinBaseID sets the ID field of the mutation.
func withCoinBaseID(id uuid.UUID) coinbaseOption {
	return func(m *CoinBaseMutation) {
		var (
			err   error
			once  sync.Once
			value *CoinBase
		)
		m.oldValue = func(ctx context.Context) (*CoinBase, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CoinBase.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoinBase sets the old CoinBase of the mutation.
func withCoinBase(node *CoinBase) coinbaseOption {
	return func(m *CoinBaseMutation) {
		m.oldValue = func(context.Context) (*CoinBase, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoinBaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoinBaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CoinBase entities.
func (m *CoinBaseMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoinBaseMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CoinBaseMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CoinBase.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CoinBaseMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CoinBaseMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *CoinBaseMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *CoinBaseMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CoinBaseMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CoinBaseMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CoinBaseMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *CoinBaseMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *CoinBaseMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CoinBaseMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CoinBaseMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CoinBaseMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *CoinBaseMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *CoinBaseMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CoinBaseMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetName sets the "name" field.
func (m *CoinBaseMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CoinBaseMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *CoinBaseMutation) ClearName() {
	m.name = nil
	m.clearedFields[coinbase.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *CoinBaseMutation) NameCleared() bool {
	_, ok := m.clearedFields[coinbase.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *CoinBaseMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, coinbase.FieldName)
}

// SetLogo sets the "logo" field.
func (m *CoinBaseMutation) SetLogo(s string) {
	m.logo = &s
}

// Logo returns the value of the "logo" field in the mutation.
func (m *CoinBaseMutation) Logo() (r string, exists bool) {
	v := m.logo
	if v == nil {
		return
	}
	return *v, true
}

// OldLogo returns the old "logo" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldLogo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogo: %w", err)
	}
	return oldValue.Logo, nil
}

// ClearLogo clears the value of the "logo" field.
func (m *CoinBaseMutation) ClearLogo() {
	m.logo = nil
	m.clearedFields[coinbase.FieldLogo] = struct{}{}
}

// LogoCleared returns if the "logo" field was cleared in this mutation.
func (m *CoinBaseMutation) LogoCleared() bool {
	_, ok := m.clearedFields[coinbase.FieldLogo]
	return ok
}

// ResetLogo resets all changes to the "logo" field.
func (m *CoinBaseMutation) ResetLogo() {
	m.logo = nil
	delete(m.clearedFields, coinbase.FieldLogo)
}

// SetPresale sets the "presale" field.
func (m *CoinBaseMutation) SetPresale(b bool) {
	m.presale = &b
}

// Presale returns the value of the "presale" field in the mutation.
func (m *CoinBaseMutation) Presale() (r bool, exists bool) {
	v := m.presale
	if v == nil {
		return
	}
	return *v, true
}

// OldPresale returns the old "presale" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldPresale(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPresale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPresale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPresale: %w", err)
	}
	return oldValue.Presale, nil
}

// ClearPresale clears the value of the "presale" field.
func (m *CoinBaseMutation) ClearPresale() {
	m.presale = nil
	m.clearedFields[coinbase.FieldPresale] = struct{}{}
}

// PresaleCleared returns if the "presale" field was cleared in this mutation.
func (m *CoinBaseMutation) PresaleCleared() bool {
	_, ok := m.clearedFields[coinbase.FieldPresale]
	return ok
}

// ResetPresale resets all changes to the "presale" field.
func (m *CoinBaseMutation) ResetPresale() {
	m.presale = nil
	delete(m.clearedFields, coinbase.FieldPresale)
}

// SetUnit sets the "unit" field.
func (m *CoinBaseMutation) SetUnit(s string) {
	m.unit = &s
}

// Unit returns the value of the "unit" field in the mutation.
func (m *CoinBaseMutation) Unit() (r string, exists bool) {
	v := m.unit
	if v == nil {
		return
	}
	return *v, true
}

// OldUnit returns the old "unit" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnit: %w", err)
	}
	return oldValue.Unit, nil
}

// ClearUnit clears the value of the "unit" field.
func (m *CoinBaseMutation) ClearUnit() {
	m.unit = nil
	m.clearedFields[coinbase.FieldUnit] = struct{}{}
}

// UnitCleared returns if the "unit" field was cleared in this mutation.
func (m *CoinBaseMutation) UnitCleared() bool {
	_, ok := m.clearedFields[coinbase.FieldUnit]
	return ok
}

// ResetUnit resets all changes to the "unit" field.
func (m *CoinBaseMutation) ResetUnit() {
	m.unit = nil
	delete(m.clearedFields, coinbase.FieldUnit)
}

// SetEnv sets the "env" field.
func (m *CoinBaseMutation) SetEnv(s string) {
	m.env = &s
}

// Env returns the value of the "env" field in the mutation.
func (m *CoinBaseMutation) Env() (r string, exists bool) {
	v := m.env
	if v == nil {
		return
	}
	return *v, true
}

// OldEnv returns the old "env" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldEnv(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnv is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnv requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnv: %w", err)
	}
	return oldValue.Env, nil
}

// ClearEnv clears the value of the "env" field.
func (m *CoinBaseMutation) ClearEnv() {
	m.env = nil
	m.clearedFields[coinbase.FieldEnv] = struct{}{}
}

// EnvCleared returns if the "env" field was cleared in this mutation.
func (m *CoinBaseMutation) EnvCleared() bool {
	_, ok := m.clearedFields[coinbase.FieldEnv]
	return ok
}

// ResetEnv resets all changes to the "env" field.
func (m *CoinBaseMutation) ResetEnv() {
	m.env = nil
	delete(m.clearedFields, coinbase.FieldEnv)
}

// SetReservedAmount sets the "reserved_amount" field.
func (m *CoinBaseMutation) SetReservedAmount(d decimal.Decimal) {
	m.reserved_amount = &d
}

// ReservedAmount returns the value of the "reserved_amount" field in the mutation.
func (m *CoinBaseMutation) ReservedAmount() (r decimal.Decimal, exists bool) {
	v := m.reserved_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldReservedAmount returns the old "reserved_amount" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldReservedAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReservedAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReservedAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReservedAmount: %w", err)
	}
	return oldValue.ReservedAmount, nil
}

// ClearReservedAmount clears the value of the "reserved_amount" field.
func (m *CoinBaseMutation) ClearReservedAmount() {
	m.reserved_amount = nil
	m.clearedFields[coinbase.FieldReservedAmount] = struct{}{}
}

// ReservedAmountCleared returns if the "reserved_amount" field was cleared in this mutation.
func (m *CoinBaseMutation) ReservedAmountCleared() bool {
	_, ok := m.clearedFields[coinbase.FieldReservedAmount]
	return ok
}

// ResetReservedAmount resets all changes to the "reserved_amount" field.
func (m *CoinBaseMutation) ResetReservedAmount() {
	m.reserved_amount = nil
	delete(m.clearedFields, coinbase.FieldReservedAmount)
}

// SetForPay sets the "for_pay" field.
func (m *CoinBaseMutation) SetForPay(b bool) {
	m.for_pay = &b
}

// ForPay returns the value of the "for_pay" field in the mutation.
func (m *CoinBaseMutation) ForPay() (r bool, exists bool) {
	v := m.for_pay
	if v == nil {
		return
	}
	return *v, true
}

// OldForPay returns the old "for_pay" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldForPay(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldForPay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldForPay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldForPay: %w", err)
	}
	return oldValue.ForPay, nil
}

// ClearForPay clears the value of the "for_pay" field.
func (m *CoinBaseMutation) ClearForPay() {
	m.for_pay = nil
	m.clearedFields[coinbase.FieldForPay] = struct{}{}
}

// ForPayCleared returns if the "for_pay" field was cleared in this mutation.
func (m *CoinBaseMutation) ForPayCleared() bool {
	_, ok := m.clearedFields[coinbase.FieldForPay]
	return ok
}

// ResetForPay resets all changes to the "for_pay" field.
func (m *CoinBaseMutation) ResetForPay() {
	m.for_pay = nil
	delete(m.clearedFields, coinbase.FieldForPay)
}

// SetDisabled sets the "disabled" field.
func (m *CoinBaseMutation) SetDisabled(b bool) {
	m.disabled = &b
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *CoinBaseMutation) Disabled() (r bool, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the CoinBase entity.
// If the CoinBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinBaseMutation) OldDisabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// ClearDisabled clears the value of the "disabled" field.
func (m *CoinBaseMutation) ClearDisabled() {
	m.disabled = nil
	m.clearedFields[coinbase.FieldDisabled] = struct{}{}
}

// DisabledCleared returns if the "disabled" field was cleared in this mutation.
func (m *CoinBaseMutation) DisabledCleared() bool {
	_, ok := m.clearedFields[coinbase.FieldDisabled]
	return ok
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *CoinBaseMutation) ResetDisabled() {
	m.disabled = nil
	delete(m.clearedFields, coinbase.FieldDisabled)
}

// Where appends a list predicates to the CoinBaseMutation builder.
func (m *CoinBaseMutation) Where(ps ...predicate.CoinBase) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CoinBaseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CoinBase).
func (m *CoinBaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoinBaseMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, coinbase.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, coinbase.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, coinbase.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, coinbase.FieldName)
	}
	if m.logo != nil {
		fields = append(fields, coinbase.FieldLogo)
	}
	if m.presale != nil {
		fields = append(fields, coinbase.FieldPresale)
	}
	if m.unit != nil {
		fields = append(fields, coinbase.FieldUnit)
	}
	if m.env != nil {
		fields = append(fields, coinbase.FieldEnv)
	}
	if m.reserved_amount != nil {
		fields = append(fields, coinbase.FieldReservedAmount)
	}
	if m.for_pay != nil {
		fields = append(fields, coinbase.FieldForPay)
	}
	if m.disabled != nil {
		fields = append(fields, coinbase.FieldDisabled)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoinBaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coinbase.FieldCreatedAt:
		return m.CreatedAt()
	case coinbase.FieldUpdatedAt:
		return m.UpdatedAt()
	case coinbase.FieldDeletedAt:
		return m.DeletedAt()
	case coinbase.FieldName:
		return m.Name()
	case coinbase.FieldLogo:
		return m.Logo()
	case coinbase.FieldPresale:
		return m.Presale()
	case coinbase.FieldUnit:
		return m.Unit()
	case coinbase.FieldEnv:
		return m.Env()
	case coinbase.FieldReservedAmount:
		return m.ReservedAmount()
	case coinbase.FieldForPay:
		return m.ForPay()
	case coinbase.FieldDisabled:
		return m.Disabled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoinBaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coinbase.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case coinbase.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case coinbase.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case coinbase.FieldName:
		return m.OldName(ctx)
	case coinbase.FieldLogo:
		return m.OldLogo(ctx)
	case coinbase.FieldPresale:
		return m.OldPresale(ctx)
	case coinbase.FieldUnit:
		return m.OldUnit(ctx)
	case coinbase.FieldEnv:
		return m.OldEnv(ctx)
	case coinbase.FieldReservedAmount:
		return m.OldReservedAmount(ctx)
	case coinbase.FieldForPay:
		return m.OldForPay(ctx)
	case coinbase.FieldDisabled:
		return m.OldDisabled(ctx)
	}
	return nil, fmt.Errorf("unknown CoinBase field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinBaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coinbase.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case coinbase.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case coinbase.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case coinbase.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case coinbase.FieldLogo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogo(v)
		return nil
	case coinbase.FieldPresale:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPresale(v)
		return nil
	case coinbase.FieldUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnit(v)
		return nil
	case coinbase.FieldEnv:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnv(v)
		return nil
	case coinbase.FieldReservedAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReservedAmount(v)
		return nil
	case coinbase.FieldForPay:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetForPay(v)
		return nil
	case coinbase.FieldDisabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	}
	return fmt.Errorf("unknown CoinBase field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoinBaseMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, coinbase.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, coinbase.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, coinbase.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoinBaseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coinbase.FieldCreatedAt:
		return m.AddedCreatedAt()
	case coinbase.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case coinbase.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinBaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coinbase.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case coinbase.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case coinbase.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CoinBase numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoinBaseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(coinbase.FieldName) {
		fields = append(fields, coinbase.FieldName)
	}
	if m.FieldCleared(coinbase.FieldLogo) {
		fields = append(fields, coinbase.FieldLogo)
	}
	if m.FieldCleared(coinbase.FieldPresale) {
		fields = append(fields, coinbase.FieldPresale)
	}
	if m.FieldCleared(coinbase.FieldUnit) {
		fields = append(fields, coinbase.FieldUnit)
	}
	if m.FieldCleared(coinbase.FieldEnv) {
		fields = append(fields, coinbase.FieldEnv)
	}
	if m.FieldCleared(coinbase.FieldReservedAmount) {
		fields = append(fields, coinbase.FieldReservedAmount)
	}
	if m.FieldCleared(coinbase.FieldForPay) {
		fields = append(fields, coinbase.FieldForPay)
	}
	if m.FieldCleared(coinbase.FieldDisabled) {
		fields = append(fields, coinbase.FieldDisabled)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoinBaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoinBaseMutation) ClearField(name string) error {
	switch name {
	case coinbase.FieldName:
		m.ClearName()
		return nil
	case coinbase.FieldLogo:
		m.ClearLogo()
		return nil
	case coinbase.FieldPresale:
		m.ClearPresale()
		return nil
	case coinbase.FieldUnit:
		m.ClearUnit()
		return nil
	case coinbase.FieldEnv:
		m.ClearEnv()
		return nil
	case coinbase.FieldReservedAmount:
		m.ClearReservedAmount()
		return nil
	case coinbase.FieldForPay:
		m.ClearForPay()
		return nil
	case coinbase.FieldDisabled:
		m.ClearDisabled()
		return nil
	}
	return fmt.Errorf("unknown CoinBase nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoinBaseMutation) ResetField(name string) error {
	switch name {
	case coinbase.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case coinbase.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case coinbase.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case coinbase.FieldName:
		m.ResetName()
		return nil
	case coinbase.FieldLogo:
		m.ResetLogo()
		return nil
	case coinbase.FieldPresale:
		m.ResetPresale()
		return nil
	case coinbase.FieldUnit:
		m.ResetUnit()
		return nil
	case coinbase.FieldEnv:
		m.ResetEnv()
		return nil
	case coinbase.FieldReservedAmount:
		m.ResetReservedAmount()
		return nil
	case coinbase.FieldForPay:
		m.ResetForPay()
		return nil
	case coinbase.FieldDisabled:
		m.ResetDisabled()
		return nil
	}
	return fmt.Errorf("unknown CoinBase field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoinBaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoinBaseMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoinBaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoinBaseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoinBaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoinBaseMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoinBaseMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CoinBase unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoinBaseMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CoinBase edge %s", name)
}

// CoinDescriptionMutation represents an operation that mutates the CoinDescription nodes in the graph.
type CoinDescriptionMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	app_id        *uuid.UUID
	coin_type_id  *uuid.UUID
	used_for      *string
	title         *string
	message       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CoinDescription, error)
	predicates    []predicate.CoinDescription
}

var _ ent.Mutation = (*CoinDescriptionMutation)(nil)

// coindescriptionOption allows management of the mutation configuration using functional options.
type coindescriptionOption func(*CoinDescriptionMutation)

// newCoinDescriptionMutation creates new mutation for the CoinDescription entity.
func newCoinDescriptionMutation(c config, op Op, opts ...coindescriptionOption) *CoinDescriptionMutation {
	m := &CoinDescriptionMutation{
		config:        c,
		op:            op,
		typ:           TypeCoinDescription,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoinDescriptionID sets the ID field of the mutation.
func withCoinDescriptionID(id uuid.UUID) coindescriptionOption {
	return func(m *CoinDescriptionMutation) {
		var (
			err   error
			once  sync.Once
			value *CoinDescription
		)
		m.oldValue = func(ctx context.Context) (*CoinDescription, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CoinDescription.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoinDescription sets the old CoinDescription of the mutation.
func withCoinDescription(node *CoinDescription) coindescriptionOption {
	return func(m *CoinDescriptionMutation) {
		m.oldValue = func(context.Context) (*CoinDescription, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoinDescriptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoinDescriptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CoinDescription entities.
func (m *CoinDescriptionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoinDescriptionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CoinDescriptionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CoinDescription.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CoinDescriptionMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CoinDescriptionMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CoinDescription entity.
// If the CoinDescription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinDescriptionMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *CoinDescriptionMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *CoinDescriptionMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CoinDescriptionMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CoinDescriptionMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CoinDescriptionMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CoinDescription entity.
// If the CoinDescription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinDescriptionMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *CoinDescriptionMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *CoinDescriptionMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CoinDescriptionMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CoinDescriptionMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CoinDescriptionMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the CoinDescription entity.
// If the CoinDescription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinDescriptionMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *CoinDescriptionMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *CoinDescriptionMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CoinDescriptionMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *CoinDescriptionMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *CoinDescriptionMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the CoinDescription entity.
// If the CoinDescription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinDescriptionMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *CoinDescriptionMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[coindescription.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *CoinDescriptionMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[coindescription.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *CoinDescriptionMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, coindescription.FieldAppID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *CoinDescriptionMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *CoinDescriptionMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the CoinDescription entity.
// If the CoinDescription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinDescriptionMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *CoinDescriptionMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[coindescription.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *CoinDescriptionMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[coindescription.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *CoinDescriptionMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, coindescription.FieldCoinTypeID)
}

// SetUsedFor sets the "used_for" field.
func (m *CoinDescriptionMutation) SetUsedFor(s string) {
	m.used_for = &s
}

// UsedFor returns the value of the "used_for" field in the mutation.
func (m *CoinDescriptionMutation) UsedFor() (r string, exists bool) {
	v := m.used_for
	if v == nil {
		return
	}
	return *v, true
}

// OldUsedFor returns the old "used_for" field's value of the CoinDescription entity.
// If the CoinDescription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinDescriptionMutation) OldUsedFor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsedFor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsedFor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsedFor: %w", err)
	}
	return oldValue.UsedFor, nil
}

// ClearUsedFor clears the value of the "used_for" field.
func (m *CoinDescriptionMutation) ClearUsedFor() {
	m.used_for = nil
	m.clearedFields[coindescription.FieldUsedFor] = struct{}{}
}

// UsedForCleared returns if the "used_for" field was cleared in this mutation.
func (m *CoinDescriptionMutation) UsedForCleared() bool {
	_, ok := m.clearedFields[coindescription.FieldUsedFor]
	return ok
}

// ResetUsedFor resets all changes to the "used_for" field.
func (m *CoinDescriptionMutation) ResetUsedFor() {
	m.used_for = nil
	delete(m.clearedFields, coindescription.FieldUsedFor)
}

// SetTitle sets the "title" field.
func (m *CoinDescriptionMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *CoinDescriptionMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the CoinDescription entity.
// If the CoinDescription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinDescriptionMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *CoinDescriptionMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[coindescription.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *CoinDescriptionMutation) TitleCleared() bool {
	_, ok := m.clearedFields[coindescription.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *CoinDescriptionMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, coindescription.FieldTitle)
}

// SetMessage sets the "message" field.
func (m *CoinDescriptionMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *CoinDescriptionMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the CoinDescription entity.
// If the CoinDescription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinDescriptionMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ClearMessage clears the value of the "message" field.
func (m *CoinDescriptionMutation) ClearMessage() {
	m.message = nil
	m.clearedFields[coindescription.FieldMessage] = struct{}{}
}

// MessageCleared returns if the "message" field was cleared in this mutation.
func (m *CoinDescriptionMutation) MessageCleared() bool {
	_, ok := m.clearedFields[coindescription.FieldMessage]
	return ok
}

// ResetMessage resets all changes to the "message" field.
func (m *CoinDescriptionMutation) ResetMessage() {
	m.message = nil
	delete(m.clearedFields, coindescription.FieldMessage)
}

// Where appends a list predicates to the CoinDescriptionMutation builder.
func (m *CoinDescriptionMutation) Where(ps ...predicate.CoinDescription) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CoinDescriptionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CoinDescription).
func (m *CoinDescriptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoinDescriptionMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, coindescription.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, coindescription.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, coindescription.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, coindescription.FieldAppID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, coindescription.FieldCoinTypeID)
	}
	if m.used_for != nil {
		fields = append(fields, coindescription.FieldUsedFor)
	}
	if m.title != nil {
		fields = append(fields, coindescription.FieldTitle)
	}
	if m.message != nil {
		fields = append(fields, coindescription.FieldMessage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoinDescriptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coindescription.FieldCreatedAt:
		return m.CreatedAt()
	case coindescription.FieldUpdatedAt:
		return m.UpdatedAt()
	case coindescription.FieldDeletedAt:
		return m.DeletedAt()
	case coindescription.FieldAppID:
		return m.AppID()
	case coindescription.FieldCoinTypeID:
		return m.CoinTypeID()
	case coindescription.FieldUsedFor:
		return m.UsedFor()
	case coindescription.FieldTitle:
		return m.Title()
	case coindescription.FieldMessage:
		return m.Message()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoinDescriptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coindescription.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case coindescription.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case coindescription.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case coindescription.FieldAppID:
		return m.OldAppID(ctx)
	case coindescription.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case coindescription.FieldUsedFor:
		return m.OldUsedFor(ctx)
	case coindescription.FieldTitle:
		return m.OldTitle(ctx)
	case coindescription.FieldMessage:
		return m.OldMessage(ctx)
	}
	return nil, fmt.Errorf("unknown CoinDescription field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinDescriptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coindescription.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case coindescription.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case coindescription.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case coindescription.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case coindescription.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case coindescription.FieldUsedFor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsedFor(v)
		return nil
	case coindescription.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case coindescription.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	}
	return fmt.Errorf("unknown CoinDescription field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoinDescriptionMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, coindescription.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, coindescription.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, coindescription.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoinDescriptionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coindescription.FieldCreatedAt:
		return m.AddedCreatedAt()
	case coindescription.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case coindescription.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinDescriptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coindescription.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case coindescription.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case coindescription.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CoinDescription numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoinDescriptionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(coindescription.FieldAppID) {
		fields = append(fields, coindescription.FieldAppID)
	}
	if m.FieldCleared(coindescription.FieldCoinTypeID) {
		fields = append(fields, coindescription.FieldCoinTypeID)
	}
	if m.FieldCleared(coindescription.FieldUsedFor) {
		fields = append(fields, coindescription.FieldUsedFor)
	}
	if m.FieldCleared(coindescription.FieldTitle) {
		fields = append(fields, coindescription.FieldTitle)
	}
	if m.FieldCleared(coindescription.FieldMessage) {
		fields = append(fields, coindescription.FieldMessage)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoinDescriptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoinDescriptionMutation) ClearField(name string) error {
	switch name {
	case coindescription.FieldAppID:
		m.ClearAppID()
		return nil
	case coindescription.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case coindescription.FieldUsedFor:
		m.ClearUsedFor()
		return nil
	case coindescription.FieldTitle:
		m.ClearTitle()
		return nil
	case coindescription.FieldMessage:
		m.ClearMessage()
		return nil
	}
	return fmt.Errorf("unknown CoinDescription nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoinDescriptionMutation) ResetField(name string) error {
	switch name {
	case coindescription.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case coindescription.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case coindescription.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case coindescription.FieldAppID:
		m.ResetAppID()
		return nil
	case coindescription.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case coindescription.FieldUsedFor:
		m.ResetUsedFor()
		return nil
	case coindescription.FieldTitle:
		m.ResetTitle()
		return nil
	case coindescription.FieldMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown CoinDescription field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoinDescriptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoinDescriptionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoinDescriptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoinDescriptionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoinDescriptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoinDescriptionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoinDescriptionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CoinDescription unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoinDescriptionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CoinDescription edge %s", name)
}

// CoinExtraMutation represents an operation that mutates the CoinExtra nodes in the graph.
type CoinExtraMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	coin_type_id  *uuid.UUID
	home_page     *string
	specs         *string
	stable_usd    *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CoinExtra, error)
	predicates    []predicate.CoinExtra
}

var _ ent.Mutation = (*CoinExtraMutation)(nil)

// coinextraOption allows management of the mutation configuration using functional options.
type coinextraOption func(*CoinExtraMutation)

// newCoinExtraMutation creates new mutation for the CoinExtra entity.
func newCoinExtraMutation(c config, op Op, opts ...coinextraOption) *CoinExtraMutation {
	m := &CoinExtraMutation{
		config:        c,
		op:            op,
		typ:           TypeCoinExtra,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoinExtraID sets the ID field of the mutation.
func withCoinExtraID(id uuid.UUID) coinextraOption {
	return func(m *CoinExtraMutation) {
		var (
			err   error
			once  sync.Once
			value *CoinExtra
		)
		m.oldValue = func(ctx context.Context) (*CoinExtra, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CoinExtra.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoinExtra sets the old CoinExtra of the mutation.
func withCoinExtra(node *CoinExtra) coinextraOption {
	return func(m *CoinExtraMutation) {
		m.oldValue = func(context.Context) (*CoinExtra, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoinExtraMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoinExtraMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CoinExtra entities.
func (m *CoinExtraMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoinExtraMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CoinExtraMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CoinExtra.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CoinExtraMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CoinExtraMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CoinExtra entity.
// If the CoinExtra object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinExtraMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *CoinExtraMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *CoinExtraMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CoinExtraMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CoinExtraMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CoinExtraMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CoinExtra entity.
// If the CoinExtra object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinExtraMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *CoinExtraMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *CoinExtraMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CoinExtraMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CoinExtraMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CoinExtraMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the CoinExtra entity.
// If the CoinExtra object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinExtraMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *CoinExtraMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *CoinExtraMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CoinExtraMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *CoinExtraMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *CoinExtraMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the CoinExtra entity.
// If the CoinExtra object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinExtraMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *CoinExtraMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[coinextra.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *CoinExtraMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[coinextra.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *CoinExtraMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, coinextra.FieldCoinTypeID)
}

// SetHomePage sets the "home_page" field.
func (m *CoinExtraMutation) SetHomePage(s string) {
	m.home_page = &s
}

// HomePage returns the value of the "home_page" field in the mutation.
func (m *CoinExtraMutation) HomePage() (r string, exists bool) {
	v := m.home_page
	if v == nil {
		return
	}
	return *v, true
}

// OldHomePage returns the old "home_page" field's value of the CoinExtra entity.
// If the CoinExtra object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinExtraMutation) OldHomePage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHomePage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHomePage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHomePage: %w", err)
	}
	return oldValue.HomePage, nil
}

// ClearHomePage clears the value of the "home_page" field.
func (m *CoinExtraMutation) ClearHomePage() {
	m.home_page = nil
	m.clearedFields[coinextra.FieldHomePage] = struct{}{}
}

// HomePageCleared returns if the "home_page" field was cleared in this mutation.
func (m *CoinExtraMutation) HomePageCleared() bool {
	_, ok := m.clearedFields[coinextra.FieldHomePage]
	return ok
}

// ResetHomePage resets all changes to the "home_page" field.
func (m *CoinExtraMutation) ResetHomePage() {
	m.home_page = nil
	delete(m.clearedFields, coinextra.FieldHomePage)
}

// SetSpecs sets the "specs" field.
func (m *CoinExtraMutation) SetSpecs(s string) {
	m.specs = &s
}

// Specs returns the value of the "specs" field in the mutation.
func (m *CoinExtraMutation) Specs() (r string, exists bool) {
	v := m.specs
	if v == nil {
		return
	}
	return *v, true
}

// OldSpecs returns the old "specs" field's value of the CoinExtra entity.
// If the CoinExtra object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinExtraMutation) OldSpecs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpecs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpecs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpecs: %w", err)
	}
	return oldValue.Specs, nil
}

// ClearSpecs clears the value of the "specs" field.
func (m *CoinExtraMutation) ClearSpecs() {
	m.specs = nil
	m.clearedFields[coinextra.FieldSpecs] = struct{}{}
}

// SpecsCleared returns if the "specs" field was cleared in this mutation.
func (m *CoinExtraMutation) SpecsCleared() bool {
	_, ok := m.clearedFields[coinextra.FieldSpecs]
	return ok
}

// ResetSpecs resets all changes to the "specs" field.
func (m *CoinExtraMutation) ResetSpecs() {
	m.specs = nil
	delete(m.clearedFields, coinextra.FieldSpecs)
}

// SetStableUsd sets the "stable_usd" field.
func (m *CoinExtraMutation) SetStableUsd(b bool) {
	m.stable_usd = &b
}

// StableUsd returns the value of the "stable_usd" field in the mutation.
func (m *CoinExtraMutation) StableUsd() (r bool, exists bool) {
	v := m.stable_usd
	if v == nil {
		return
	}
	return *v, true
}

// OldStableUsd returns the old "stable_usd" field's value of the CoinExtra entity.
// If the CoinExtra object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinExtraMutation) OldStableUsd(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStableUsd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStableUsd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStableUsd: %w", err)
	}
	return oldValue.StableUsd, nil
}

// ClearStableUsd clears the value of the "stable_usd" field.
func (m *CoinExtraMutation) ClearStableUsd() {
	m.stable_usd = nil
	m.clearedFields[coinextra.FieldStableUsd] = struct{}{}
}

// StableUsdCleared returns if the "stable_usd" field was cleared in this mutation.
func (m *CoinExtraMutation) StableUsdCleared() bool {
	_, ok := m.clearedFields[coinextra.FieldStableUsd]
	return ok
}

// ResetStableUsd resets all changes to the "stable_usd" field.
func (m *CoinExtraMutation) ResetStableUsd() {
	m.stable_usd = nil
	delete(m.clearedFields, coinextra.FieldStableUsd)
}

// Where appends a list predicates to the CoinExtraMutation builder.
func (m *CoinExtraMutation) Where(ps ...predicate.CoinExtra) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CoinExtraMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CoinExtra).
func (m *CoinExtraMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoinExtraMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, coinextra.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, coinextra.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, coinextra.FieldDeletedAt)
	}
	if m.coin_type_id != nil {
		fields = append(fields, coinextra.FieldCoinTypeID)
	}
	if m.home_page != nil {
		fields = append(fields, coinextra.FieldHomePage)
	}
	if m.specs != nil {
		fields = append(fields, coinextra.FieldSpecs)
	}
	if m.stable_usd != nil {
		fields = append(fields, coinextra.FieldStableUsd)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoinExtraMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coinextra.FieldCreatedAt:
		return m.CreatedAt()
	case coinextra.FieldUpdatedAt:
		return m.UpdatedAt()
	case coinextra.FieldDeletedAt:
		return m.DeletedAt()
	case coinextra.FieldCoinTypeID:
		return m.CoinTypeID()
	case coinextra.FieldHomePage:
		return m.HomePage()
	case coinextra.FieldSpecs:
		return m.Specs()
	case coinextra.FieldStableUsd:
		return m.StableUsd()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoinExtraMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coinextra.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case coinextra.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case coinextra.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case coinextra.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case coinextra.FieldHomePage:
		return m.OldHomePage(ctx)
	case coinextra.FieldSpecs:
		return m.OldSpecs(ctx)
	case coinextra.FieldStableUsd:
		return m.OldStableUsd(ctx)
	}
	return nil, fmt.Errorf("unknown CoinExtra field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinExtraMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coinextra.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case coinextra.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case coinextra.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case coinextra.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case coinextra.FieldHomePage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHomePage(v)
		return nil
	case coinextra.FieldSpecs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpecs(v)
		return nil
	case coinextra.FieldStableUsd:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStableUsd(v)
		return nil
	}
	return fmt.Errorf("unknown CoinExtra field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoinExtraMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, coinextra.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, coinextra.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, coinextra.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoinExtraMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coinextra.FieldCreatedAt:
		return m.AddedCreatedAt()
	case coinextra.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case coinextra.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinExtraMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coinextra.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case coinextra.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case coinextra.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CoinExtra numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoinExtraMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(coinextra.FieldCoinTypeID) {
		fields = append(fields, coinextra.FieldCoinTypeID)
	}
	if m.FieldCleared(coinextra.FieldHomePage) {
		fields = append(fields, coinextra.FieldHomePage)
	}
	if m.FieldCleared(coinextra.FieldSpecs) {
		fields = append(fields, coinextra.FieldSpecs)
	}
	if m.FieldCleared(coinextra.FieldStableUsd) {
		fields = append(fields, coinextra.FieldStableUsd)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoinExtraMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoinExtraMutation) ClearField(name string) error {
	switch name {
	case coinextra.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case coinextra.FieldHomePage:
		m.ClearHomePage()
		return nil
	case coinextra.FieldSpecs:
		m.ClearSpecs()
		return nil
	case coinextra.FieldStableUsd:
		m.ClearStableUsd()
		return nil
	}
	return fmt.Errorf("unknown CoinExtra nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoinExtraMutation) ResetField(name string) error {
	switch name {
	case coinextra.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case coinextra.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case coinextra.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case coinextra.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case coinextra.FieldHomePage:
		m.ResetHomePage()
		return nil
	case coinextra.FieldSpecs:
		m.ResetSpecs()
		return nil
	case coinextra.FieldStableUsd:
		m.ResetStableUsd()
		return nil
	}
	return fmt.Errorf("unknown CoinExtra field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoinExtraMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoinExtraMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoinExtraMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoinExtraMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoinExtraMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoinExtraMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoinExtraMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CoinExtra unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoinExtraMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CoinExtra edge %s", name)
}

// CurrencyMutation represents an operation that mutates the Currency nodes in the graph.
type CurrencyMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	created_at        *uint32
	addcreated_at     *int32
	updated_at        *uint32
	addupdated_at     *int32
	deleted_at        *uint32
	adddeleted_at     *int32
	coin_type_id      *uuid.UUID
	feed_type         *string
	market_value_high *decimal.Decimal
	market_value_low  *decimal.Decimal
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Currency, error)
	predicates        []predicate.Currency
}

var _ ent.Mutation = (*CurrencyMutation)(nil)

// currencyOption allows management of the mutation configuration using functional options.
type currencyOption func(*CurrencyMutation)

// newCurrencyMutation creates new mutation for the Currency entity.
func newCurrencyMutation(c config, op Op, opts ...currencyOption) *CurrencyMutation {
	m := &CurrencyMutation{
		config:        c,
		op:            op,
		typ:           TypeCurrency,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCurrencyID sets the ID field of the mutation.
func withCurrencyID(id uuid.UUID) currencyOption {
	return func(m *CurrencyMutation) {
		var (
			err   error
			once  sync.Once
			value *Currency
		)
		m.oldValue = func(ctx context.Context) (*Currency, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Currency.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCurrency sets the old Currency of the mutation.
func withCurrency(node *Currency) currencyOption {
	return func(m *CurrencyMutation) {
		m.oldValue = func(context.Context) (*Currency, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CurrencyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CurrencyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Currency entities.
func (m *CurrencyMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CurrencyMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CurrencyMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Currency.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CurrencyMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CurrencyMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Currency entity.
// If the Currency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *CurrencyMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *CurrencyMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CurrencyMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CurrencyMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CurrencyMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Currency entity.
// If the Currency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *CurrencyMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *CurrencyMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CurrencyMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CurrencyMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CurrencyMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Currency entity.
// If the Currency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *CurrencyMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *CurrencyMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CurrencyMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *CurrencyMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *CurrencyMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the Currency entity.
// If the Currency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *CurrencyMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[currency.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *CurrencyMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[currency.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *CurrencyMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, currency.FieldCoinTypeID)
}

// SetFeedType sets the "feed_type" field.
func (m *CurrencyMutation) SetFeedType(s string) {
	m.feed_type = &s
}

// FeedType returns the value of the "feed_type" field in the mutation.
func (m *CurrencyMutation) FeedType() (r string, exists bool) {
	v := m.feed_type
	if v == nil {
		return
	}
	return *v, true
}

// OldFeedType returns the old "feed_type" field's value of the Currency entity.
// If the Currency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyMutation) OldFeedType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeedType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeedType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeedType: %w", err)
	}
	return oldValue.FeedType, nil
}

// ClearFeedType clears the value of the "feed_type" field.
func (m *CurrencyMutation) ClearFeedType() {
	m.feed_type = nil
	m.clearedFields[currency.FieldFeedType] = struct{}{}
}

// FeedTypeCleared returns if the "feed_type" field was cleared in this mutation.
func (m *CurrencyMutation) FeedTypeCleared() bool {
	_, ok := m.clearedFields[currency.FieldFeedType]
	return ok
}

// ResetFeedType resets all changes to the "feed_type" field.
func (m *CurrencyMutation) ResetFeedType() {
	m.feed_type = nil
	delete(m.clearedFields, currency.FieldFeedType)
}

// SetMarketValueHigh sets the "market_value_high" field.
func (m *CurrencyMutation) SetMarketValueHigh(d decimal.Decimal) {
	m.market_value_high = &d
}

// MarketValueHigh returns the value of the "market_value_high" field in the mutation.
func (m *CurrencyMutation) MarketValueHigh() (r decimal.Decimal, exists bool) {
	v := m.market_value_high
	if v == nil {
		return
	}
	return *v, true
}

// OldMarketValueHigh returns the old "market_value_high" field's value of the Currency entity.
// If the Currency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyMutation) OldMarketValueHigh(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMarketValueHigh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMarketValueHigh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarketValueHigh: %w", err)
	}
	return oldValue.MarketValueHigh, nil
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (m *CurrencyMutation) ClearMarketValueHigh() {
	m.market_value_high = nil
	m.clearedFields[currency.FieldMarketValueHigh] = struct{}{}
}

// MarketValueHighCleared returns if the "market_value_high" field was cleared in this mutation.
func (m *CurrencyMutation) MarketValueHighCleared() bool {
	_, ok := m.clearedFields[currency.FieldMarketValueHigh]
	return ok
}

// ResetMarketValueHigh resets all changes to the "market_value_high" field.
func (m *CurrencyMutation) ResetMarketValueHigh() {
	m.market_value_high = nil
	delete(m.clearedFields, currency.FieldMarketValueHigh)
}

// SetMarketValueLow sets the "market_value_low" field.
func (m *CurrencyMutation) SetMarketValueLow(d decimal.Decimal) {
	m.market_value_low = &d
}

// MarketValueLow returns the value of the "market_value_low" field in the mutation.
func (m *CurrencyMutation) MarketValueLow() (r decimal.Decimal, exists bool) {
	v := m.market_value_low
	if v == nil {
		return
	}
	return *v, true
}

// OldMarketValueLow returns the old "market_value_low" field's value of the Currency entity.
// If the Currency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyMutation) OldMarketValueLow(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMarketValueLow is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMarketValueLow requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarketValueLow: %w", err)
	}
	return oldValue.MarketValueLow, nil
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (m *CurrencyMutation) ClearMarketValueLow() {
	m.market_value_low = nil
	m.clearedFields[currency.FieldMarketValueLow] = struct{}{}
}

// MarketValueLowCleared returns if the "market_value_low" field was cleared in this mutation.
func (m *CurrencyMutation) MarketValueLowCleared() bool {
	_, ok := m.clearedFields[currency.FieldMarketValueLow]
	return ok
}

// ResetMarketValueLow resets all changes to the "market_value_low" field.
func (m *CurrencyMutation) ResetMarketValueLow() {
	m.market_value_low = nil
	delete(m.clearedFields, currency.FieldMarketValueLow)
}

// Where appends a list predicates to the CurrencyMutation builder.
func (m *CurrencyMutation) Where(ps ...predicate.Currency) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CurrencyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Currency).
func (m *CurrencyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CurrencyMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, currency.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, currency.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, currency.FieldDeletedAt)
	}
	if m.coin_type_id != nil {
		fields = append(fields, currency.FieldCoinTypeID)
	}
	if m.feed_type != nil {
		fields = append(fields, currency.FieldFeedType)
	}
	if m.market_value_high != nil {
		fields = append(fields, currency.FieldMarketValueHigh)
	}
	if m.market_value_low != nil {
		fields = append(fields, currency.FieldMarketValueLow)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CurrencyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case currency.FieldCreatedAt:
		return m.CreatedAt()
	case currency.FieldUpdatedAt:
		return m.UpdatedAt()
	case currency.FieldDeletedAt:
		return m.DeletedAt()
	case currency.FieldCoinTypeID:
		return m.CoinTypeID()
	case currency.FieldFeedType:
		return m.FeedType()
	case currency.FieldMarketValueHigh:
		return m.MarketValueHigh()
	case currency.FieldMarketValueLow:
		return m.MarketValueLow()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CurrencyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case currency.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case currency.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case currency.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case currency.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case currency.FieldFeedType:
		return m.OldFeedType(ctx)
	case currency.FieldMarketValueHigh:
		return m.OldMarketValueHigh(ctx)
	case currency.FieldMarketValueLow:
		return m.OldMarketValueLow(ctx)
	}
	return nil, fmt.Errorf("unknown Currency field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CurrencyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case currency.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case currency.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case currency.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case currency.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case currency.FieldFeedType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeedType(v)
		return nil
	case currency.FieldMarketValueHigh:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarketValueHigh(v)
		return nil
	case currency.FieldMarketValueLow:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarketValueLow(v)
		return nil
	}
	return fmt.Errorf("unknown Currency field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CurrencyMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, currency.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, currency.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, currency.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CurrencyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case currency.FieldCreatedAt:
		return m.AddedCreatedAt()
	case currency.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case currency.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CurrencyMutation) AddField(name string, value ent.Value) error {
	switch name {
	case currency.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case currency.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case currency.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Currency numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CurrencyMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(currency.FieldCoinTypeID) {
		fields = append(fields, currency.FieldCoinTypeID)
	}
	if m.FieldCleared(currency.FieldFeedType) {
		fields = append(fields, currency.FieldFeedType)
	}
	if m.FieldCleared(currency.FieldMarketValueHigh) {
		fields = append(fields, currency.FieldMarketValueHigh)
	}
	if m.FieldCleared(currency.FieldMarketValueLow) {
		fields = append(fields, currency.FieldMarketValueLow)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CurrencyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CurrencyMutation) ClearField(name string) error {
	switch name {
	case currency.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case currency.FieldFeedType:
		m.ClearFeedType()
		return nil
	case currency.FieldMarketValueHigh:
		m.ClearMarketValueHigh()
		return nil
	case currency.FieldMarketValueLow:
		m.ClearMarketValueLow()
		return nil
	}
	return fmt.Errorf("unknown Currency nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CurrencyMutation) ResetField(name string) error {
	switch name {
	case currency.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case currency.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case currency.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case currency.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case currency.FieldFeedType:
		m.ResetFeedType()
		return nil
	case currency.FieldMarketValueHigh:
		m.ResetMarketValueHigh()
		return nil
	case currency.FieldMarketValueLow:
		m.ResetMarketValueLow()
		return nil
	}
	return fmt.Errorf("unknown Currency field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CurrencyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CurrencyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CurrencyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CurrencyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CurrencyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CurrencyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CurrencyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Currency unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CurrencyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Currency edge %s", name)
}

// CurrencyHistoryMutation represents an operation that mutates the CurrencyHistory nodes in the graph.
type CurrencyHistoryMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	created_at        *uint32
	addcreated_at     *int32
	updated_at        *uint32
	addupdated_at     *int32
	deleted_at        *uint32
	adddeleted_at     *int32
	coin_type_id      *uuid.UUID
	feed_type         *string
	market_value_high *decimal.Decimal
	market_value_low  *decimal.Decimal
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*CurrencyHistory, error)
	predicates        []predicate.CurrencyHistory
}

var _ ent.Mutation = (*CurrencyHistoryMutation)(nil)

// currencyhistoryOption allows management of the mutation configuration using functional options.
type currencyhistoryOption func(*CurrencyHistoryMutation)

// newCurrencyHistoryMutation creates new mutation for the CurrencyHistory entity.
func newCurrencyHistoryMutation(c config, op Op, opts ...currencyhistoryOption) *CurrencyHistoryMutation {
	m := &CurrencyHistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeCurrencyHistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCurrencyHistoryID sets the ID field of the mutation.
func withCurrencyHistoryID(id uuid.UUID) currencyhistoryOption {
	return func(m *CurrencyHistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *CurrencyHistory
		)
		m.oldValue = func(ctx context.Context) (*CurrencyHistory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CurrencyHistory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCurrencyHistory sets the old CurrencyHistory of the mutation.
func withCurrencyHistory(node *CurrencyHistory) currencyhistoryOption {
	return func(m *CurrencyHistoryMutation) {
		m.oldValue = func(context.Context) (*CurrencyHistory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CurrencyHistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CurrencyHistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CurrencyHistory entities.
func (m *CurrencyHistoryMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CurrencyHistoryMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CurrencyHistoryMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CurrencyHistory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CurrencyHistoryMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CurrencyHistoryMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CurrencyHistory entity.
// If the CurrencyHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyHistoryMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *CurrencyHistoryMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *CurrencyHistoryMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CurrencyHistoryMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CurrencyHistoryMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CurrencyHistoryMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CurrencyHistory entity.
// If the CurrencyHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyHistoryMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *CurrencyHistoryMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *CurrencyHistoryMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CurrencyHistoryMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CurrencyHistoryMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CurrencyHistoryMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the CurrencyHistory entity.
// If the CurrencyHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyHistoryMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *CurrencyHistoryMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *CurrencyHistoryMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CurrencyHistoryMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *CurrencyHistoryMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *CurrencyHistoryMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the CurrencyHistory entity.
// If the CurrencyHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyHistoryMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *CurrencyHistoryMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[currencyhistory.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *CurrencyHistoryMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[currencyhistory.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *CurrencyHistoryMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, currencyhistory.FieldCoinTypeID)
}

// SetFeedType sets the "feed_type" field.
func (m *CurrencyHistoryMutation) SetFeedType(s string) {
	m.feed_type = &s
}

// FeedType returns the value of the "feed_type" field in the mutation.
func (m *CurrencyHistoryMutation) FeedType() (r string, exists bool) {
	v := m.feed_type
	if v == nil {
		return
	}
	return *v, true
}

// OldFeedType returns the old "feed_type" field's value of the CurrencyHistory entity.
// If the CurrencyHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyHistoryMutation) OldFeedType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeedType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeedType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeedType: %w", err)
	}
	return oldValue.FeedType, nil
}

// ClearFeedType clears the value of the "feed_type" field.
func (m *CurrencyHistoryMutation) ClearFeedType() {
	m.feed_type = nil
	m.clearedFields[currencyhistory.FieldFeedType] = struct{}{}
}

// FeedTypeCleared returns if the "feed_type" field was cleared in this mutation.
func (m *CurrencyHistoryMutation) FeedTypeCleared() bool {
	_, ok := m.clearedFields[currencyhistory.FieldFeedType]
	return ok
}

// ResetFeedType resets all changes to the "feed_type" field.
func (m *CurrencyHistoryMutation) ResetFeedType() {
	m.feed_type = nil
	delete(m.clearedFields, currencyhistory.FieldFeedType)
}

// SetMarketValueHigh sets the "market_value_high" field.
func (m *CurrencyHistoryMutation) SetMarketValueHigh(d decimal.Decimal) {
	m.market_value_high = &d
}

// MarketValueHigh returns the value of the "market_value_high" field in the mutation.
func (m *CurrencyHistoryMutation) MarketValueHigh() (r decimal.Decimal, exists bool) {
	v := m.market_value_high
	if v == nil {
		return
	}
	return *v, true
}

// OldMarketValueHigh returns the old "market_value_high" field's value of the CurrencyHistory entity.
// If the CurrencyHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyHistoryMutation) OldMarketValueHigh(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMarketValueHigh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMarketValueHigh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarketValueHigh: %w", err)
	}
	return oldValue.MarketValueHigh, nil
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (m *CurrencyHistoryMutation) ClearMarketValueHigh() {
	m.market_value_high = nil
	m.clearedFields[currencyhistory.FieldMarketValueHigh] = struct{}{}
}

// MarketValueHighCleared returns if the "market_value_high" field was cleared in this mutation.
func (m *CurrencyHistoryMutation) MarketValueHighCleared() bool {
	_, ok := m.clearedFields[currencyhistory.FieldMarketValueHigh]
	return ok
}

// ResetMarketValueHigh resets all changes to the "market_value_high" field.
func (m *CurrencyHistoryMutation) ResetMarketValueHigh() {
	m.market_value_high = nil
	delete(m.clearedFields, currencyhistory.FieldMarketValueHigh)
}

// SetMarketValueLow sets the "market_value_low" field.
func (m *CurrencyHistoryMutation) SetMarketValueLow(d decimal.Decimal) {
	m.market_value_low = &d
}

// MarketValueLow returns the value of the "market_value_low" field in the mutation.
func (m *CurrencyHistoryMutation) MarketValueLow() (r decimal.Decimal, exists bool) {
	v := m.market_value_low
	if v == nil {
		return
	}
	return *v, true
}

// OldMarketValueLow returns the old "market_value_low" field's value of the CurrencyHistory entity.
// If the CurrencyHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyHistoryMutation) OldMarketValueLow(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMarketValueLow is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMarketValueLow requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarketValueLow: %w", err)
	}
	return oldValue.MarketValueLow, nil
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (m *CurrencyHistoryMutation) ClearMarketValueLow() {
	m.market_value_low = nil
	m.clearedFields[currencyhistory.FieldMarketValueLow] = struct{}{}
}

// MarketValueLowCleared returns if the "market_value_low" field was cleared in this mutation.
func (m *CurrencyHistoryMutation) MarketValueLowCleared() bool {
	_, ok := m.clearedFields[currencyhistory.FieldMarketValueLow]
	return ok
}

// ResetMarketValueLow resets all changes to the "market_value_low" field.
func (m *CurrencyHistoryMutation) ResetMarketValueLow() {
	m.market_value_low = nil
	delete(m.clearedFields, currencyhistory.FieldMarketValueLow)
}

// Where appends a list predicates to the CurrencyHistoryMutation builder.
func (m *CurrencyHistoryMutation) Where(ps ...predicate.CurrencyHistory) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CurrencyHistoryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CurrencyHistory).
func (m *CurrencyHistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CurrencyHistoryMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, currencyhistory.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, currencyhistory.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, currencyhistory.FieldDeletedAt)
	}
	if m.coin_type_id != nil {
		fields = append(fields, currencyhistory.FieldCoinTypeID)
	}
	if m.feed_type != nil {
		fields = append(fields, currencyhistory.FieldFeedType)
	}
	if m.market_value_high != nil {
		fields = append(fields, currencyhistory.FieldMarketValueHigh)
	}
	if m.market_value_low != nil {
		fields = append(fields, currencyhistory.FieldMarketValueLow)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CurrencyHistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case currencyhistory.FieldCreatedAt:
		return m.CreatedAt()
	case currencyhistory.FieldUpdatedAt:
		return m.UpdatedAt()
	case currencyhistory.FieldDeletedAt:
		return m.DeletedAt()
	case currencyhistory.FieldCoinTypeID:
		return m.CoinTypeID()
	case currencyhistory.FieldFeedType:
		return m.FeedType()
	case currencyhistory.FieldMarketValueHigh:
		return m.MarketValueHigh()
	case currencyhistory.FieldMarketValueLow:
		return m.MarketValueLow()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CurrencyHistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case currencyhistory.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case currencyhistory.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case currencyhistory.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case currencyhistory.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case currencyhistory.FieldFeedType:
		return m.OldFeedType(ctx)
	case currencyhistory.FieldMarketValueHigh:
		return m.OldMarketValueHigh(ctx)
	case currencyhistory.FieldMarketValueLow:
		return m.OldMarketValueLow(ctx)
	}
	return nil, fmt.Errorf("unknown CurrencyHistory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CurrencyHistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case currencyhistory.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case currencyhistory.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case currencyhistory.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case currencyhistory.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case currencyhistory.FieldFeedType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeedType(v)
		return nil
	case currencyhistory.FieldMarketValueHigh:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarketValueHigh(v)
		return nil
	case currencyhistory.FieldMarketValueLow:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarketValueLow(v)
		return nil
	}
	return fmt.Errorf("unknown CurrencyHistory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CurrencyHistoryMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, currencyhistory.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, currencyhistory.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, currencyhistory.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CurrencyHistoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case currencyhistory.FieldCreatedAt:
		return m.AddedCreatedAt()
	case currencyhistory.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case currencyhistory.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CurrencyHistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case currencyhistory.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case currencyhistory.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case currencyhistory.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CurrencyHistory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CurrencyHistoryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(currencyhistory.FieldCoinTypeID) {
		fields = append(fields, currencyhistory.FieldCoinTypeID)
	}
	if m.FieldCleared(currencyhistory.FieldFeedType) {
		fields = append(fields, currencyhistory.FieldFeedType)
	}
	if m.FieldCleared(currencyhistory.FieldMarketValueHigh) {
		fields = append(fields, currencyhistory.FieldMarketValueHigh)
	}
	if m.FieldCleared(currencyhistory.FieldMarketValueLow) {
		fields = append(fields, currencyhistory.FieldMarketValueLow)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CurrencyHistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CurrencyHistoryMutation) ClearField(name string) error {
	switch name {
	case currencyhistory.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case currencyhistory.FieldFeedType:
		m.ClearFeedType()
		return nil
	case currencyhistory.FieldMarketValueHigh:
		m.ClearMarketValueHigh()
		return nil
	case currencyhistory.FieldMarketValueLow:
		m.ClearMarketValueLow()
		return nil
	}
	return fmt.Errorf("unknown CurrencyHistory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CurrencyHistoryMutation) ResetField(name string) error {
	switch name {
	case currencyhistory.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case currencyhistory.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case currencyhistory.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case currencyhistory.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case currencyhistory.FieldFeedType:
		m.ResetFeedType()
		return nil
	case currencyhistory.FieldMarketValueHigh:
		m.ResetMarketValueHigh()
		return nil
	case currencyhistory.FieldMarketValueLow:
		m.ResetMarketValueLow()
		return nil
	}
	return fmt.Errorf("unknown CurrencyHistory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CurrencyHistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CurrencyHistoryMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CurrencyHistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CurrencyHistoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CurrencyHistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CurrencyHistoryMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CurrencyHistoryMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CurrencyHistory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CurrencyHistoryMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CurrencyHistory edge %s", name)
}

// ExchangeRateMutation represents an operation that mutates the ExchangeRate nodes in the graph.
type ExchangeRateMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	created_at        *uint32
	addcreated_at     *int32
	updated_at        *uint32
	addupdated_at     *int32
	deleted_at        *uint32
	adddeleted_at     *int32
	app_id            *uuid.UUID
	coin_type_id      *uuid.UUID
	market_value      *decimal.Decimal
	settle_value      *decimal.Decimal
	settle_percent    *uint32
	addsettle_percent *int32
	settle_tips       *[]string
	setter            *uuid.UUID
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*ExchangeRate, error)
	predicates        []predicate.ExchangeRate
}

var _ ent.Mutation = (*ExchangeRateMutation)(nil)

// exchangerateOption allows management of the mutation configuration using functional options.
type exchangerateOption func(*ExchangeRateMutation)

// newExchangeRateMutation creates new mutation for the ExchangeRate entity.
func newExchangeRateMutation(c config, op Op, opts ...exchangerateOption) *ExchangeRateMutation {
	m := &ExchangeRateMutation{
		config:        c,
		op:            op,
		typ:           TypeExchangeRate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExchangeRateID sets the ID field of the mutation.
func withExchangeRateID(id uuid.UUID) exchangerateOption {
	return func(m *ExchangeRateMutation) {
		var (
			err   error
			once  sync.Once
			value *ExchangeRate
		)
		m.oldValue = func(ctx context.Context) (*ExchangeRate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExchangeRate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExchangeRate sets the old ExchangeRate of the mutation.
func withExchangeRate(node *ExchangeRate) exchangerateOption {
	return func(m *ExchangeRateMutation) {
		m.oldValue = func(context.Context) (*ExchangeRate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExchangeRateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExchangeRateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ExchangeRate entities.
func (m *ExchangeRateMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExchangeRateMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExchangeRateMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExchangeRate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ExchangeRateMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExchangeRateMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *ExchangeRateMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *ExchangeRateMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExchangeRateMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExchangeRateMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExchangeRateMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *ExchangeRateMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *ExchangeRateMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExchangeRateMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ExchangeRateMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ExchangeRateMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *ExchangeRateMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *ExchangeRateMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ExchangeRateMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *ExchangeRateMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *ExchangeRateMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *ExchangeRateMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[exchangerate.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *ExchangeRateMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[exchangerate.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *ExchangeRateMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, exchangerate.FieldAppID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *ExchangeRateMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *ExchangeRateMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *ExchangeRateMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[exchangerate.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *ExchangeRateMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[exchangerate.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *ExchangeRateMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, exchangerate.FieldCoinTypeID)
}

// SetMarketValue sets the "market_value" field.
func (m *ExchangeRateMutation) SetMarketValue(d decimal.Decimal) {
	m.market_value = &d
}

// MarketValue returns the value of the "market_value" field in the mutation.
func (m *ExchangeRateMutation) MarketValue() (r decimal.Decimal, exists bool) {
	v := m.market_value
	if v == nil {
		return
	}
	return *v, true
}

// OldMarketValue returns the old "market_value" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldMarketValue(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMarketValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMarketValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarketValue: %w", err)
	}
	return oldValue.MarketValue, nil
}

// ClearMarketValue clears the value of the "market_value" field.
func (m *ExchangeRateMutation) ClearMarketValue() {
	m.market_value = nil
	m.clearedFields[exchangerate.FieldMarketValue] = struct{}{}
}

// MarketValueCleared returns if the "market_value" field was cleared in this mutation.
func (m *ExchangeRateMutation) MarketValueCleared() bool {
	_, ok := m.clearedFields[exchangerate.FieldMarketValue]
	return ok
}

// ResetMarketValue resets all changes to the "market_value" field.
func (m *ExchangeRateMutation) ResetMarketValue() {
	m.market_value = nil
	delete(m.clearedFields, exchangerate.FieldMarketValue)
}

// SetSettleValue sets the "settle_value" field.
func (m *ExchangeRateMutation) SetSettleValue(d decimal.Decimal) {
	m.settle_value = &d
}

// SettleValue returns the value of the "settle_value" field in the mutation.
func (m *ExchangeRateMutation) SettleValue() (r decimal.Decimal, exists bool) {
	v := m.settle_value
	if v == nil {
		return
	}
	return *v, true
}

// OldSettleValue returns the old "settle_value" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldSettleValue(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSettleValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSettleValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSettleValue: %w", err)
	}
	return oldValue.SettleValue, nil
}

// ClearSettleValue clears the value of the "settle_value" field.
func (m *ExchangeRateMutation) ClearSettleValue() {
	m.settle_value = nil
	m.clearedFields[exchangerate.FieldSettleValue] = struct{}{}
}

// SettleValueCleared returns if the "settle_value" field was cleared in this mutation.
func (m *ExchangeRateMutation) SettleValueCleared() bool {
	_, ok := m.clearedFields[exchangerate.FieldSettleValue]
	return ok
}

// ResetSettleValue resets all changes to the "settle_value" field.
func (m *ExchangeRateMutation) ResetSettleValue() {
	m.settle_value = nil
	delete(m.clearedFields, exchangerate.FieldSettleValue)
}

// SetSettlePercent sets the "settle_percent" field.
func (m *ExchangeRateMutation) SetSettlePercent(u uint32) {
	m.settle_percent = &u
	m.addsettle_percent = nil
}

// SettlePercent returns the value of the "settle_percent" field in the mutation.
func (m *ExchangeRateMutation) SettlePercent() (r uint32, exists bool) {
	v := m.settle_percent
	if v == nil {
		return
	}
	return *v, true
}

// OldSettlePercent returns the old "settle_percent" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldSettlePercent(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSettlePercent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSettlePercent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSettlePercent: %w", err)
	}
	return oldValue.SettlePercent, nil
}

// AddSettlePercent adds u to the "settle_percent" field.
func (m *ExchangeRateMutation) AddSettlePercent(u int32) {
	if m.addsettle_percent != nil {
		*m.addsettle_percent += u
	} else {
		m.addsettle_percent = &u
	}
}

// AddedSettlePercent returns the value that was added to the "settle_percent" field in this mutation.
func (m *ExchangeRateMutation) AddedSettlePercent() (r int32, exists bool) {
	v := m.addsettle_percent
	if v == nil {
		return
	}
	return *v, true
}

// ClearSettlePercent clears the value of the "settle_percent" field.
func (m *ExchangeRateMutation) ClearSettlePercent() {
	m.settle_percent = nil
	m.addsettle_percent = nil
	m.clearedFields[exchangerate.FieldSettlePercent] = struct{}{}
}

// SettlePercentCleared returns if the "settle_percent" field was cleared in this mutation.
func (m *ExchangeRateMutation) SettlePercentCleared() bool {
	_, ok := m.clearedFields[exchangerate.FieldSettlePercent]
	return ok
}

// ResetSettlePercent resets all changes to the "settle_percent" field.
func (m *ExchangeRateMutation) ResetSettlePercent() {
	m.settle_percent = nil
	m.addsettle_percent = nil
	delete(m.clearedFields, exchangerate.FieldSettlePercent)
}

// SetSettleTips sets the "settle_tips" field.
func (m *ExchangeRateMutation) SetSettleTips(s []string) {
	m.settle_tips = &s
}

// SettleTips returns the value of the "settle_tips" field in the mutation.
func (m *ExchangeRateMutation) SettleTips() (r []string, exists bool) {
	v := m.settle_tips
	if v == nil {
		return
	}
	return *v, true
}

// OldSettleTips returns the old "settle_tips" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldSettleTips(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSettleTips is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSettleTips requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSettleTips: %w", err)
	}
	return oldValue.SettleTips, nil
}

// ClearSettleTips clears the value of the "settle_tips" field.
func (m *ExchangeRateMutation) ClearSettleTips() {
	m.settle_tips = nil
	m.clearedFields[exchangerate.FieldSettleTips] = struct{}{}
}

// SettleTipsCleared returns if the "settle_tips" field was cleared in this mutation.
func (m *ExchangeRateMutation) SettleTipsCleared() bool {
	_, ok := m.clearedFields[exchangerate.FieldSettleTips]
	return ok
}

// ResetSettleTips resets all changes to the "settle_tips" field.
func (m *ExchangeRateMutation) ResetSettleTips() {
	m.settle_tips = nil
	delete(m.clearedFields, exchangerate.FieldSettleTips)
}

// SetSetter sets the "setter" field.
func (m *ExchangeRateMutation) SetSetter(u uuid.UUID) {
	m.setter = &u
}

// Setter returns the value of the "setter" field in the mutation.
func (m *ExchangeRateMutation) Setter() (r uuid.UUID, exists bool) {
	v := m.setter
	if v == nil {
		return
	}
	return *v, true
}

// OldSetter returns the old "setter" field's value of the ExchangeRate entity.
// If the ExchangeRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeRateMutation) OldSetter(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSetter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSetter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSetter: %w", err)
	}
	return oldValue.Setter, nil
}

// ClearSetter clears the value of the "setter" field.
func (m *ExchangeRateMutation) ClearSetter() {
	m.setter = nil
	m.clearedFields[exchangerate.FieldSetter] = struct{}{}
}

// SetterCleared returns if the "setter" field was cleared in this mutation.
func (m *ExchangeRateMutation) SetterCleared() bool {
	_, ok := m.clearedFields[exchangerate.FieldSetter]
	return ok
}

// ResetSetter resets all changes to the "setter" field.
func (m *ExchangeRateMutation) ResetSetter() {
	m.setter = nil
	delete(m.clearedFields, exchangerate.FieldSetter)
}

// Where appends a list predicates to the ExchangeRateMutation builder.
func (m *ExchangeRateMutation) Where(ps ...predicate.ExchangeRate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ExchangeRateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ExchangeRate).
func (m *ExchangeRateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExchangeRateMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, exchangerate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, exchangerate.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, exchangerate.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, exchangerate.FieldAppID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, exchangerate.FieldCoinTypeID)
	}
	if m.market_value != nil {
		fields = append(fields, exchangerate.FieldMarketValue)
	}
	if m.settle_value != nil {
		fields = append(fields, exchangerate.FieldSettleValue)
	}
	if m.settle_percent != nil {
		fields = append(fields, exchangerate.FieldSettlePercent)
	}
	if m.settle_tips != nil {
		fields = append(fields, exchangerate.FieldSettleTips)
	}
	if m.setter != nil {
		fields = append(fields, exchangerate.FieldSetter)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExchangeRateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case exchangerate.FieldCreatedAt:
		return m.CreatedAt()
	case exchangerate.FieldUpdatedAt:
		return m.UpdatedAt()
	case exchangerate.FieldDeletedAt:
		return m.DeletedAt()
	case exchangerate.FieldAppID:
		return m.AppID()
	case exchangerate.FieldCoinTypeID:
		return m.CoinTypeID()
	case exchangerate.FieldMarketValue:
		return m.MarketValue()
	case exchangerate.FieldSettleValue:
		return m.SettleValue()
	case exchangerate.FieldSettlePercent:
		return m.SettlePercent()
	case exchangerate.FieldSettleTips:
		return m.SettleTips()
	case exchangerate.FieldSetter:
		return m.Setter()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExchangeRateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case exchangerate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case exchangerate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case exchangerate.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case exchangerate.FieldAppID:
		return m.OldAppID(ctx)
	case exchangerate.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case exchangerate.FieldMarketValue:
		return m.OldMarketValue(ctx)
	case exchangerate.FieldSettleValue:
		return m.OldSettleValue(ctx)
	case exchangerate.FieldSettlePercent:
		return m.OldSettlePercent(ctx)
	case exchangerate.FieldSettleTips:
		return m.OldSettleTips(ctx)
	case exchangerate.FieldSetter:
		return m.OldSetter(ctx)
	}
	return nil, fmt.Errorf("unknown ExchangeRate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExchangeRateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case exchangerate.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case exchangerate.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case exchangerate.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case exchangerate.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case exchangerate.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case exchangerate.FieldMarketValue:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarketValue(v)
		return nil
	case exchangerate.FieldSettleValue:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSettleValue(v)
		return nil
	case exchangerate.FieldSettlePercent:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSettlePercent(v)
		return nil
	case exchangerate.FieldSettleTips:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSettleTips(v)
		return nil
	case exchangerate.FieldSetter:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSetter(v)
		return nil
	}
	return fmt.Errorf("unknown ExchangeRate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExchangeRateMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, exchangerate.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, exchangerate.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, exchangerate.FieldDeletedAt)
	}
	if m.addsettle_percent != nil {
		fields = append(fields, exchangerate.FieldSettlePercent)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExchangeRateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case exchangerate.FieldCreatedAt:
		return m.AddedCreatedAt()
	case exchangerate.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case exchangerate.FieldDeletedAt:
		return m.AddedDeletedAt()
	case exchangerate.FieldSettlePercent:
		return m.AddedSettlePercent()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExchangeRateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case exchangerate.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case exchangerate.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case exchangerate.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case exchangerate.FieldSettlePercent:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSettlePercent(v)
		return nil
	}
	return fmt.Errorf("unknown ExchangeRate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExchangeRateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(exchangerate.FieldAppID) {
		fields = append(fields, exchangerate.FieldAppID)
	}
	if m.FieldCleared(exchangerate.FieldCoinTypeID) {
		fields = append(fields, exchangerate.FieldCoinTypeID)
	}
	if m.FieldCleared(exchangerate.FieldMarketValue) {
		fields = append(fields, exchangerate.FieldMarketValue)
	}
	if m.FieldCleared(exchangerate.FieldSettleValue) {
		fields = append(fields, exchangerate.FieldSettleValue)
	}
	if m.FieldCleared(exchangerate.FieldSettlePercent) {
		fields = append(fields, exchangerate.FieldSettlePercent)
	}
	if m.FieldCleared(exchangerate.FieldSettleTips) {
		fields = append(fields, exchangerate.FieldSettleTips)
	}
	if m.FieldCleared(exchangerate.FieldSetter) {
		fields = append(fields, exchangerate.FieldSetter)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExchangeRateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExchangeRateMutation) ClearField(name string) error {
	switch name {
	case exchangerate.FieldAppID:
		m.ClearAppID()
		return nil
	case exchangerate.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case exchangerate.FieldMarketValue:
		m.ClearMarketValue()
		return nil
	case exchangerate.FieldSettleValue:
		m.ClearSettleValue()
		return nil
	case exchangerate.FieldSettlePercent:
		m.ClearSettlePercent()
		return nil
	case exchangerate.FieldSettleTips:
		m.ClearSettleTips()
		return nil
	case exchangerate.FieldSetter:
		m.ClearSetter()
		return nil
	}
	return fmt.Errorf("unknown ExchangeRate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExchangeRateMutation) ResetField(name string) error {
	switch name {
	case exchangerate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case exchangerate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case exchangerate.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case exchangerate.FieldAppID:
		m.ResetAppID()
		return nil
	case exchangerate.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case exchangerate.FieldMarketValue:
		m.ResetMarketValue()
		return nil
	case exchangerate.FieldSettleValue:
		m.ResetSettleValue()
		return nil
	case exchangerate.FieldSettlePercent:
		m.ResetSettlePercent()
		return nil
	case exchangerate.FieldSettleTips:
		m.ResetSettleTips()
		return nil
	case exchangerate.FieldSetter:
		m.ResetSetter()
		return nil
	}
	return fmt.Errorf("unknown ExchangeRate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExchangeRateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExchangeRateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExchangeRateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExchangeRateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExchangeRateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExchangeRateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExchangeRateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ExchangeRate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExchangeRateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ExchangeRate edge %s", name)
}

// FiatCurrencyMutation represents an operation that mutates the FiatCurrency nodes in the graph.
type FiatCurrencyMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	created_at            *uint32
	addcreated_at         *int32
	updated_at            *uint32
	addupdated_at         *int32
	deleted_at            *uint32
	adddeleted_at         *int32
	fiat_currency_type_id *uuid.UUID
	feed_type             *string
	market_value_low      *decimal.Decimal
	market_value_high     *decimal.Decimal
	clearedFields         map[string]struct{}
	done                  bool
	oldValue              func(context.Context) (*FiatCurrency, error)
	predicates            []predicate.FiatCurrency
}

var _ ent.Mutation = (*FiatCurrencyMutation)(nil)

// fiatcurrencyOption allows management of the mutation configuration using functional options.
type fiatcurrencyOption func(*FiatCurrencyMutation)

// newFiatCurrencyMutation creates new mutation for the FiatCurrency entity.
func newFiatCurrencyMutation(c config, op Op, opts ...fiatcurrencyOption) *FiatCurrencyMutation {
	m := &FiatCurrencyMutation{
		config:        c,
		op:            op,
		typ:           TypeFiatCurrency,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFiatCurrencyID sets the ID field of the mutation.
func withFiatCurrencyID(id uuid.UUID) fiatcurrencyOption {
	return func(m *FiatCurrencyMutation) {
		var (
			err   error
			once  sync.Once
			value *FiatCurrency
		)
		m.oldValue = func(ctx context.Context) (*FiatCurrency, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FiatCurrency.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFiatCurrency sets the old FiatCurrency of the mutation.
func withFiatCurrency(node *FiatCurrency) fiatcurrencyOption {
	return func(m *FiatCurrencyMutation) {
		m.oldValue = func(context.Context) (*FiatCurrency, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FiatCurrencyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FiatCurrencyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FiatCurrency entities.
func (m *FiatCurrencyMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FiatCurrencyMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FiatCurrencyMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FiatCurrency.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *FiatCurrencyMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FiatCurrencyMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FiatCurrency entity.
// If the FiatCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *FiatCurrencyMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *FiatCurrencyMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FiatCurrencyMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FiatCurrencyMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FiatCurrencyMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FiatCurrency entity.
// If the FiatCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *FiatCurrencyMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *FiatCurrencyMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FiatCurrencyMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *FiatCurrencyMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *FiatCurrencyMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the FiatCurrency entity.
// If the FiatCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *FiatCurrencyMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *FiatCurrencyMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *FiatCurrencyMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetFiatCurrencyTypeID sets the "fiat_currency_type_id" field.
func (m *FiatCurrencyMutation) SetFiatCurrencyTypeID(u uuid.UUID) {
	m.fiat_currency_type_id = &u
}

// FiatCurrencyTypeID returns the value of the "fiat_currency_type_id" field in the mutation.
func (m *FiatCurrencyMutation) FiatCurrencyTypeID() (r uuid.UUID, exists bool) {
	v := m.fiat_currency_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFiatCurrencyTypeID returns the old "fiat_currency_type_id" field's value of the FiatCurrency entity.
// If the FiatCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyMutation) OldFiatCurrencyTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFiatCurrencyTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFiatCurrencyTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFiatCurrencyTypeID: %w", err)
	}
	return oldValue.FiatCurrencyTypeID, nil
}

// ClearFiatCurrencyTypeID clears the value of the "fiat_currency_type_id" field.
func (m *FiatCurrencyMutation) ClearFiatCurrencyTypeID() {
	m.fiat_currency_type_id = nil
	m.clearedFields[fiatcurrency.FieldFiatCurrencyTypeID] = struct{}{}
}

// FiatCurrencyTypeIDCleared returns if the "fiat_currency_type_id" field was cleared in this mutation.
func (m *FiatCurrencyMutation) FiatCurrencyTypeIDCleared() bool {
	_, ok := m.clearedFields[fiatcurrency.FieldFiatCurrencyTypeID]
	return ok
}

// ResetFiatCurrencyTypeID resets all changes to the "fiat_currency_type_id" field.
func (m *FiatCurrencyMutation) ResetFiatCurrencyTypeID() {
	m.fiat_currency_type_id = nil
	delete(m.clearedFields, fiatcurrency.FieldFiatCurrencyTypeID)
}

// SetFeedType sets the "feed_type" field.
func (m *FiatCurrencyMutation) SetFeedType(s string) {
	m.feed_type = &s
}

// FeedType returns the value of the "feed_type" field in the mutation.
func (m *FiatCurrencyMutation) FeedType() (r string, exists bool) {
	v := m.feed_type
	if v == nil {
		return
	}
	return *v, true
}

// OldFeedType returns the old "feed_type" field's value of the FiatCurrency entity.
// If the FiatCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyMutation) OldFeedType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeedType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeedType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeedType: %w", err)
	}
	return oldValue.FeedType, nil
}

// ClearFeedType clears the value of the "feed_type" field.
func (m *FiatCurrencyMutation) ClearFeedType() {
	m.feed_type = nil
	m.clearedFields[fiatcurrency.FieldFeedType] = struct{}{}
}

// FeedTypeCleared returns if the "feed_type" field was cleared in this mutation.
func (m *FiatCurrencyMutation) FeedTypeCleared() bool {
	_, ok := m.clearedFields[fiatcurrency.FieldFeedType]
	return ok
}

// ResetFeedType resets all changes to the "feed_type" field.
func (m *FiatCurrencyMutation) ResetFeedType() {
	m.feed_type = nil
	delete(m.clearedFields, fiatcurrency.FieldFeedType)
}

// SetMarketValueLow sets the "market_value_low" field.
func (m *FiatCurrencyMutation) SetMarketValueLow(d decimal.Decimal) {
	m.market_value_low = &d
}

// MarketValueLow returns the value of the "market_value_low" field in the mutation.
func (m *FiatCurrencyMutation) MarketValueLow() (r decimal.Decimal, exists bool) {
	v := m.market_value_low
	if v == nil {
		return
	}
	return *v, true
}

// OldMarketValueLow returns the old "market_value_low" field's value of the FiatCurrency entity.
// If the FiatCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyMutation) OldMarketValueLow(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMarketValueLow is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMarketValueLow requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarketValueLow: %w", err)
	}
	return oldValue.MarketValueLow, nil
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (m *FiatCurrencyMutation) ClearMarketValueLow() {
	m.market_value_low = nil
	m.clearedFields[fiatcurrency.FieldMarketValueLow] = struct{}{}
}

// MarketValueLowCleared returns if the "market_value_low" field was cleared in this mutation.
func (m *FiatCurrencyMutation) MarketValueLowCleared() bool {
	_, ok := m.clearedFields[fiatcurrency.FieldMarketValueLow]
	return ok
}

// ResetMarketValueLow resets all changes to the "market_value_low" field.
func (m *FiatCurrencyMutation) ResetMarketValueLow() {
	m.market_value_low = nil
	delete(m.clearedFields, fiatcurrency.FieldMarketValueLow)
}

// SetMarketValueHigh sets the "market_value_high" field.
func (m *FiatCurrencyMutation) SetMarketValueHigh(d decimal.Decimal) {
	m.market_value_high = &d
}

// MarketValueHigh returns the value of the "market_value_high" field in the mutation.
func (m *FiatCurrencyMutation) MarketValueHigh() (r decimal.Decimal, exists bool) {
	v := m.market_value_high
	if v == nil {
		return
	}
	return *v, true
}

// OldMarketValueHigh returns the old "market_value_high" field's value of the FiatCurrency entity.
// If the FiatCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyMutation) OldMarketValueHigh(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMarketValueHigh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMarketValueHigh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarketValueHigh: %w", err)
	}
	return oldValue.MarketValueHigh, nil
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (m *FiatCurrencyMutation) ClearMarketValueHigh() {
	m.market_value_high = nil
	m.clearedFields[fiatcurrency.FieldMarketValueHigh] = struct{}{}
}

// MarketValueHighCleared returns if the "market_value_high" field was cleared in this mutation.
func (m *FiatCurrencyMutation) MarketValueHighCleared() bool {
	_, ok := m.clearedFields[fiatcurrency.FieldMarketValueHigh]
	return ok
}

// ResetMarketValueHigh resets all changes to the "market_value_high" field.
func (m *FiatCurrencyMutation) ResetMarketValueHigh() {
	m.market_value_high = nil
	delete(m.clearedFields, fiatcurrency.FieldMarketValueHigh)
}

// Where appends a list predicates to the FiatCurrencyMutation builder.
func (m *FiatCurrencyMutation) Where(ps ...predicate.FiatCurrency) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FiatCurrencyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (FiatCurrency).
func (m *FiatCurrencyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FiatCurrencyMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, fiatcurrency.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, fiatcurrency.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, fiatcurrency.FieldDeletedAt)
	}
	if m.fiat_currency_type_id != nil {
		fields = append(fields, fiatcurrency.FieldFiatCurrencyTypeID)
	}
	if m.feed_type != nil {
		fields = append(fields, fiatcurrency.FieldFeedType)
	}
	if m.market_value_low != nil {
		fields = append(fields, fiatcurrency.FieldMarketValueLow)
	}
	if m.market_value_high != nil {
		fields = append(fields, fiatcurrency.FieldMarketValueHigh)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FiatCurrencyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fiatcurrency.FieldCreatedAt:
		return m.CreatedAt()
	case fiatcurrency.FieldUpdatedAt:
		return m.UpdatedAt()
	case fiatcurrency.FieldDeletedAt:
		return m.DeletedAt()
	case fiatcurrency.FieldFiatCurrencyTypeID:
		return m.FiatCurrencyTypeID()
	case fiatcurrency.FieldFeedType:
		return m.FeedType()
	case fiatcurrency.FieldMarketValueLow:
		return m.MarketValueLow()
	case fiatcurrency.FieldMarketValueHigh:
		return m.MarketValueHigh()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FiatCurrencyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fiatcurrency.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case fiatcurrency.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case fiatcurrency.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case fiatcurrency.FieldFiatCurrencyTypeID:
		return m.OldFiatCurrencyTypeID(ctx)
	case fiatcurrency.FieldFeedType:
		return m.OldFeedType(ctx)
	case fiatcurrency.FieldMarketValueLow:
		return m.OldMarketValueLow(ctx)
	case fiatcurrency.FieldMarketValueHigh:
		return m.OldMarketValueHigh(ctx)
	}
	return nil, fmt.Errorf("unknown FiatCurrency field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FiatCurrencyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fiatcurrency.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case fiatcurrency.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case fiatcurrency.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case fiatcurrency.FieldFiatCurrencyTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFiatCurrencyTypeID(v)
		return nil
	case fiatcurrency.FieldFeedType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeedType(v)
		return nil
	case fiatcurrency.FieldMarketValueLow:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarketValueLow(v)
		return nil
	case fiatcurrency.FieldMarketValueHigh:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarketValueHigh(v)
		return nil
	}
	return fmt.Errorf("unknown FiatCurrency field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FiatCurrencyMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, fiatcurrency.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, fiatcurrency.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, fiatcurrency.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FiatCurrencyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case fiatcurrency.FieldCreatedAt:
		return m.AddedCreatedAt()
	case fiatcurrency.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case fiatcurrency.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FiatCurrencyMutation) AddField(name string, value ent.Value) error {
	switch name {
	case fiatcurrency.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case fiatcurrency.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case fiatcurrency.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown FiatCurrency numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FiatCurrencyMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(fiatcurrency.FieldFiatCurrencyTypeID) {
		fields = append(fields, fiatcurrency.FieldFiatCurrencyTypeID)
	}
	if m.FieldCleared(fiatcurrency.FieldFeedType) {
		fields = append(fields, fiatcurrency.FieldFeedType)
	}
	if m.FieldCleared(fiatcurrency.FieldMarketValueLow) {
		fields = append(fields, fiatcurrency.FieldMarketValueLow)
	}
	if m.FieldCleared(fiatcurrency.FieldMarketValueHigh) {
		fields = append(fields, fiatcurrency.FieldMarketValueHigh)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FiatCurrencyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FiatCurrencyMutation) ClearField(name string) error {
	switch name {
	case fiatcurrency.FieldFiatCurrencyTypeID:
		m.ClearFiatCurrencyTypeID()
		return nil
	case fiatcurrency.FieldFeedType:
		m.ClearFeedType()
		return nil
	case fiatcurrency.FieldMarketValueLow:
		m.ClearMarketValueLow()
		return nil
	case fiatcurrency.FieldMarketValueHigh:
		m.ClearMarketValueHigh()
		return nil
	}
	return fmt.Errorf("unknown FiatCurrency nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FiatCurrencyMutation) ResetField(name string) error {
	switch name {
	case fiatcurrency.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case fiatcurrency.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case fiatcurrency.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case fiatcurrency.FieldFiatCurrencyTypeID:
		m.ResetFiatCurrencyTypeID()
		return nil
	case fiatcurrency.FieldFeedType:
		m.ResetFeedType()
		return nil
	case fiatcurrency.FieldMarketValueLow:
		m.ResetMarketValueLow()
		return nil
	case fiatcurrency.FieldMarketValueHigh:
		m.ResetMarketValueHigh()
		return nil
	}
	return fmt.Errorf("unknown FiatCurrency field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FiatCurrencyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FiatCurrencyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FiatCurrencyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FiatCurrencyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FiatCurrencyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FiatCurrencyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FiatCurrencyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FiatCurrency unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FiatCurrencyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FiatCurrency edge %s", name)
}

// FiatCurrencyTypeMutation represents an operation that mutates the FiatCurrencyType nodes in the graph.
type FiatCurrencyTypeMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	name          *string
	logo          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*FiatCurrencyType, error)
	predicates    []predicate.FiatCurrencyType
}

var _ ent.Mutation = (*FiatCurrencyTypeMutation)(nil)

// fiatcurrencytypeOption allows management of the mutation configuration using functional options.
type fiatcurrencytypeOption func(*FiatCurrencyTypeMutation)

// newFiatCurrencyTypeMutation creates new mutation for the FiatCurrencyType entity.
func newFiatCurrencyTypeMutation(c config, op Op, opts ...fiatcurrencytypeOption) *FiatCurrencyTypeMutation {
	m := &FiatCurrencyTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeFiatCurrencyType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFiatCurrencyTypeID sets the ID field of the mutation.
func withFiatCurrencyTypeID(id uuid.UUID) fiatcurrencytypeOption {
	return func(m *FiatCurrencyTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *FiatCurrencyType
		)
		m.oldValue = func(ctx context.Context) (*FiatCurrencyType, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FiatCurrencyType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFiatCurrencyType sets the old FiatCurrencyType of the mutation.
func withFiatCurrencyType(node *FiatCurrencyType) fiatcurrencytypeOption {
	return func(m *FiatCurrencyTypeMutation) {
		m.oldValue = func(context.Context) (*FiatCurrencyType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FiatCurrencyTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FiatCurrencyTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FiatCurrencyType entities.
func (m *FiatCurrencyTypeMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FiatCurrencyTypeMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FiatCurrencyTypeMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FiatCurrencyType.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *FiatCurrencyTypeMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FiatCurrencyTypeMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FiatCurrencyType entity.
// If the FiatCurrencyType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyTypeMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *FiatCurrencyTypeMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *FiatCurrencyTypeMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FiatCurrencyTypeMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FiatCurrencyTypeMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FiatCurrencyTypeMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FiatCurrencyType entity.
// If the FiatCurrencyType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyTypeMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *FiatCurrencyTypeMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *FiatCurrencyTypeMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FiatCurrencyTypeMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *FiatCurrencyTypeMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *FiatCurrencyTypeMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the FiatCurrencyType entity.
// If the FiatCurrencyType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyTypeMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *FiatCurrencyTypeMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *FiatCurrencyTypeMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *FiatCurrencyTypeMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetName sets the "name" field.
func (m *FiatCurrencyTypeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FiatCurrencyTypeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the FiatCurrencyType entity.
// If the FiatCurrencyType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyTypeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *FiatCurrencyTypeMutation) ClearName() {
	m.name = nil
	m.clearedFields[fiatcurrencytype.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *FiatCurrencyTypeMutation) NameCleared() bool {
	_, ok := m.clearedFields[fiatcurrencytype.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *FiatCurrencyTypeMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, fiatcurrencytype.FieldName)
}

// SetLogo sets the "logo" field.
func (m *FiatCurrencyTypeMutation) SetLogo(s string) {
	m.logo = &s
}

// Logo returns the value of the "logo" field in the mutation.
func (m *FiatCurrencyTypeMutation) Logo() (r string, exists bool) {
	v := m.logo
	if v == nil {
		return
	}
	return *v, true
}

// OldLogo returns the old "logo" field's value of the FiatCurrencyType entity.
// If the FiatCurrencyType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FiatCurrencyTypeMutation) OldLogo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogo: %w", err)
	}
	return oldValue.Logo, nil
}

// ClearLogo clears the value of the "logo" field.
func (m *FiatCurrencyTypeMutation) ClearLogo() {
	m.logo = nil
	m.clearedFields[fiatcurrencytype.FieldLogo] = struct{}{}
}

// LogoCleared returns if the "logo" field was cleared in this mutation.
func (m *FiatCurrencyTypeMutation) LogoCleared() bool {
	_, ok := m.clearedFields[fiatcurrencytype.FieldLogo]
	return ok
}

// ResetLogo resets all changes to the "logo" field.
func (m *FiatCurrencyTypeMutation) ResetLogo() {
	m.logo = nil
	delete(m.clearedFields, fiatcurrencytype.FieldLogo)
}

// Where appends a list predicates to the FiatCurrencyTypeMutation builder.
func (m *FiatCurrencyTypeMutation) Where(ps ...predicate.FiatCurrencyType) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FiatCurrencyTypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (FiatCurrencyType).
func (m *FiatCurrencyTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FiatCurrencyTypeMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, fiatcurrencytype.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, fiatcurrencytype.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, fiatcurrencytype.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, fiatcurrencytype.FieldName)
	}
	if m.logo != nil {
		fields = append(fields, fiatcurrencytype.FieldLogo)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FiatCurrencyTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fiatcurrencytype.FieldCreatedAt:
		return m.CreatedAt()
	case fiatcurrencytype.FieldUpdatedAt:
		return m.UpdatedAt()
	case fiatcurrencytype.FieldDeletedAt:
		return m.DeletedAt()
	case fiatcurrencytype.FieldName:
		return m.Name()
	case fiatcurrencytype.FieldLogo:
		return m.Logo()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FiatCurrencyTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fiatcurrencytype.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case fiatcurrencytype.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case fiatcurrencytype.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case fiatcurrencytype.FieldName:
		return m.OldName(ctx)
	case fiatcurrencytype.FieldLogo:
		return m.OldLogo(ctx)
	}
	return nil, fmt.Errorf("unknown FiatCurrencyType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FiatCurrencyTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fiatcurrencytype.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case fiatcurrencytype.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case fiatcurrencytype.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case fiatcurrencytype.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case fiatcurrencytype.FieldLogo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogo(v)
		return nil
	}
	return fmt.Errorf("unknown FiatCurrencyType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FiatCurrencyTypeMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, fiatcurrencytype.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, fiatcurrencytype.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, fiatcurrencytype.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FiatCurrencyTypeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case fiatcurrencytype.FieldCreatedAt:
		return m.AddedCreatedAt()
	case fiatcurrencytype.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case fiatcurrencytype.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FiatCurrencyTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case fiatcurrencytype.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case fiatcurrencytype.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case fiatcurrencytype.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown FiatCurrencyType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FiatCurrencyTypeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(fiatcurrencytype.FieldName) {
		fields = append(fields, fiatcurrencytype.FieldName)
	}
	if m.FieldCleared(fiatcurrencytype.FieldLogo) {
		fields = append(fields, fiatcurrencytype.FieldLogo)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FiatCurrencyTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FiatCurrencyTypeMutation) ClearField(name string) error {
	switch name {
	case fiatcurrencytype.FieldName:
		m.ClearName()
		return nil
	case fiatcurrencytype.FieldLogo:
		m.ClearLogo()
		return nil
	}
	return fmt.Errorf("unknown FiatCurrencyType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FiatCurrencyTypeMutation) ResetField(name string) error {
	switch name {
	case fiatcurrencytype.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case fiatcurrencytype.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case fiatcurrencytype.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case fiatcurrencytype.FieldName:
		m.ResetName()
		return nil
	case fiatcurrencytype.FieldLogo:
		m.ResetLogo()
		return nil
	}
	return fmt.Errorf("unknown FiatCurrencyType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FiatCurrencyTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FiatCurrencyTypeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FiatCurrencyTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FiatCurrencyTypeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FiatCurrencyTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FiatCurrencyTypeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FiatCurrencyTypeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FiatCurrencyType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FiatCurrencyTypeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FiatCurrencyType edge %s", name)
}

// SettingMutation represents an operation that mutates the Setting nodes in the graph.
type SettingMutation struct {
	config
	op                             Op
	typ                            string
	id                             *uuid.UUID
	created_at                     *uint32
	addcreated_at                  *int32
	updated_at                     *uint32
	addupdated_at                  *int32
	deleted_at                     *uint32
	adddeleted_at                  *int32
	coin_type_id                   *uuid.UUID
	fee_coin_type_id               *uuid.UUID
	withdraw_fee_by_stable_usd     *bool
	withdraw_fee_amount            *decimal.Decimal
	collect_fee_amount             *decimal.Decimal
	hot_wallet_fee_amount          *decimal.Decimal
	low_fee_amount                 *decimal.Decimal
	hot_low_fee_amount             *decimal.Decimal
	hot_wallet_account_amount      *decimal.Decimal
	payment_account_collect_amount *decimal.Decimal
	least_transfer_amount          *decimal.Decimal
	need_memo                      *bool
	clearedFields                  map[string]struct{}
	done                           bool
	oldValue                       func(context.Context) (*Setting, error)
	predicates                     []predicate.Setting
}

var _ ent.Mutation = (*SettingMutation)(nil)

// settingOption allows management of the mutation configuration using functional options.
type settingOption func(*SettingMutation)

// newSettingMutation creates new mutation for the Setting entity.
func newSettingMutation(c config, op Op, opts ...settingOption) *SettingMutation {
	m := &SettingMutation{
		config:        c,
		op:            op,
		typ:           TypeSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSettingID sets the ID field of the mutation.
func withSettingID(id uuid.UUID) settingOption {
	return func(m *SettingMutation) {
		var (
			err   error
			once  sync.Once
			value *Setting
		)
		m.oldValue = func(ctx context.Context) (*Setting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Setting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSetting sets the old Setting of the mutation.
func withSetting(node *Setting) settingOption {
	return func(m *SettingMutation) {
		m.oldValue = func(context.Context) (*Setting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Setting entities.
func (m *SettingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SettingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SettingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Setting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SettingMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SettingMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *SettingMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *SettingMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SettingMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SettingMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SettingMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *SettingMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *SettingMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SettingMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SettingMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SettingMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *SettingMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *SettingMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SettingMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *SettingMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *SettingMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *SettingMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[setting.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *SettingMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[setting.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *SettingMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, setting.FieldCoinTypeID)
}

// SetFeeCoinTypeID sets the "fee_coin_type_id" field.
func (m *SettingMutation) SetFeeCoinTypeID(u uuid.UUID) {
	m.fee_coin_type_id = &u
}

// FeeCoinTypeID returns the value of the "fee_coin_type_id" field in the mutation.
func (m *SettingMutation) FeeCoinTypeID() (r uuid.UUID, exists bool) {
	v := m.fee_coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeCoinTypeID returns the old "fee_coin_type_id" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldFeeCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeeCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeeCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeCoinTypeID: %w", err)
	}
	return oldValue.FeeCoinTypeID, nil
}

// ClearFeeCoinTypeID clears the value of the "fee_coin_type_id" field.
func (m *SettingMutation) ClearFeeCoinTypeID() {
	m.fee_coin_type_id = nil
	m.clearedFields[setting.FieldFeeCoinTypeID] = struct{}{}
}

// FeeCoinTypeIDCleared returns if the "fee_coin_type_id" field was cleared in this mutation.
func (m *SettingMutation) FeeCoinTypeIDCleared() bool {
	_, ok := m.clearedFields[setting.FieldFeeCoinTypeID]
	return ok
}

// ResetFeeCoinTypeID resets all changes to the "fee_coin_type_id" field.
func (m *SettingMutation) ResetFeeCoinTypeID() {
	m.fee_coin_type_id = nil
	delete(m.clearedFields, setting.FieldFeeCoinTypeID)
}

// SetWithdrawFeeByStableUsd sets the "withdraw_fee_by_stable_usd" field.
func (m *SettingMutation) SetWithdrawFeeByStableUsd(b bool) {
	m.withdraw_fee_by_stable_usd = &b
}

// WithdrawFeeByStableUsd returns the value of the "withdraw_fee_by_stable_usd" field in the mutation.
func (m *SettingMutation) WithdrawFeeByStableUsd() (r bool, exists bool) {
	v := m.withdraw_fee_by_stable_usd
	if v == nil {
		return
	}
	return *v, true
}

// OldWithdrawFeeByStableUsd returns the old "withdraw_fee_by_stable_usd" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldWithdrawFeeByStableUsd(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWithdrawFeeByStableUsd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWithdrawFeeByStableUsd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWithdrawFeeByStableUsd: %w", err)
	}
	return oldValue.WithdrawFeeByStableUsd, nil
}

// ClearWithdrawFeeByStableUsd clears the value of the "withdraw_fee_by_stable_usd" field.
func (m *SettingMutation) ClearWithdrawFeeByStableUsd() {
	m.withdraw_fee_by_stable_usd = nil
	m.clearedFields[setting.FieldWithdrawFeeByStableUsd] = struct{}{}
}

// WithdrawFeeByStableUsdCleared returns if the "withdraw_fee_by_stable_usd" field was cleared in this mutation.
func (m *SettingMutation) WithdrawFeeByStableUsdCleared() bool {
	_, ok := m.clearedFields[setting.FieldWithdrawFeeByStableUsd]
	return ok
}

// ResetWithdrawFeeByStableUsd resets all changes to the "withdraw_fee_by_stable_usd" field.
func (m *SettingMutation) ResetWithdrawFeeByStableUsd() {
	m.withdraw_fee_by_stable_usd = nil
	delete(m.clearedFields, setting.FieldWithdrawFeeByStableUsd)
}

// SetWithdrawFeeAmount sets the "withdraw_fee_amount" field.
func (m *SettingMutation) SetWithdrawFeeAmount(d decimal.Decimal) {
	m.withdraw_fee_amount = &d
}

// WithdrawFeeAmount returns the value of the "withdraw_fee_amount" field in the mutation.
func (m *SettingMutation) WithdrawFeeAmount() (r decimal.Decimal, exists bool) {
	v := m.withdraw_fee_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldWithdrawFeeAmount returns the old "withdraw_fee_amount" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldWithdrawFeeAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWithdrawFeeAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWithdrawFeeAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWithdrawFeeAmount: %w", err)
	}
	return oldValue.WithdrawFeeAmount, nil
}

// ClearWithdrawFeeAmount clears the value of the "withdraw_fee_amount" field.
func (m *SettingMutation) ClearWithdrawFeeAmount() {
	m.withdraw_fee_amount = nil
	m.clearedFields[setting.FieldWithdrawFeeAmount] = struct{}{}
}

// WithdrawFeeAmountCleared returns if the "withdraw_fee_amount" field was cleared in this mutation.
func (m *SettingMutation) WithdrawFeeAmountCleared() bool {
	_, ok := m.clearedFields[setting.FieldWithdrawFeeAmount]
	return ok
}

// ResetWithdrawFeeAmount resets all changes to the "withdraw_fee_amount" field.
func (m *SettingMutation) ResetWithdrawFeeAmount() {
	m.withdraw_fee_amount = nil
	delete(m.clearedFields, setting.FieldWithdrawFeeAmount)
}

// SetCollectFeeAmount sets the "collect_fee_amount" field.
func (m *SettingMutation) SetCollectFeeAmount(d decimal.Decimal) {
	m.collect_fee_amount = &d
}

// CollectFeeAmount returns the value of the "collect_fee_amount" field in the mutation.
func (m *SettingMutation) CollectFeeAmount() (r decimal.Decimal, exists bool) {
	v := m.collect_fee_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldCollectFeeAmount returns the old "collect_fee_amount" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldCollectFeeAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCollectFeeAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCollectFeeAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCollectFeeAmount: %w", err)
	}
	return oldValue.CollectFeeAmount, nil
}

// ClearCollectFeeAmount clears the value of the "collect_fee_amount" field.
func (m *SettingMutation) ClearCollectFeeAmount() {
	m.collect_fee_amount = nil
	m.clearedFields[setting.FieldCollectFeeAmount] = struct{}{}
}

// CollectFeeAmountCleared returns if the "collect_fee_amount" field was cleared in this mutation.
func (m *SettingMutation) CollectFeeAmountCleared() bool {
	_, ok := m.clearedFields[setting.FieldCollectFeeAmount]
	return ok
}

// ResetCollectFeeAmount resets all changes to the "collect_fee_amount" field.
func (m *SettingMutation) ResetCollectFeeAmount() {
	m.collect_fee_amount = nil
	delete(m.clearedFields, setting.FieldCollectFeeAmount)
}

// SetHotWalletFeeAmount sets the "hot_wallet_fee_amount" field.
func (m *SettingMutation) SetHotWalletFeeAmount(d decimal.Decimal) {
	m.hot_wallet_fee_amount = &d
}

// HotWalletFeeAmount returns the value of the "hot_wallet_fee_amount" field in the mutation.
func (m *SettingMutation) HotWalletFeeAmount() (r decimal.Decimal, exists bool) {
	v := m.hot_wallet_fee_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldHotWalletFeeAmount returns the old "hot_wallet_fee_amount" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldHotWalletFeeAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHotWalletFeeAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHotWalletFeeAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHotWalletFeeAmount: %w", err)
	}
	return oldValue.HotWalletFeeAmount, nil
}

// ClearHotWalletFeeAmount clears the value of the "hot_wallet_fee_amount" field.
func (m *SettingMutation) ClearHotWalletFeeAmount() {
	m.hot_wallet_fee_amount = nil
	m.clearedFields[setting.FieldHotWalletFeeAmount] = struct{}{}
}

// HotWalletFeeAmountCleared returns if the "hot_wallet_fee_amount" field was cleared in this mutation.
func (m *SettingMutation) HotWalletFeeAmountCleared() bool {
	_, ok := m.clearedFields[setting.FieldHotWalletFeeAmount]
	return ok
}

// ResetHotWalletFeeAmount resets all changes to the "hot_wallet_fee_amount" field.
func (m *SettingMutation) ResetHotWalletFeeAmount() {
	m.hot_wallet_fee_amount = nil
	delete(m.clearedFields, setting.FieldHotWalletFeeAmount)
}

// SetLowFeeAmount sets the "low_fee_amount" field.
func (m *SettingMutation) SetLowFeeAmount(d decimal.Decimal) {
	m.low_fee_amount = &d
}

// LowFeeAmount returns the value of the "low_fee_amount" field in the mutation.
func (m *SettingMutation) LowFeeAmount() (r decimal.Decimal, exists bool) {
	v := m.low_fee_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldLowFeeAmount returns the old "low_fee_amount" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldLowFeeAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLowFeeAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLowFeeAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLowFeeAmount: %w", err)
	}
	return oldValue.LowFeeAmount, nil
}

// ClearLowFeeAmount clears the value of the "low_fee_amount" field.
func (m *SettingMutation) ClearLowFeeAmount() {
	m.low_fee_amount = nil
	m.clearedFields[setting.FieldLowFeeAmount] = struct{}{}
}

// LowFeeAmountCleared returns if the "low_fee_amount" field was cleared in this mutation.
func (m *SettingMutation) LowFeeAmountCleared() bool {
	_, ok := m.clearedFields[setting.FieldLowFeeAmount]
	return ok
}

// ResetLowFeeAmount resets all changes to the "low_fee_amount" field.
func (m *SettingMutation) ResetLowFeeAmount() {
	m.low_fee_amount = nil
	delete(m.clearedFields, setting.FieldLowFeeAmount)
}

// SetHotLowFeeAmount sets the "hot_low_fee_amount" field.
func (m *SettingMutation) SetHotLowFeeAmount(d decimal.Decimal) {
	m.hot_low_fee_amount = &d
}

// HotLowFeeAmount returns the value of the "hot_low_fee_amount" field in the mutation.
func (m *SettingMutation) HotLowFeeAmount() (r decimal.Decimal, exists bool) {
	v := m.hot_low_fee_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldHotLowFeeAmount returns the old "hot_low_fee_amount" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldHotLowFeeAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHotLowFeeAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHotLowFeeAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHotLowFeeAmount: %w", err)
	}
	return oldValue.HotLowFeeAmount, nil
}

// ClearHotLowFeeAmount clears the value of the "hot_low_fee_amount" field.
func (m *SettingMutation) ClearHotLowFeeAmount() {
	m.hot_low_fee_amount = nil
	m.clearedFields[setting.FieldHotLowFeeAmount] = struct{}{}
}

// HotLowFeeAmountCleared returns if the "hot_low_fee_amount" field was cleared in this mutation.
func (m *SettingMutation) HotLowFeeAmountCleared() bool {
	_, ok := m.clearedFields[setting.FieldHotLowFeeAmount]
	return ok
}

// ResetHotLowFeeAmount resets all changes to the "hot_low_fee_amount" field.
func (m *SettingMutation) ResetHotLowFeeAmount() {
	m.hot_low_fee_amount = nil
	delete(m.clearedFields, setting.FieldHotLowFeeAmount)
}

// SetHotWalletAccountAmount sets the "hot_wallet_account_amount" field.
func (m *SettingMutation) SetHotWalletAccountAmount(d decimal.Decimal) {
	m.hot_wallet_account_amount = &d
}

// HotWalletAccountAmount returns the value of the "hot_wallet_account_amount" field in the mutation.
func (m *SettingMutation) HotWalletAccountAmount() (r decimal.Decimal, exists bool) {
	v := m.hot_wallet_account_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldHotWalletAccountAmount returns the old "hot_wallet_account_amount" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldHotWalletAccountAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHotWalletAccountAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHotWalletAccountAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHotWalletAccountAmount: %w", err)
	}
	return oldValue.HotWalletAccountAmount, nil
}

// ClearHotWalletAccountAmount clears the value of the "hot_wallet_account_amount" field.
func (m *SettingMutation) ClearHotWalletAccountAmount() {
	m.hot_wallet_account_amount = nil
	m.clearedFields[setting.FieldHotWalletAccountAmount] = struct{}{}
}

// HotWalletAccountAmountCleared returns if the "hot_wallet_account_amount" field was cleared in this mutation.
func (m *SettingMutation) HotWalletAccountAmountCleared() bool {
	_, ok := m.clearedFields[setting.FieldHotWalletAccountAmount]
	return ok
}

// ResetHotWalletAccountAmount resets all changes to the "hot_wallet_account_amount" field.
func (m *SettingMutation) ResetHotWalletAccountAmount() {
	m.hot_wallet_account_amount = nil
	delete(m.clearedFields, setting.FieldHotWalletAccountAmount)
}

// SetPaymentAccountCollectAmount sets the "payment_account_collect_amount" field.
func (m *SettingMutation) SetPaymentAccountCollectAmount(d decimal.Decimal) {
	m.payment_account_collect_amount = &d
}

// PaymentAccountCollectAmount returns the value of the "payment_account_collect_amount" field in the mutation.
func (m *SettingMutation) PaymentAccountCollectAmount() (r decimal.Decimal, exists bool) {
	v := m.payment_account_collect_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentAccountCollectAmount returns the old "payment_account_collect_amount" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldPaymentAccountCollectAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentAccountCollectAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentAccountCollectAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentAccountCollectAmount: %w", err)
	}
	return oldValue.PaymentAccountCollectAmount, nil
}

// ClearPaymentAccountCollectAmount clears the value of the "payment_account_collect_amount" field.
func (m *SettingMutation) ClearPaymentAccountCollectAmount() {
	m.payment_account_collect_amount = nil
	m.clearedFields[setting.FieldPaymentAccountCollectAmount] = struct{}{}
}

// PaymentAccountCollectAmountCleared returns if the "payment_account_collect_amount" field was cleared in this mutation.
func (m *SettingMutation) PaymentAccountCollectAmountCleared() bool {
	_, ok := m.clearedFields[setting.FieldPaymentAccountCollectAmount]
	return ok
}

// ResetPaymentAccountCollectAmount resets all changes to the "payment_account_collect_amount" field.
func (m *SettingMutation) ResetPaymentAccountCollectAmount() {
	m.payment_account_collect_amount = nil
	delete(m.clearedFields, setting.FieldPaymentAccountCollectAmount)
}

// SetLeastTransferAmount sets the "least_transfer_amount" field.
func (m *SettingMutation) SetLeastTransferAmount(d decimal.Decimal) {
	m.least_transfer_amount = &d
}

// LeastTransferAmount returns the value of the "least_transfer_amount" field in the mutation.
func (m *SettingMutation) LeastTransferAmount() (r decimal.Decimal, exists bool) {
	v := m.least_transfer_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldLeastTransferAmount returns the old "least_transfer_amount" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldLeastTransferAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLeastTransferAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLeastTransferAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLeastTransferAmount: %w", err)
	}
	return oldValue.LeastTransferAmount, nil
}

// ClearLeastTransferAmount clears the value of the "least_transfer_amount" field.
func (m *SettingMutation) ClearLeastTransferAmount() {
	m.least_transfer_amount = nil
	m.clearedFields[setting.FieldLeastTransferAmount] = struct{}{}
}

// LeastTransferAmountCleared returns if the "least_transfer_amount" field was cleared in this mutation.
func (m *SettingMutation) LeastTransferAmountCleared() bool {
	_, ok := m.clearedFields[setting.FieldLeastTransferAmount]
	return ok
}

// ResetLeastTransferAmount resets all changes to the "least_transfer_amount" field.
func (m *SettingMutation) ResetLeastTransferAmount() {
	m.least_transfer_amount = nil
	delete(m.clearedFields, setting.FieldLeastTransferAmount)
}

// SetNeedMemo sets the "need_memo" field.
func (m *SettingMutation) SetNeedMemo(b bool) {
	m.need_memo = &b
}

// NeedMemo returns the value of the "need_memo" field in the mutation.
func (m *SettingMutation) NeedMemo() (r bool, exists bool) {
	v := m.need_memo
	if v == nil {
		return
	}
	return *v, true
}

// OldNeedMemo returns the old "need_memo" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldNeedMemo(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNeedMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNeedMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNeedMemo: %w", err)
	}
	return oldValue.NeedMemo, nil
}

// ClearNeedMemo clears the value of the "need_memo" field.
func (m *SettingMutation) ClearNeedMemo() {
	m.need_memo = nil
	m.clearedFields[setting.FieldNeedMemo] = struct{}{}
}

// NeedMemoCleared returns if the "need_memo" field was cleared in this mutation.
func (m *SettingMutation) NeedMemoCleared() bool {
	_, ok := m.clearedFields[setting.FieldNeedMemo]
	return ok
}

// ResetNeedMemo resets all changes to the "need_memo" field.
func (m *SettingMutation) ResetNeedMemo() {
	m.need_memo = nil
	delete(m.clearedFields, setting.FieldNeedMemo)
}

// Where appends a list predicates to the SettingMutation builder.
func (m *SettingMutation) Where(ps ...predicate.Setting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Setting).
func (m *SettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SettingMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.created_at != nil {
		fields = append(fields, setting.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, setting.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, setting.FieldDeletedAt)
	}
	if m.coin_type_id != nil {
		fields = append(fields, setting.FieldCoinTypeID)
	}
	if m.fee_coin_type_id != nil {
		fields = append(fields, setting.FieldFeeCoinTypeID)
	}
	if m.withdraw_fee_by_stable_usd != nil {
		fields = append(fields, setting.FieldWithdrawFeeByStableUsd)
	}
	if m.withdraw_fee_amount != nil {
		fields = append(fields, setting.FieldWithdrawFeeAmount)
	}
	if m.collect_fee_amount != nil {
		fields = append(fields, setting.FieldCollectFeeAmount)
	}
	if m.hot_wallet_fee_amount != nil {
		fields = append(fields, setting.FieldHotWalletFeeAmount)
	}
	if m.low_fee_amount != nil {
		fields = append(fields, setting.FieldLowFeeAmount)
	}
	if m.hot_low_fee_amount != nil {
		fields = append(fields, setting.FieldHotLowFeeAmount)
	}
	if m.hot_wallet_account_amount != nil {
		fields = append(fields, setting.FieldHotWalletAccountAmount)
	}
	if m.payment_account_collect_amount != nil {
		fields = append(fields, setting.FieldPaymentAccountCollectAmount)
	}
	if m.least_transfer_amount != nil {
		fields = append(fields, setting.FieldLeastTransferAmount)
	}
	if m.need_memo != nil {
		fields = append(fields, setting.FieldNeedMemo)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case setting.FieldCreatedAt:
		return m.CreatedAt()
	case setting.FieldUpdatedAt:
		return m.UpdatedAt()
	case setting.FieldDeletedAt:
		return m.DeletedAt()
	case setting.FieldCoinTypeID:
		return m.CoinTypeID()
	case setting.FieldFeeCoinTypeID:
		return m.FeeCoinTypeID()
	case setting.FieldWithdrawFeeByStableUsd:
		return m.WithdrawFeeByStableUsd()
	case setting.FieldWithdrawFeeAmount:
		return m.WithdrawFeeAmount()
	case setting.FieldCollectFeeAmount:
		return m.CollectFeeAmount()
	case setting.FieldHotWalletFeeAmount:
		return m.HotWalletFeeAmount()
	case setting.FieldLowFeeAmount:
		return m.LowFeeAmount()
	case setting.FieldHotLowFeeAmount:
		return m.HotLowFeeAmount()
	case setting.FieldHotWalletAccountAmount:
		return m.HotWalletAccountAmount()
	case setting.FieldPaymentAccountCollectAmount:
		return m.PaymentAccountCollectAmount()
	case setting.FieldLeastTransferAmount:
		return m.LeastTransferAmount()
	case setting.FieldNeedMemo:
		return m.NeedMemo()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case setting.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case setting.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case setting.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case setting.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case setting.FieldFeeCoinTypeID:
		return m.OldFeeCoinTypeID(ctx)
	case setting.FieldWithdrawFeeByStableUsd:
		return m.OldWithdrawFeeByStableUsd(ctx)
	case setting.FieldWithdrawFeeAmount:
		return m.OldWithdrawFeeAmount(ctx)
	case setting.FieldCollectFeeAmount:
		return m.OldCollectFeeAmount(ctx)
	case setting.FieldHotWalletFeeAmount:
		return m.OldHotWalletFeeAmount(ctx)
	case setting.FieldLowFeeAmount:
		return m.OldLowFeeAmount(ctx)
	case setting.FieldHotLowFeeAmount:
		return m.OldHotLowFeeAmount(ctx)
	case setting.FieldHotWalletAccountAmount:
		return m.OldHotWalletAccountAmount(ctx)
	case setting.FieldPaymentAccountCollectAmount:
		return m.OldPaymentAccountCollectAmount(ctx)
	case setting.FieldLeastTransferAmount:
		return m.OldLeastTransferAmount(ctx)
	case setting.FieldNeedMemo:
		return m.OldNeedMemo(ctx)
	}
	return nil, fmt.Errorf("unknown Setting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case setting.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case setting.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case setting.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case setting.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case setting.FieldFeeCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeCoinTypeID(v)
		return nil
	case setting.FieldWithdrawFeeByStableUsd:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWithdrawFeeByStableUsd(v)
		return nil
	case setting.FieldWithdrawFeeAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWithdrawFeeAmount(v)
		return nil
	case setting.FieldCollectFeeAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCollectFeeAmount(v)
		return nil
	case setting.FieldHotWalletFeeAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHotWalletFeeAmount(v)
		return nil
	case setting.FieldLowFeeAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLowFeeAmount(v)
		return nil
	case setting.FieldHotLowFeeAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHotLowFeeAmount(v)
		return nil
	case setting.FieldHotWalletAccountAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHotWalletAccountAmount(v)
		return nil
	case setting.FieldPaymentAccountCollectAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentAccountCollectAmount(v)
		return nil
	case setting.FieldLeastTransferAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLeastTransferAmount(v)
		return nil
	case setting.FieldNeedMemo:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNeedMemo(v)
		return nil
	}
	return fmt.Errorf("unknown Setting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SettingMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, setting.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, setting.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, setting.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case setting.FieldCreatedAt:
		return m.AddedCreatedAt()
	case setting.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case setting.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case setting.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case setting.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case setting.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Setting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SettingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(setting.FieldCoinTypeID) {
		fields = append(fields, setting.FieldCoinTypeID)
	}
	if m.FieldCleared(setting.FieldFeeCoinTypeID) {
		fields = append(fields, setting.FieldFeeCoinTypeID)
	}
	if m.FieldCleared(setting.FieldWithdrawFeeByStableUsd) {
		fields = append(fields, setting.FieldWithdrawFeeByStableUsd)
	}
	if m.FieldCleared(setting.FieldWithdrawFeeAmount) {
		fields = append(fields, setting.FieldWithdrawFeeAmount)
	}
	if m.FieldCleared(setting.FieldCollectFeeAmount) {
		fields = append(fields, setting.FieldCollectFeeAmount)
	}
	if m.FieldCleared(setting.FieldHotWalletFeeAmount) {
		fields = append(fields, setting.FieldHotWalletFeeAmount)
	}
	if m.FieldCleared(setting.FieldLowFeeAmount) {
		fields = append(fields, setting.FieldLowFeeAmount)
	}
	if m.FieldCleared(setting.FieldHotLowFeeAmount) {
		fields = append(fields, setting.FieldHotLowFeeAmount)
	}
	if m.FieldCleared(setting.FieldHotWalletAccountAmount) {
		fields = append(fields, setting.FieldHotWalletAccountAmount)
	}
	if m.FieldCleared(setting.FieldPaymentAccountCollectAmount) {
		fields = append(fields, setting.FieldPaymentAccountCollectAmount)
	}
	if m.FieldCleared(setting.FieldLeastTransferAmount) {
		fields = append(fields, setting.FieldLeastTransferAmount)
	}
	if m.FieldCleared(setting.FieldNeedMemo) {
		fields = append(fields, setting.FieldNeedMemo)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SettingMutation) ClearField(name string) error {
	switch name {
	case setting.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case setting.FieldFeeCoinTypeID:
		m.ClearFeeCoinTypeID()
		return nil
	case setting.FieldWithdrawFeeByStableUsd:
		m.ClearWithdrawFeeByStableUsd()
		return nil
	case setting.FieldWithdrawFeeAmount:
		m.ClearWithdrawFeeAmount()
		return nil
	case setting.FieldCollectFeeAmount:
		m.ClearCollectFeeAmount()
		return nil
	case setting.FieldHotWalletFeeAmount:
		m.ClearHotWalletFeeAmount()
		return nil
	case setting.FieldLowFeeAmount:
		m.ClearLowFeeAmount()
		return nil
	case setting.FieldHotLowFeeAmount:
		m.ClearHotLowFeeAmount()
		return nil
	case setting.FieldHotWalletAccountAmount:
		m.ClearHotWalletAccountAmount()
		return nil
	case setting.FieldPaymentAccountCollectAmount:
		m.ClearPaymentAccountCollectAmount()
		return nil
	case setting.FieldLeastTransferAmount:
		m.ClearLeastTransferAmount()
		return nil
	case setting.FieldNeedMemo:
		m.ClearNeedMemo()
		return nil
	}
	return fmt.Errorf("unknown Setting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SettingMutation) ResetField(name string) error {
	switch name {
	case setting.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case setting.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case setting.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case setting.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case setting.FieldFeeCoinTypeID:
		m.ResetFeeCoinTypeID()
		return nil
	case setting.FieldWithdrawFeeByStableUsd:
		m.ResetWithdrawFeeByStableUsd()
		return nil
	case setting.FieldWithdrawFeeAmount:
		m.ResetWithdrawFeeAmount()
		return nil
	case setting.FieldCollectFeeAmount:
		m.ResetCollectFeeAmount()
		return nil
	case setting.FieldHotWalletFeeAmount:
		m.ResetHotWalletFeeAmount()
		return nil
	case setting.FieldLowFeeAmount:
		m.ResetLowFeeAmount()
		return nil
	case setting.FieldHotLowFeeAmount:
		m.ResetHotLowFeeAmount()
		return nil
	case setting.FieldHotWalletAccountAmount:
		m.ResetHotWalletAccountAmount()
		return nil
	case setting.FieldPaymentAccountCollectAmount:
		m.ResetPaymentAccountCollectAmount()
		return nil
	case setting.FieldLeastTransferAmount:
		m.ResetLeastTransferAmount()
		return nil
	case setting.FieldNeedMemo:
		m.ResetNeedMemo()
		return nil
	}
	return fmt.Errorf("unknown Setting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Setting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Setting edge %s", name)
}

// TranMutation represents an operation that mutates the Tran nodes in the graph.
type TranMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	coin_type_id    *uuid.UUID
	from_account_id *uuid.UUID
	to_account_id   *uuid.UUID
	amount          *decimal.Decimal
	fee_amount      *decimal.Decimal
	chain_tx_id     *string
	state           *string
	extra           *string
	_type           *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Tran, error)
	predicates      []predicate.Tran
}

var _ ent.Mutation = (*TranMutation)(nil)

// tranOption allows management of the mutation configuration using functional options.
type tranOption func(*TranMutation)

// newTranMutation creates new mutation for the Tran entity.
func newTranMutation(c config, op Op, opts ...tranOption) *TranMutation {
	m := &TranMutation{
		config:        c,
		op:            op,
		typ:           TypeTran,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTranID sets the ID field of the mutation.
func withTranID(id uuid.UUID) tranOption {
	return func(m *TranMutation) {
		var (
			err   error
			once  sync.Once
			value *Tran
		)
		m.oldValue = func(ctx context.Context) (*Tran, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tran.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTran sets the old Tran of the mutation.
func withTran(node *Tran) tranOption {
	return func(m *TranMutation) {
		m.oldValue = func(context.Context) (*Tran, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TranMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TranMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Tran entities.
func (m *TranMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TranMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TranMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tran.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TranMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TranMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *TranMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *TranMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TranMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TranMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TranMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *TranMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *TranMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TranMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *TranMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *TranMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *TranMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *TranMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *TranMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *TranMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *TranMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *TranMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[tran.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *TranMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[tran.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *TranMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, tran.FieldCoinTypeID)
}

// SetFromAccountID sets the "from_account_id" field.
func (m *TranMutation) SetFromAccountID(u uuid.UUID) {
	m.from_account_id = &u
}

// FromAccountID returns the value of the "from_account_id" field in the mutation.
func (m *TranMutation) FromAccountID() (r uuid.UUID, exists bool) {
	v := m.from_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFromAccountID returns the old "from_account_id" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldFromAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromAccountID: %w", err)
	}
	return oldValue.FromAccountID, nil
}

// ClearFromAccountID clears the value of the "from_account_id" field.
func (m *TranMutation) ClearFromAccountID() {
	m.from_account_id = nil
	m.clearedFields[tran.FieldFromAccountID] = struct{}{}
}

// FromAccountIDCleared returns if the "from_account_id" field was cleared in this mutation.
func (m *TranMutation) FromAccountIDCleared() bool {
	_, ok := m.clearedFields[tran.FieldFromAccountID]
	return ok
}

// ResetFromAccountID resets all changes to the "from_account_id" field.
func (m *TranMutation) ResetFromAccountID() {
	m.from_account_id = nil
	delete(m.clearedFields, tran.FieldFromAccountID)
}

// SetToAccountID sets the "to_account_id" field.
func (m *TranMutation) SetToAccountID(u uuid.UUID) {
	m.to_account_id = &u
}

// ToAccountID returns the value of the "to_account_id" field in the mutation.
func (m *TranMutation) ToAccountID() (r uuid.UUID, exists bool) {
	v := m.to_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldToAccountID returns the old "to_account_id" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldToAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToAccountID: %w", err)
	}
	return oldValue.ToAccountID, nil
}

// ClearToAccountID clears the value of the "to_account_id" field.
func (m *TranMutation) ClearToAccountID() {
	m.to_account_id = nil
	m.clearedFields[tran.FieldToAccountID] = struct{}{}
}

// ToAccountIDCleared returns if the "to_account_id" field was cleared in this mutation.
func (m *TranMutation) ToAccountIDCleared() bool {
	_, ok := m.clearedFields[tran.FieldToAccountID]
	return ok
}

// ResetToAccountID resets all changes to the "to_account_id" field.
func (m *TranMutation) ResetToAccountID() {
	m.to_account_id = nil
	delete(m.clearedFields, tran.FieldToAccountID)
}

// SetAmount sets the "amount" field.
func (m *TranMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
}

// Amount returns the value of the "amount" field in the mutation.
func (m *TranMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ClearAmount clears the value of the "amount" field.
func (m *TranMutation) ClearAmount() {
	m.amount = nil
	m.clearedFields[tran.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *TranMutation) AmountCleared() bool {
	_, ok := m.clearedFields[tran.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *TranMutation) ResetAmount() {
	m.amount = nil
	delete(m.clearedFields, tran.FieldAmount)
}

// SetFeeAmount sets the "fee_amount" field.
func (m *TranMutation) SetFeeAmount(d decimal.Decimal) {
	m.fee_amount = &d
}

// FeeAmount returns the value of the "fee_amount" field in the mutation.
func (m *TranMutation) FeeAmount() (r decimal.Decimal, exists bool) {
	v := m.fee_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeAmount returns the old "fee_amount" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldFeeAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeeAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeeAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeAmount: %w", err)
	}
	return oldValue.FeeAmount, nil
}

// ClearFeeAmount clears the value of the "fee_amount" field.
func (m *TranMutation) ClearFeeAmount() {
	m.fee_amount = nil
	m.clearedFields[tran.FieldFeeAmount] = struct{}{}
}

// FeeAmountCleared returns if the "fee_amount" field was cleared in this mutation.
func (m *TranMutation) FeeAmountCleared() bool {
	_, ok := m.clearedFields[tran.FieldFeeAmount]
	return ok
}

// ResetFeeAmount resets all changes to the "fee_amount" field.
func (m *TranMutation) ResetFeeAmount() {
	m.fee_amount = nil
	delete(m.clearedFields, tran.FieldFeeAmount)
}

// SetChainTxID sets the "chain_tx_id" field.
func (m *TranMutation) SetChainTxID(s string) {
	m.chain_tx_id = &s
}

// ChainTxID returns the value of the "chain_tx_id" field in the mutation.
func (m *TranMutation) ChainTxID() (r string, exists bool) {
	v := m.chain_tx_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChainTxID returns the old "chain_tx_id" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldChainTxID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainTxID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainTxID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainTxID: %w", err)
	}
	return oldValue.ChainTxID, nil
}

// ClearChainTxID clears the value of the "chain_tx_id" field.
func (m *TranMutation) ClearChainTxID() {
	m.chain_tx_id = nil
	m.clearedFields[tran.FieldChainTxID] = struct{}{}
}

// ChainTxIDCleared returns if the "chain_tx_id" field was cleared in this mutation.
func (m *TranMutation) ChainTxIDCleared() bool {
	_, ok := m.clearedFields[tran.FieldChainTxID]
	return ok
}

// ResetChainTxID resets all changes to the "chain_tx_id" field.
func (m *TranMutation) ResetChainTxID() {
	m.chain_tx_id = nil
	delete(m.clearedFields, tran.FieldChainTxID)
}

// SetState sets the "state" field.
func (m *TranMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *TranMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ClearState clears the value of the "state" field.
func (m *TranMutation) ClearState() {
	m.state = nil
	m.clearedFields[tran.FieldState] = struct{}{}
}

// StateCleared returns if the "state" field was cleared in this mutation.
func (m *TranMutation) StateCleared() bool {
	_, ok := m.clearedFields[tran.FieldState]
	return ok
}

// ResetState resets all changes to the "state" field.
func (m *TranMutation) ResetState() {
	m.state = nil
	delete(m.clearedFields, tran.FieldState)
}

// SetExtra sets the "extra" field.
func (m *TranMutation) SetExtra(s string) {
	m.extra = &s
}

// Extra returns the value of the "extra" field in the mutation.
func (m *TranMutation) Extra() (r string, exists bool) {
	v := m.extra
	if v == nil {
		return
	}
	return *v, true
}

// OldExtra returns the old "extra" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldExtra(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtra is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtra requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtra: %w", err)
	}
	return oldValue.Extra, nil
}

// ClearExtra clears the value of the "extra" field.
func (m *TranMutation) ClearExtra() {
	m.extra = nil
	m.clearedFields[tran.FieldExtra] = struct{}{}
}

// ExtraCleared returns if the "extra" field was cleared in this mutation.
func (m *TranMutation) ExtraCleared() bool {
	_, ok := m.clearedFields[tran.FieldExtra]
	return ok
}

// ResetExtra resets all changes to the "extra" field.
func (m *TranMutation) ResetExtra() {
	m.extra = nil
	delete(m.clearedFields, tran.FieldExtra)
}

// SetType sets the "type" field.
func (m *TranMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *TranMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Tran entity.
// If the Tran object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *TranMutation) ClearType() {
	m._type = nil
	m.clearedFields[tran.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *TranMutation) TypeCleared() bool {
	_, ok := m.clearedFields[tran.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *TranMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, tran.FieldType)
}

// Where appends a list predicates to the TranMutation builder.
func (m *TranMutation) Where(ps ...predicate.Tran) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TranMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Tran).
func (m *TranMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TranMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, tran.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, tran.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, tran.FieldDeletedAt)
	}
	if m.coin_type_id != nil {
		fields = append(fields, tran.FieldCoinTypeID)
	}
	if m.from_account_id != nil {
		fields = append(fields, tran.FieldFromAccountID)
	}
	if m.to_account_id != nil {
		fields = append(fields, tran.FieldToAccountID)
	}
	if m.amount != nil {
		fields = append(fields, tran.FieldAmount)
	}
	if m.fee_amount != nil {
		fields = append(fields, tran.FieldFeeAmount)
	}
	if m.chain_tx_id != nil {
		fields = append(fields, tran.FieldChainTxID)
	}
	if m.state != nil {
		fields = append(fields, tran.FieldState)
	}
	if m.extra != nil {
		fields = append(fields, tran.FieldExtra)
	}
	if m._type != nil {
		fields = append(fields, tran.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TranMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tran.FieldCreatedAt:
		return m.CreatedAt()
	case tran.FieldUpdatedAt:
		return m.UpdatedAt()
	case tran.FieldDeletedAt:
		return m.DeletedAt()
	case tran.FieldCoinTypeID:
		return m.CoinTypeID()
	case tran.FieldFromAccountID:
		return m.FromAccountID()
	case tran.FieldToAccountID:
		return m.ToAccountID()
	case tran.FieldAmount:
		return m.Amount()
	case tran.FieldFeeAmount:
		return m.FeeAmount()
	case tran.FieldChainTxID:
		return m.ChainTxID()
	case tran.FieldState:
		return m.State()
	case tran.FieldExtra:
		return m.Extra()
	case tran.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TranMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tran.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case tran.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case tran.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case tran.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case tran.FieldFromAccountID:
		return m.OldFromAccountID(ctx)
	case tran.FieldToAccountID:
		return m.OldToAccountID(ctx)
	case tran.FieldAmount:
		return m.OldAmount(ctx)
	case tran.FieldFeeAmount:
		return m.OldFeeAmount(ctx)
	case tran.FieldChainTxID:
		return m.OldChainTxID(ctx)
	case tran.FieldState:
		return m.OldState(ctx)
	case tran.FieldExtra:
		return m.OldExtra(ctx)
	case tran.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Tran field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TranMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tran.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case tran.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case tran.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case tran.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case tran.FieldFromAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromAccountID(v)
		return nil
	case tran.FieldToAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToAccountID(v)
		return nil
	case tran.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case tran.FieldFeeAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeAmount(v)
		return nil
	case tran.FieldChainTxID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainTxID(v)
		return nil
	case tran.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case tran.FieldExtra:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtra(v)
		return nil
	case tran.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Tran field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TranMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, tran.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, tran.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, tran.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TranMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tran.FieldCreatedAt:
		return m.AddedCreatedAt()
	case tran.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case tran.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TranMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tran.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case tran.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case tran.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Tran numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TranMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tran.FieldCoinTypeID) {
		fields = append(fields, tran.FieldCoinTypeID)
	}
	if m.FieldCleared(tran.FieldFromAccountID) {
		fields = append(fields, tran.FieldFromAccountID)
	}
	if m.FieldCleared(tran.FieldToAccountID) {
		fields = append(fields, tran.FieldToAccountID)
	}
	if m.FieldCleared(tran.FieldAmount) {
		fields = append(fields, tran.FieldAmount)
	}
	if m.FieldCleared(tran.FieldFeeAmount) {
		fields = append(fields, tran.FieldFeeAmount)
	}
	if m.FieldCleared(tran.FieldChainTxID) {
		fields = append(fields, tran.FieldChainTxID)
	}
	if m.FieldCleared(tran.FieldState) {
		fields = append(fields, tran.FieldState)
	}
	if m.FieldCleared(tran.FieldExtra) {
		fields = append(fields, tran.FieldExtra)
	}
	if m.FieldCleared(tran.FieldType) {
		fields = append(fields, tran.FieldType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TranMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TranMutation) ClearField(name string) error {
	switch name {
	case tran.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case tran.FieldFromAccountID:
		m.ClearFromAccountID()
		return nil
	case tran.FieldToAccountID:
		m.ClearToAccountID()
		return nil
	case tran.FieldAmount:
		m.ClearAmount()
		return nil
	case tran.FieldFeeAmount:
		m.ClearFeeAmount()
		return nil
	case tran.FieldChainTxID:
		m.ClearChainTxID()
		return nil
	case tran.FieldState:
		m.ClearState()
		return nil
	case tran.FieldExtra:
		m.ClearExtra()
		return nil
	case tran.FieldType:
		m.ClearType()
		return nil
	}
	return fmt.Errorf("unknown Tran nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TranMutation) ResetField(name string) error {
	switch name {
	case tran.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case tran.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case tran.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case tran.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case tran.FieldFromAccountID:
		m.ResetFromAccountID()
		return nil
	case tran.FieldToAccountID:
		m.ResetToAccountID()
		return nil
	case tran.FieldAmount:
		m.ResetAmount()
		return nil
	case tran.FieldFeeAmount:
		m.ResetFeeAmount()
		return nil
	case tran.FieldChainTxID:
		m.ResetChainTxID()
		return nil
	case tran.FieldState:
		m.ResetState()
		return nil
	case tran.FieldExtra:
		m.ResetExtra()
		return nil
	case tran.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Tran field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TranMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TranMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TranMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TranMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TranMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TranMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TranMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Tran unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TranMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Tran edge %s", name)
}
