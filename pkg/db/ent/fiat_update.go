// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/fiat"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// FiatUpdate is the builder for updating Fiat entities.
type FiatUpdate struct {
	config
	hooks     []Hook
	mutation  *FiatMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FiatUpdate builder.
func (fu *FiatUpdate) Where(ps ...predicate.Fiat) *FiatUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetCreatedAt sets the "created_at" field.
func (fu *FiatUpdate) SetCreatedAt(u uint32) *FiatUpdate {
	fu.mutation.ResetCreatedAt()
	fu.mutation.SetCreatedAt(u)
	return fu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fu *FiatUpdate) SetNillableCreatedAt(u *uint32) *FiatUpdate {
	if u != nil {
		fu.SetCreatedAt(*u)
	}
	return fu
}

// AddCreatedAt adds u to the "created_at" field.
func (fu *FiatUpdate) AddCreatedAt(u int32) *FiatUpdate {
	fu.mutation.AddCreatedAt(u)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FiatUpdate) SetUpdatedAt(u uint32) *FiatUpdate {
	fu.mutation.ResetUpdatedAt()
	fu.mutation.SetUpdatedAt(u)
	return fu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (fu *FiatUpdate) AddUpdatedAt(u int32) *FiatUpdate {
	fu.mutation.AddUpdatedAt(u)
	return fu
}

// SetDeletedAt sets the "deleted_at" field.
func (fu *FiatUpdate) SetDeletedAt(u uint32) *FiatUpdate {
	fu.mutation.ResetDeletedAt()
	fu.mutation.SetDeletedAt(u)
	return fu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fu *FiatUpdate) SetNillableDeletedAt(u *uint32) *FiatUpdate {
	if u != nil {
		fu.SetDeletedAt(*u)
	}
	return fu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (fu *FiatUpdate) AddDeletedAt(u int32) *FiatUpdate {
	fu.mutation.AddDeletedAt(u)
	return fu
}

// SetEntID sets the "ent_id" field.
func (fu *FiatUpdate) SetEntID(u uuid.UUID) *FiatUpdate {
	fu.mutation.SetEntID(u)
	return fu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fu *FiatUpdate) SetNillableEntID(u *uuid.UUID) *FiatUpdate {
	if u != nil {
		fu.SetEntID(*u)
	}
	return fu
}

// SetName sets the "name" field.
func (fu *FiatUpdate) SetName(s string) *FiatUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FiatUpdate) SetNillableName(s *string) *FiatUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// ClearName clears the value of the "name" field.
func (fu *FiatUpdate) ClearName() *FiatUpdate {
	fu.mutation.ClearName()
	return fu
}

// SetLogo sets the "logo" field.
func (fu *FiatUpdate) SetLogo(s string) *FiatUpdate {
	fu.mutation.SetLogo(s)
	return fu
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (fu *FiatUpdate) SetNillableLogo(s *string) *FiatUpdate {
	if s != nil {
		fu.SetLogo(*s)
	}
	return fu
}

// ClearLogo clears the value of the "logo" field.
func (fu *FiatUpdate) ClearLogo() *FiatUpdate {
	fu.mutation.ClearLogo()
	return fu
}

// SetUnit sets the "unit" field.
func (fu *FiatUpdate) SetUnit(s string) *FiatUpdate {
	fu.mutation.SetUnit(s)
	return fu
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (fu *FiatUpdate) SetNillableUnit(s *string) *FiatUpdate {
	if s != nil {
		fu.SetUnit(*s)
	}
	return fu
}

// ClearUnit clears the value of the "unit" field.
func (fu *FiatUpdate) ClearUnit() *FiatUpdate {
	fu.mutation.ClearUnit()
	return fu
}

// Mutation returns the FiatMutation object of the builder.
func (fu *FiatUpdate) Mutation() *FiatMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FiatUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := fu.defaults(); err != nil {
		return 0, err
	}
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FiatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FiatUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FiatUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FiatUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FiatUpdate) defaults() error {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		if fiat.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fiat.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fiat.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fu *FiatUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FiatUpdate {
	fu.modifiers = append(fu.modifiers, modifiers...)
	return fu
}

func (fu *FiatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fiat.Table,
			Columns: fiat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: fiat.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiat.FieldCreatedAt,
		})
	}
	if value, ok := fu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiat.FieldCreatedAt,
		})
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiat.FieldUpdatedAt,
		})
	}
	if value, ok := fu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiat.FieldUpdatedAt,
		})
	}
	if value, ok := fu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiat.FieldDeletedAt,
		})
	}
	if value, ok := fu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiat.FieldDeletedAt,
		})
	}
	if value, ok := fu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fiat.FieldEntID,
		})
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fiat.FieldName,
		})
	}
	if fu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fiat.FieldName,
		})
	}
	if value, ok := fu.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fiat.FieldLogo,
		})
	}
	if fu.mutation.LogoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fiat.FieldLogo,
		})
	}
	if value, ok := fu.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fiat.FieldUnit,
		})
	}
	if fu.mutation.UnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fiat.FieldUnit,
		})
	}
	_spec.Modifiers = fu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fiat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FiatUpdateOne is the builder for updating a single Fiat entity.
type FiatUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FiatMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (fuo *FiatUpdateOne) SetCreatedAt(u uint32) *FiatUpdateOne {
	fuo.mutation.ResetCreatedAt()
	fuo.mutation.SetCreatedAt(u)
	return fuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fuo *FiatUpdateOne) SetNillableCreatedAt(u *uint32) *FiatUpdateOne {
	if u != nil {
		fuo.SetCreatedAt(*u)
	}
	return fuo
}

// AddCreatedAt adds u to the "created_at" field.
func (fuo *FiatUpdateOne) AddCreatedAt(u int32) *FiatUpdateOne {
	fuo.mutation.AddCreatedAt(u)
	return fuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FiatUpdateOne) SetUpdatedAt(u uint32) *FiatUpdateOne {
	fuo.mutation.ResetUpdatedAt()
	fuo.mutation.SetUpdatedAt(u)
	return fuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (fuo *FiatUpdateOne) AddUpdatedAt(u int32) *FiatUpdateOne {
	fuo.mutation.AddUpdatedAt(u)
	return fuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fuo *FiatUpdateOne) SetDeletedAt(u uint32) *FiatUpdateOne {
	fuo.mutation.ResetDeletedAt()
	fuo.mutation.SetDeletedAt(u)
	return fuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fuo *FiatUpdateOne) SetNillableDeletedAt(u *uint32) *FiatUpdateOne {
	if u != nil {
		fuo.SetDeletedAt(*u)
	}
	return fuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (fuo *FiatUpdateOne) AddDeletedAt(u int32) *FiatUpdateOne {
	fuo.mutation.AddDeletedAt(u)
	return fuo
}

// SetEntID sets the "ent_id" field.
func (fuo *FiatUpdateOne) SetEntID(u uuid.UUID) *FiatUpdateOne {
	fuo.mutation.SetEntID(u)
	return fuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fuo *FiatUpdateOne) SetNillableEntID(u *uuid.UUID) *FiatUpdateOne {
	if u != nil {
		fuo.SetEntID(*u)
	}
	return fuo
}

// SetName sets the "name" field.
func (fuo *FiatUpdateOne) SetName(s string) *FiatUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FiatUpdateOne) SetNillableName(s *string) *FiatUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// ClearName clears the value of the "name" field.
func (fuo *FiatUpdateOne) ClearName() *FiatUpdateOne {
	fuo.mutation.ClearName()
	return fuo
}

// SetLogo sets the "logo" field.
func (fuo *FiatUpdateOne) SetLogo(s string) *FiatUpdateOne {
	fuo.mutation.SetLogo(s)
	return fuo
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (fuo *FiatUpdateOne) SetNillableLogo(s *string) *FiatUpdateOne {
	if s != nil {
		fuo.SetLogo(*s)
	}
	return fuo
}

// ClearLogo clears the value of the "logo" field.
func (fuo *FiatUpdateOne) ClearLogo() *FiatUpdateOne {
	fuo.mutation.ClearLogo()
	return fuo
}

// SetUnit sets the "unit" field.
func (fuo *FiatUpdateOne) SetUnit(s string) *FiatUpdateOne {
	fuo.mutation.SetUnit(s)
	return fuo
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (fuo *FiatUpdateOne) SetNillableUnit(s *string) *FiatUpdateOne {
	if s != nil {
		fuo.SetUnit(*s)
	}
	return fuo
}

// ClearUnit clears the value of the "unit" field.
func (fuo *FiatUpdateOne) ClearUnit() *FiatUpdateOne {
	fuo.mutation.ClearUnit()
	return fuo
}

// Mutation returns the FiatMutation object of the builder.
func (fuo *FiatUpdateOne) Mutation() *FiatMutation {
	return fuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FiatUpdateOne) Select(field string, fields ...string) *FiatUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Fiat entity.
func (fuo *FiatUpdateOne) Save(ctx context.Context) (*Fiat, error) {
	var (
		err  error
		node *Fiat
	)
	if err := fuo.defaults(); err != nil {
		return nil, err
	}
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FiatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Fiat)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FiatMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FiatUpdateOne) SaveX(ctx context.Context) *Fiat {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FiatUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FiatUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FiatUpdateOne) defaults() error {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		if fiat.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fiat.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fiat.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fuo *FiatUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FiatUpdateOne {
	fuo.modifiers = append(fuo.modifiers, modifiers...)
	return fuo
}

func (fuo *FiatUpdateOne) sqlSave(ctx context.Context) (_node *Fiat, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fiat.Table,
			Columns: fiat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: fiat.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Fiat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fiat.FieldID)
		for _, f := range fields {
			if !fiat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fiat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiat.FieldCreatedAt,
		})
	}
	if value, ok := fuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiat.FieldCreatedAt,
		})
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiat.FieldUpdatedAt,
		})
	}
	if value, ok := fuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiat.FieldUpdatedAt,
		})
	}
	if value, ok := fuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiat.FieldDeletedAt,
		})
	}
	if value, ok := fuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fiat.FieldDeletedAt,
		})
	}
	if value, ok := fuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fiat.FieldEntID,
		})
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fiat.FieldName,
		})
	}
	if fuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fiat.FieldName,
		})
	}
	if value, ok := fuo.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fiat.FieldLogo,
		})
	}
	if fuo.mutation.LogoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fiat.FieldLogo,
		})
	}
	if value, ok := fuo.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fiat.FieldUnit,
		})
	}
	if fuo.mutation.UnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fiat.FieldUnit,
		})
	}
	_spec.Modifiers = fuo.modifiers
	_node = &Fiat{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fiat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
