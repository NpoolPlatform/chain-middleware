// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/coinfiat"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// CoinFiatUpdate is the builder for updating CoinFiat entities.
type CoinFiatUpdate struct {
	config
	hooks     []Hook
	mutation  *CoinFiatMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CoinFiatUpdate builder.
func (cfu *CoinFiatUpdate) Where(ps ...predicate.CoinFiat) *CoinFiatUpdate {
	cfu.mutation.Where(ps...)
	return cfu
}

// SetCreatedAt sets the "created_at" field.
func (cfu *CoinFiatUpdate) SetCreatedAt(u uint32) *CoinFiatUpdate {
	cfu.mutation.ResetCreatedAt()
	cfu.mutation.SetCreatedAt(u)
	return cfu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cfu *CoinFiatUpdate) SetNillableCreatedAt(u *uint32) *CoinFiatUpdate {
	if u != nil {
		cfu.SetCreatedAt(*u)
	}
	return cfu
}

// AddCreatedAt adds u to the "created_at" field.
func (cfu *CoinFiatUpdate) AddCreatedAt(u int32) *CoinFiatUpdate {
	cfu.mutation.AddCreatedAt(u)
	return cfu
}

// SetUpdatedAt sets the "updated_at" field.
func (cfu *CoinFiatUpdate) SetUpdatedAt(u uint32) *CoinFiatUpdate {
	cfu.mutation.ResetUpdatedAt()
	cfu.mutation.SetUpdatedAt(u)
	return cfu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cfu *CoinFiatUpdate) AddUpdatedAt(u int32) *CoinFiatUpdate {
	cfu.mutation.AddUpdatedAt(u)
	return cfu
}

// SetDeletedAt sets the "deleted_at" field.
func (cfu *CoinFiatUpdate) SetDeletedAt(u uint32) *CoinFiatUpdate {
	cfu.mutation.ResetDeletedAt()
	cfu.mutation.SetDeletedAt(u)
	return cfu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cfu *CoinFiatUpdate) SetNillableDeletedAt(u *uint32) *CoinFiatUpdate {
	if u != nil {
		cfu.SetDeletedAt(*u)
	}
	return cfu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cfu *CoinFiatUpdate) AddDeletedAt(u int32) *CoinFiatUpdate {
	cfu.mutation.AddDeletedAt(u)
	return cfu
}

// SetEntID sets the "ent_id" field.
func (cfu *CoinFiatUpdate) SetEntID(u uuid.UUID) *CoinFiatUpdate {
	cfu.mutation.SetEntID(u)
	return cfu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cfu *CoinFiatUpdate) SetNillableEntID(u *uuid.UUID) *CoinFiatUpdate {
	if u != nil {
		cfu.SetEntID(*u)
	}
	return cfu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cfu *CoinFiatUpdate) SetCoinTypeID(u uuid.UUID) *CoinFiatUpdate {
	cfu.mutation.SetCoinTypeID(u)
	return cfu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (cfu *CoinFiatUpdate) SetNillableCoinTypeID(u *uuid.UUID) *CoinFiatUpdate {
	if u != nil {
		cfu.SetCoinTypeID(*u)
	}
	return cfu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (cfu *CoinFiatUpdate) ClearCoinTypeID() *CoinFiatUpdate {
	cfu.mutation.ClearCoinTypeID()
	return cfu
}

// SetFiatID sets the "fiat_id" field.
func (cfu *CoinFiatUpdate) SetFiatID(u uuid.UUID) *CoinFiatUpdate {
	cfu.mutation.SetFiatID(u)
	return cfu
}

// SetNillableFiatID sets the "fiat_id" field if the given value is not nil.
func (cfu *CoinFiatUpdate) SetNillableFiatID(u *uuid.UUID) *CoinFiatUpdate {
	if u != nil {
		cfu.SetFiatID(*u)
	}
	return cfu
}

// ClearFiatID clears the value of the "fiat_id" field.
func (cfu *CoinFiatUpdate) ClearFiatID() *CoinFiatUpdate {
	cfu.mutation.ClearFiatID()
	return cfu
}

// SetFeedType sets the "feed_type" field.
func (cfu *CoinFiatUpdate) SetFeedType(s string) *CoinFiatUpdate {
	cfu.mutation.SetFeedType(s)
	return cfu
}

// SetNillableFeedType sets the "feed_type" field if the given value is not nil.
func (cfu *CoinFiatUpdate) SetNillableFeedType(s *string) *CoinFiatUpdate {
	if s != nil {
		cfu.SetFeedType(*s)
	}
	return cfu
}

// ClearFeedType clears the value of the "feed_type" field.
func (cfu *CoinFiatUpdate) ClearFeedType() *CoinFiatUpdate {
	cfu.mutation.ClearFeedType()
	return cfu
}

// Mutation returns the CoinFiatMutation object of the builder.
func (cfu *CoinFiatUpdate) Mutation() *CoinFiatMutation {
	return cfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cfu *CoinFiatUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := cfu.defaults(); err != nil {
		return 0, err
	}
	if len(cfu.hooks) == 0 {
		affected, err = cfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinFiatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cfu.mutation = mutation
			affected, err = cfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cfu.hooks) - 1; i >= 0; i-- {
			if cfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cfu *CoinFiatUpdate) SaveX(ctx context.Context) int {
	affected, err := cfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cfu *CoinFiatUpdate) Exec(ctx context.Context) error {
	_, err := cfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfu *CoinFiatUpdate) ExecX(ctx context.Context) {
	if err := cfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfu *CoinFiatUpdate) defaults() error {
	if _, ok := cfu.mutation.UpdatedAt(); !ok {
		if coinfiat.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coinfiat.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coinfiat.UpdateDefaultUpdatedAt()
		cfu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cfu *CoinFiatUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CoinFiatUpdate {
	cfu.modifiers = append(cfu.modifiers, modifiers...)
	return cfu
}

func (cfu *CoinFiatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coinfiat.Table,
			Columns: coinfiat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: coinfiat.FieldID,
			},
		},
	}
	if ps := cfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiat.FieldCreatedAt,
		})
	}
	if value, ok := cfu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiat.FieldCreatedAt,
		})
	}
	if value, ok := cfu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiat.FieldUpdatedAt,
		})
	}
	if value, ok := cfu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiat.FieldUpdatedAt,
		})
	}
	if value, ok := cfu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiat.FieldDeletedAt,
		})
	}
	if value, ok := cfu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiat.FieldDeletedAt,
		})
	}
	if value, ok := cfu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinfiat.FieldEntID,
		})
	}
	if value, ok := cfu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinfiat.FieldCoinTypeID,
		})
	}
	if cfu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: coinfiat.FieldCoinTypeID,
		})
	}
	if value, ok := cfu.mutation.FiatID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinfiat.FieldFiatID,
		})
	}
	if cfu.mutation.FiatIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: coinfiat.FieldFiatID,
		})
	}
	if value, ok := cfu.mutation.FeedType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coinfiat.FieldFeedType,
		})
	}
	if cfu.mutation.FeedTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: coinfiat.FieldFeedType,
		})
	}
	_spec.Modifiers = cfu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, cfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coinfiat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CoinFiatUpdateOne is the builder for updating a single CoinFiat entity.
type CoinFiatUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CoinFiatMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (cfuo *CoinFiatUpdateOne) SetCreatedAt(u uint32) *CoinFiatUpdateOne {
	cfuo.mutation.ResetCreatedAt()
	cfuo.mutation.SetCreatedAt(u)
	return cfuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cfuo *CoinFiatUpdateOne) SetNillableCreatedAt(u *uint32) *CoinFiatUpdateOne {
	if u != nil {
		cfuo.SetCreatedAt(*u)
	}
	return cfuo
}

// AddCreatedAt adds u to the "created_at" field.
func (cfuo *CoinFiatUpdateOne) AddCreatedAt(u int32) *CoinFiatUpdateOne {
	cfuo.mutation.AddCreatedAt(u)
	return cfuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cfuo *CoinFiatUpdateOne) SetUpdatedAt(u uint32) *CoinFiatUpdateOne {
	cfuo.mutation.ResetUpdatedAt()
	cfuo.mutation.SetUpdatedAt(u)
	return cfuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cfuo *CoinFiatUpdateOne) AddUpdatedAt(u int32) *CoinFiatUpdateOne {
	cfuo.mutation.AddUpdatedAt(u)
	return cfuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cfuo *CoinFiatUpdateOne) SetDeletedAt(u uint32) *CoinFiatUpdateOne {
	cfuo.mutation.ResetDeletedAt()
	cfuo.mutation.SetDeletedAt(u)
	return cfuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cfuo *CoinFiatUpdateOne) SetNillableDeletedAt(u *uint32) *CoinFiatUpdateOne {
	if u != nil {
		cfuo.SetDeletedAt(*u)
	}
	return cfuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cfuo *CoinFiatUpdateOne) AddDeletedAt(u int32) *CoinFiatUpdateOne {
	cfuo.mutation.AddDeletedAt(u)
	return cfuo
}

// SetEntID sets the "ent_id" field.
func (cfuo *CoinFiatUpdateOne) SetEntID(u uuid.UUID) *CoinFiatUpdateOne {
	cfuo.mutation.SetEntID(u)
	return cfuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cfuo *CoinFiatUpdateOne) SetNillableEntID(u *uuid.UUID) *CoinFiatUpdateOne {
	if u != nil {
		cfuo.SetEntID(*u)
	}
	return cfuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (cfuo *CoinFiatUpdateOne) SetCoinTypeID(u uuid.UUID) *CoinFiatUpdateOne {
	cfuo.mutation.SetCoinTypeID(u)
	return cfuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (cfuo *CoinFiatUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *CoinFiatUpdateOne {
	if u != nil {
		cfuo.SetCoinTypeID(*u)
	}
	return cfuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (cfuo *CoinFiatUpdateOne) ClearCoinTypeID() *CoinFiatUpdateOne {
	cfuo.mutation.ClearCoinTypeID()
	return cfuo
}

// SetFiatID sets the "fiat_id" field.
func (cfuo *CoinFiatUpdateOne) SetFiatID(u uuid.UUID) *CoinFiatUpdateOne {
	cfuo.mutation.SetFiatID(u)
	return cfuo
}

// SetNillableFiatID sets the "fiat_id" field if the given value is not nil.
func (cfuo *CoinFiatUpdateOne) SetNillableFiatID(u *uuid.UUID) *CoinFiatUpdateOne {
	if u != nil {
		cfuo.SetFiatID(*u)
	}
	return cfuo
}

// ClearFiatID clears the value of the "fiat_id" field.
func (cfuo *CoinFiatUpdateOne) ClearFiatID() *CoinFiatUpdateOne {
	cfuo.mutation.ClearFiatID()
	return cfuo
}

// SetFeedType sets the "feed_type" field.
func (cfuo *CoinFiatUpdateOne) SetFeedType(s string) *CoinFiatUpdateOne {
	cfuo.mutation.SetFeedType(s)
	return cfuo
}

// SetNillableFeedType sets the "feed_type" field if the given value is not nil.
func (cfuo *CoinFiatUpdateOne) SetNillableFeedType(s *string) *CoinFiatUpdateOne {
	if s != nil {
		cfuo.SetFeedType(*s)
	}
	return cfuo
}

// ClearFeedType clears the value of the "feed_type" field.
func (cfuo *CoinFiatUpdateOne) ClearFeedType() *CoinFiatUpdateOne {
	cfuo.mutation.ClearFeedType()
	return cfuo
}

// Mutation returns the CoinFiatMutation object of the builder.
func (cfuo *CoinFiatUpdateOne) Mutation() *CoinFiatMutation {
	return cfuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cfuo *CoinFiatUpdateOne) Select(field string, fields ...string) *CoinFiatUpdateOne {
	cfuo.fields = append([]string{field}, fields...)
	return cfuo
}

// Save executes the query and returns the updated CoinFiat entity.
func (cfuo *CoinFiatUpdateOne) Save(ctx context.Context) (*CoinFiat, error) {
	var (
		err  error
		node *CoinFiat
	)
	if err := cfuo.defaults(); err != nil {
		return nil, err
	}
	if len(cfuo.hooks) == 0 {
		node, err = cfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinFiatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cfuo.mutation = mutation
			node, err = cfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cfuo.hooks) - 1; i >= 0; i-- {
			if cfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cfuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cfuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CoinFiat)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CoinFiatMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cfuo *CoinFiatUpdateOne) SaveX(ctx context.Context) *CoinFiat {
	node, err := cfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cfuo *CoinFiatUpdateOne) Exec(ctx context.Context) error {
	_, err := cfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfuo *CoinFiatUpdateOne) ExecX(ctx context.Context) {
	if err := cfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfuo *CoinFiatUpdateOne) defaults() error {
	if _, ok := cfuo.mutation.UpdatedAt(); !ok {
		if coinfiat.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coinfiat.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coinfiat.UpdateDefaultUpdatedAt()
		cfuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cfuo *CoinFiatUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CoinFiatUpdateOne {
	cfuo.modifiers = append(cfuo.modifiers, modifiers...)
	return cfuo
}

func (cfuo *CoinFiatUpdateOne) sqlSave(ctx context.Context) (_node *CoinFiat, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coinfiat.Table,
			Columns: coinfiat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: coinfiat.FieldID,
			},
		},
	}
	id, ok := cfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CoinFiat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coinfiat.FieldID)
		for _, f := range fields {
			if !coinfiat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coinfiat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiat.FieldCreatedAt,
		})
	}
	if value, ok := cfuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiat.FieldCreatedAt,
		})
	}
	if value, ok := cfuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiat.FieldUpdatedAt,
		})
	}
	if value, ok := cfuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiat.FieldUpdatedAt,
		})
	}
	if value, ok := cfuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiat.FieldDeletedAt,
		})
	}
	if value, ok := cfuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinfiat.FieldDeletedAt,
		})
	}
	if value, ok := cfuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinfiat.FieldEntID,
		})
	}
	if value, ok := cfuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinfiat.FieldCoinTypeID,
		})
	}
	if cfuo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: coinfiat.FieldCoinTypeID,
		})
	}
	if value, ok := cfuo.mutation.FiatID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinfiat.FieldFiatID,
		})
	}
	if cfuo.mutation.FiatIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: coinfiat.FieldFiatID,
		})
	}
	if value, ok := cfuo.mutation.FeedType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coinfiat.FieldFeedType,
		})
	}
	if cfuo.mutation.FeedTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: coinfiat.FieldFeedType,
		})
	}
	_spec.Modifiers = cfuo.modifiers
	_node = &CoinFiat{config: cfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coinfiat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
