// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/chain-middleware/pkg/db/ent/exchangerate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ExchangeRate is the model entity for the ExchangeRate schema.
type ExchangeRate struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// MarketValue holds the value of the "market_value" field.
	MarketValue decimal.Decimal `json:"market_value,omitempty"`
	// SettleValue holds the value of the "settle_value" field.
	SettleValue decimal.Decimal `json:"settle_value,omitempty"`
	// SettlePercent holds the value of the "settle_percent" field.
	SettlePercent uint32 `json:"settle_percent,omitempty"`
	// SettleTips holds the value of the "settle_tips" field.
	SettleTips []string `json:"settle_tips,omitempty"`
	// Setter holds the value of the "setter" field.
	Setter uuid.UUID `json:"setter,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExchangeRate) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case exchangerate.FieldSettleTips:
			values[i] = new([]byte)
		case exchangerate.FieldMarketValue, exchangerate.FieldSettleValue:
			values[i] = new(decimal.Decimal)
		case exchangerate.FieldCreatedAt, exchangerate.FieldUpdatedAt, exchangerate.FieldDeletedAt, exchangerate.FieldSettlePercent:
			values[i] = new(sql.NullInt64)
		case exchangerate.FieldID, exchangerate.FieldEntID, exchangerate.FieldAppID, exchangerate.FieldCoinTypeID, exchangerate.FieldSetter:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ExchangeRate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExchangeRate fields.
func (er *ExchangeRate) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exchangerate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				er.ID = *value
			}
		case exchangerate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				er.CreatedAt = uint32(value.Int64)
			}
		case exchangerate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				er.UpdatedAt = uint32(value.Int64)
			}
		case exchangerate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				er.DeletedAt = uint32(value.Int64)
			}
		case exchangerate.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				er.EntID = *value
			}
		case exchangerate.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				er.AppID = *value
			}
		case exchangerate.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				er.CoinTypeID = *value
			}
		case exchangerate.FieldMarketValue:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field market_value", values[i])
			} else if value != nil {
				er.MarketValue = *value
			}
		case exchangerate.FieldSettleValue:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field settle_value", values[i])
			} else if value != nil {
				er.SettleValue = *value
			}
		case exchangerate.FieldSettlePercent:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field settle_percent", values[i])
			} else if value.Valid {
				er.SettlePercent = uint32(value.Int64)
			}
		case exchangerate.FieldSettleTips:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field settle_tips", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &er.SettleTips); err != nil {
					return fmt.Errorf("unmarshal field settle_tips: %w", err)
				}
			}
		case exchangerate.FieldSetter:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field setter", values[i])
			} else if value != nil {
				er.Setter = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ExchangeRate.
// Note that you need to call ExchangeRate.Unwrap() before calling this method if this ExchangeRate
// was returned from a transaction, and the transaction was committed or rolled back.
func (er *ExchangeRate) Update() *ExchangeRateUpdateOne {
	return (&ExchangeRateClient{config: er.config}).UpdateOne(er)
}

// Unwrap unwraps the ExchangeRate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (er *ExchangeRate) Unwrap() *ExchangeRate {
	_tx, ok := er.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExchangeRate is not a transactional entity")
	}
	er.config.driver = _tx.drv
	return er
}

// String implements the fmt.Stringer.
func (er *ExchangeRate) String() string {
	var builder strings.Builder
	builder.WriteString("ExchangeRate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", er.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", er.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", er.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", er.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", er.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", er.AppID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", er.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("market_value=")
	builder.WriteString(fmt.Sprintf("%v", er.MarketValue))
	builder.WriteString(", ")
	builder.WriteString("settle_value=")
	builder.WriteString(fmt.Sprintf("%v", er.SettleValue))
	builder.WriteString(", ")
	builder.WriteString("settle_percent=")
	builder.WriteString(fmt.Sprintf("%v", er.SettlePercent))
	builder.WriteString(", ")
	builder.WriteString("settle_tips=")
	builder.WriteString(fmt.Sprintf("%v", er.SettleTips))
	builder.WriteString(", ")
	builder.WriteString("setter=")
	builder.WriteString(fmt.Sprintf("%v", er.Setter))
	builder.WriteByte(')')
	return builder.String()
}

// ExchangeRates is a parsable slice of ExchangeRate.
type ExchangeRates []*ExchangeRate

func (er ExchangeRates) config(cfg config) {
	for _i := range er {
		er[_i].config = cfg
	}
}
